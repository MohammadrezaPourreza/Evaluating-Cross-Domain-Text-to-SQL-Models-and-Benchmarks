{"db_id": "concert_singer", "question": "How many singers do we have?", "query": "SELECT count(*) FROM singer"}
{"db_id": "concert_singer", "question": "What is the total number of singers?", "query": "SELECT count(*) FROM singer"}
{"db_id": "concert_singer", "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.", "query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC"}
{"db_id": "concert_singer", "question": "What are the names, countries, and ages for every singer in descending order of age?", "query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC"}
{"db_id": "concert_singer", "question": "What is the average, minimum, and maximum age of all singers from France?", "query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}
{"db_id": "concert_singer", "question": "What is the average, minimum, and maximum age for all French singers?", "query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}
{"db_id": "concert_singer", "question": "Show the name and the release year of the song by the youngest singer.", "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}
{"db_id": "concert_singer", "question": "What are the names and release years for all the songs of the youngest singer?", "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}
{"db_id": "concert_singer", "question": "What are all distinct countries where singers above age 20 are from?", "query": "SELECT DISTINCT country FROM singer WHERE age  >  20"}
{"db_id": "concert_singer", "question": "What are  the different countries with singers above age 20?", "query": "SELECT DISTINCT country FROM singer WHERE age  >  20"}
{"db_id": "concert_singer", "question": "Show all countries and the number of singers in each country.", "query": "SELECT country ,  count(*) FROM singer GROUP BY country"}
{"db_id": "concert_singer", "question": "How many singers are from each country?", "query": "SELECT country ,  count(*) FROM singer GROUP BY country"}
{"db_id": "concert_singer", "question": "List all song names by singers above the average age.", "query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)"}
{"db_id": "concert_singer", "question": "What are all the song names by singers who are older than average?", "query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)"}
{"db_id": "concert_singer", "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}
{"db_id": "concert_singer", "question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}
{"db_id": "concert_singer", "question": "What is the average and maximum capacities for all stadiums ?", "query": "select avg(capacity) ,  max(capacity) from stadium"}
{"db_id": "concert_singer", "question": "What is the name and capacity for the stadium with highest average attendance?", "query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}
{"db_id": "concert_singer", "question": "What is the name and capacity for the stadium with the highest average attendance?", "query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}
{"db_id": "concert_singer", "question": "Which year has most number of concerts?", "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "concert_singer", "question": "What is the year that had the most concerts?", "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "concert_singer", "question": "Show countries where a singer above age 40 and a singer below 30 are from.", "query": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30"}
{"db_id": "concert_singer", "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}
{"db_id": "concert_singer", "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}
{"db_id": "pets_1", "question": "Find the number of pets whose weight is heavier than 10.", "query": "SELECT count(*) FROM pets WHERE weight  >  10"}
{"db_id": "pets_1", "question": "How many pets have a greater weight than 10?", "query": "SELECT count(*) FROM pets WHERE weight  >  10"}
{"db_id": "pets_1", "question": "Find the weight of the youngest dog.", "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}
{"db_id": "pets_1", "question": "How much does the youngest dog weigh?", "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}
{"db_id": "pets_1", "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.", "query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType"}
{"db_id": "pets_1", "question": "List the maximum weight and type for each type of pet.", "query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType"}
{"db_id": "pets_1", "question": "Find number of pets owned by students who are older than 20.", "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}
{"db_id": "pets_1", "question": "How many pets are owned by students that have an age greater than 20?", "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}
{"db_id": "pets_1", "question": "Find the number of dog pets that are raised by female students (with sex F).", "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}
{"db_id": "pets_1", "question": "How many dog pets are raised by female students?", "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}
{"db_id": "pets_1", "question": "Find the number of distinct type of pets.", "query": "SELECT count(DISTINCT pettype) FROM pets"}
{"db_id": "pets_1", "question": "How many different types of pet are there?", "query": "SELECT count(DISTINCT pettype) FROM pets"}
{"db_id": "pets_1", "question": "Find the first name of students who have cat or dog pet.", "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'"}
{"db_id": "pets_1", "question": "What are the first names of every student who has a cat or dog as a pet?", "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'"}
{"db_id": "pets_1", "question": "Find the first name of students who have both cat and dog pets .", "query": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'"}
{"db_id": "pets_1", "question": "What are the students' first names who have both cats and dogs as pets?", "query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'"}
{"db_id": "pets_1", "question": "Find the major and age of students who do not have a cat pet.", "query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"}
{"db_id": "pets_1", "question": "What major is every student who does not own a cat as a pet, and also how old are they?", "query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"}
{"db_id": "pets_1", "question": "Find the id of students who do not have a cat pet.", "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'"}
{"db_id": "pets_1", "question": "What are the ids of the students who do not own cats as pets?", "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'"}
{"db_id": "pets_1", "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.", "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"}
{"db_id": "pets_1", "question": "What is the first name of every student who has a dog but does not have a cat?", "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"}
{"db_id": "pets_1", "question": "Find the type and weight of the youngest pet.", "query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}
{"db_id": "pets_1", "question": "What type of pet is the youngest animal, and how much does it weigh?", "query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}
{"db_id": "pets_1", "question": "Find the id and weight of all pets whose age is older than 1.", "query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}
{"db_id": "pets_1", "question": "What is the id and weight of every pet who is older than 1?", "query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}
{"db_id": "pets_1", "question": "Find the average and maximum age for each type of pet.", "query": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype"}
{"db_id": "pets_1", "question": "What is the average and maximum age for each pet type?", "query": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype"}
{"db_id": "pets_1", "question": "Find the average weight for each pet type.", "query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype"}
{"db_id": "pets_1", "question": "What is the average weight for each type of pet?", "query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype"}
{"db_id": "pets_1", "question": "Find the first name and age of students who have a pet.", "query": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}
{"db_id": "pets_1", "question": "What are the different first names and ages of the students who do have pets?", "query": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}
{"db_id": "pets_1", "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.", "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'"}
{"db_id": "pets_1", "question": "What is the id of the pet owned by the student whose last name is 'Smith'?", "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'"}
{"db_id": "pets_1", "question": "Find the number of pets for each student who has any pet and student id.", "query": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid"}
{"db_id": "pets_1", "question": "For students who have pets , how many pets does each student have ? list their ids instead of names .", "query": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid"}
{"db_id": "pets_1", "question": "Find the first name and gender of student who have more than one pet.", "query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1"}
{"db_id": "pets_1", "question": "What is the first name and gender of the all the students who have more than one pet?", "query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1"}
{"db_id": "pets_1", "question": "Find the last name of the student who has a cat that is age 3.", "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}
{"db_id": "pets_1", "question": "What is the last name of the student who has a cat that is 3 years old?", "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}
{"db_id": "pets_1", "question": "Find the average age of students who do not have any pet .", "query": "select avg(age) from student where stuid not in (select stuid from has_pet)"}
{"db_id": "pets_1", "question": "What is the average age for all students who do not own any pets ?", "query": "select avg(age) from student where stuid not in (select stuid from has_pet)"}
{"db_id": "car_1", "question": "How many continents are there?", "query": "SELECT count(*) FROM CONTINENTS;"}
{"db_id": "car_1", "question": "What is the number of continents?", "query": "SELECT count(*) FROM CONTINENTS;"}
{"db_id": "car_1", "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.", "query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;"}
{"db_id": "car_1", "question": "For each continent, list its id, name, and how many countries it has?", "query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;"}
{"db_id": "car_1", "question": "How many countries are listed?", "query": "SELECT count(*) FROM COUNTRIES;"}
{"db_id": "car_1", "question": "How many countries exist?", "query": "SELECT count(*) FROM COUNTRIES;"}
{"db_id": "car_1", "question": "How many models does each car maker produce? List maker full name, id and the number.", "query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;"}
{"db_id": "car_1", "question": "What is the full name of each car maker, along with its id and how many models it produces?", "query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;"}
{"db_id": "car_1", "question": "Which model of the car has the minimum horsepower?", "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;"}
{"db_id": "car_1", "question": "What is the model of the car with the smallest amount of horsepower?", "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;"}
{"db_id": "car_1", "question": "Find the model of the car whose weight is below the average weight.", "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)"}
{"db_id": "car_1", "question": "What is the model for the car with a weight smaller than the average?", "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)"}
{"db_id": "car_1", "question": "Find the name of the makers that produced some cars in the year of 1970?", "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';"}
{"db_id": "car_1", "question": "What is the name of the different car makers who produced a car in 1970?", "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';"}
{"db_id": "car_1", "question": "Find the make and production time of the cars that were produced in the earliest year?", "query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);"}
{"db_id": "car_1", "question": "What is the maker of the carr produced in the earliest year and what year was it?", "query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);"}
{"db_id": "car_1", "question": "Which distinct car models are the produced after 1980?", "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;"}
{"db_id": "car_1", "question": "What are the different models for the cards produced after 1980?", "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;"}
{"db_id": "car_1", "question": "How many car models are produced by each maker ? Only list the count and the maker full name .", "query": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;"}
{"db_id": "car_1", "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?", "query": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;"}
{"db_id": "car_1", "question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';"}
{"db_id": "car_1", "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?", "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';"}
{"db_id": "car_1", "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "query": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}
{"db_id": "car_1", "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "query": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}
{"db_id": "car_1", "question": "What are all the makers and models?", "query": "SELECT Maker ,  Model FROM MODEL_LIST;"}
{"db_id": "car_1", "question": "What are the makers and models?", "query": "SELECT Maker ,  Model FROM MODEL_LIST;"}
{"db_id": "car_1", "question": "What is the average weight of cars each year?", "query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;"}
{"db_id": "car_1", "question": "What is the average weight and year for each year?", "query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;"}
{"db_id": "car_1", "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;"}
{"db_id": "car_1", "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;"}
{"db_id": "car_1", "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;"}
{"db_id": "car_1", "question": "What is the car model with the highest mpg ?", "query": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;"}
{"db_id": "car_1", "question": "What is the average edispl of the cars of model volvo?", "query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';"}
{"db_id": "car_1", "question": "What is the average edispl for all volvos?", "query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';"}
{"db_id": "car_1", "question": "What is the maximum accelerate for different number of cylinders?", "query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;"}
{"db_id": "car_1", "question": "What is the maximum accelerate for all the different cylinders?", "query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;"}
{"db_id": "car_1", "question": "Which model has the most version(make) of cars?", "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;"}
{"db_id": "car_1", "question": "What model has the most different versions?", "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;"}
{"db_id": "car_1", "question": "How many cars have more than 4 cylinders?", "query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;"}
{"db_id": "car_1", "question": "What is the number of cars with more than 4 cylinders?", "query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;"}
{"db_id": "car_1", "question": "how many cars were produced in 1980?", "query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;"}
{"db_id": "car_1", "question": "In 1980, how many cars were made?", "query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;"}
{"db_id": "car_1", "question": "How many car models were produced by the maker with full name American Motor Company?", "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';"}
{"db_id": "car_1", "question": "What is the number of car models created by the car maker American Motor Company?", "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';"}
{"db_id": "car_1", "question": "Which makers designed more than 3 car models? List full name and the id.", "query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;"}
{"db_id": "car_1", "question": "What are the names and ids of all makers with more than 3 models?", "query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;"}
{"db_id": "car_1", "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?", "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;"}
{"db_id": "car_1", "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?", "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;"}
{"db_id": "car_1", "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "query": "select distinct year from cars_data where weight between 3000 and 4000;"}
{"db_id": "car_1", "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "query": "select distinct year from cars_data where weight between 3000 and 4000;"}
{"db_id": "car_1", "question": "What is the horsepower of the car with the largest accelerate?", "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;"}
{"db_id": "car_1", "question": "What is the horsepower of the car with the greatest accelerate?", "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;"}
{"db_id": "car_1", "question": "For model volvo, how many cylinders does the car with the least accelerate have?", "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;"}
{"db_id": "car_1", "question": "For a volvo model, how many cylinders does the version with least accelerate have?", "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;"}
{"db_id": "car_1", "question": "How many cars have a larger accelerate than the car with the largest horsepower?", "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );"}
{"db_id": "car_1", "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?", "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );"}
{"db_id": "car_1", "question": "How many cars has over 6 cylinders?", "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;"}
{"db_id": "car_1", "question": "What is the number of carsw ith over 6 cylinders?", "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;"}
{"db_id": "car_1", "question": "For the cars with 4 cylinders, which model has the largest horsepower?", "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;"}
{"db_id": "car_1", "question": "For all of the 4 cylinder cars, which model has the most horsepower?", "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;"}
{"db_id": "car_1", "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.", "query": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;"}
{"db_id": "car_1", "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?", "query": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;"}
{"db_id": "car_1", "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?", "query": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980"}
{"db_id": "car_1", "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?", "query": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980"}
{"db_id": "car_1", "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';"}
{"db_id": "car_1", "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';"}
{"db_id": "car_1", "question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .", "query": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;"}
{"db_id": "car_1", "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?", "query": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;"}
{"db_id": "flight_2", "question": "How many airlines do we have?", "query": "SELECT count(*) FROM AIRLINES"}
{"db_id": "flight_2", "question": "What is the total number of airlines?", "query": "SELECT count(*) FROM AIRLINES"}
{"db_id": "flight_2", "question": "How many airports do we have?", "query": "SELECT count(*) FROM AIRPORTS"}
{"db_id": "flight_2", "question": "Return the number of  airports.", "query": "SELECT count(*) FROM AIRPORTS"}
{"db_id": "flight_2", "question": "How many flights do we have?", "query": "SELECT count(*) FROM FLIGHTS"}
{"db_id": "flight_2", "question": "Return the number of flights.", "query": "SELECT count(*) FROM FLIGHTS"}
{"db_id": "flight_2", "question": "Which city has most number of arriving flights?", "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "flight_2", "question": "Which city has the most frequent destination airport?", "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "flight_2", "question": "Which city has most number of departing flights?", "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "flight_2", "question": "Which city is the most frequent source airport?", "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "flight_2", "question": "What is the code of airport that has the highest number of flights?", "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "flight_2", "question": "What is the airport code of the airport with the most flights?", "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "flight_2", "question": "What is the code of airport that has fewest number of flights?", "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1"}
{"db_id": "flight_2", "question": "Give the code of the airport with the least flights.", "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1"}
{"db_id": "flight_2", "question": "Which airline has most number of flights?", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "flight_2", "question": "What airline serves the most flights?", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "flight_2", "question": "Find all airlines that have at least 10 flights.", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10"}
{"db_id": "flight_2", "question": "Which airlines have at least 10 flights?", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10"}
{"db_id": "flight_2", "question": "Find all airlines that have fewer than 200 flights.", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200"}
{"db_id": "flight_2", "question": "Which airlines have less than 200 flights?", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200"}
{"db_id": "flight_2", "question": "Find the name of airports which do not have any flight in and out.", "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)"}
{"db_id": "flight_2", "question": "Which airports do not have departing or arriving flights?", "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)"}
{"db_id": "employee_hire_evaluation", "question": "How many employees are there?", "query": "SELECT count(*) FROM employee"}
{"db_id": "employee_hire_evaluation", "question": "Count the number of employees", "query": "SELECT count(*) FROM employee"}
{"db_id": "employee_hire_evaluation", "question": "Sort employee names by their age in ascending order.", "query": "SELECT name FROM employee ORDER BY age"}
{"db_id": "employee_hire_evaluation", "question": "List the names of employees and sort in ascending order of age.", "query": "SELECT name FROM employee ORDER BY age"}
{"db_id": "employee_hire_evaluation", "question": "What is the number of employees from each city?", "query": "SELECT count(*) ,  city FROM employee GROUP BY city"}
{"db_id": "employee_hire_evaluation", "question": "Count the number of employees for each city.", "query": "SELECT count(*) ,  city FROM employee GROUP BY city"}
{"db_id": "employee_hire_evaluation", "question": "Which cities do more than one employee under age 30 come from?", "query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1"}
{"db_id": "employee_hire_evaluation", "question": "Find the cities that have more than one employee under age 30.", "query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1"}
{"db_id": "employee_hire_evaluation", "question": "Find the number of shops in each location.", "query": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION"}
{"db_id": "employee_hire_evaluation", "question": "How many shops are there in each location?", "query": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION"}
{"db_id": "employee_hire_evaluation", "question": "Find the manager name and district of the shop whose number of products is the largest.", "query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}
{"db_id": "employee_hire_evaluation", "question": "What are the manager name and district of the shop that sells the largest number of products?", "query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}
{"db_id": "employee_hire_evaluation", "question": "find the minimum and maximum number of products of all stores.", "query": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}
{"db_id": "employee_hire_evaluation", "question": "What are the minimum and maximum number of products across all the shops?", "query": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}
{"db_id": "employee_hire_evaluation", "question": "Return the name, location and district of all shops in descending order of number of products.", "query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC"}
{"db_id": "employee_hire_evaluation", "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.", "query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC"}
{"db_id": "employee_hire_evaluation", "question": "Find the names of stores whose number products is more than the average number of products.", "query": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)"}
{"db_id": "employee_hire_evaluation", "question": "Which shops' number products is above the average? Give me the shop names.", "query": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)"}
{"db_id": "employee_hire_evaluation", "question": "Find the name of the shops that do not hire any employee.", "query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)"}
{"db_id": "employee_hire_evaluation", "question": "Which shops run with no employees? Find the shop names", "query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)"}
{"db_id": "employee_hire_evaluation", "question": "Find the number of employees hired in each shop; show the shop name as well.", "query": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name"}
{"db_id": "employee_hire_evaluation", "question": "For each shop, return the number of employees working there and the name of the shop.", "query": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name"}
{"db_id": "employee_hire_evaluation", "question": "What is total bonus given in all evaluations?", "query": "SELECT sum(bonus) FROM evaluation"}
{"db_id": "employee_hire_evaluation", "question": "Find the total amount of bonus given in all the evaluations.", "query": "SELECT sum(bonus) FROM evaluation"}
{"db_id": "employee_hire_evaluation", "question": "Give me all the information about hiring.", "query": "SELECT * FROM hiring"}
{"db_id": "employee_hire_evaluation", "question": "What is all the information about hiring?", "query": "SELECT * FROM hiring"}
{"db_id": "employee_hire_evaluation", "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?", "query": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000"}
{"db_id": "employee_hire_evaluation", "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.", "query": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000"}
{"db_id": "employee_hire_evaluation", "question": "How many different store locations are there?", "query": "SELECT count(DISTINCT LOCATION) FROM shop"}
{"db_id": "employee_hire_evaluation", "question": "Count the number of distinct store locations.", "query": "SELECT count(DISTINCT LOCATION) FROM shop"}
{"db_id": "concert_singer", "question": "How many singers do we have?", "query": "SELECT count(*) FROM singer"}
{"db_id": "concert_singer", "question": "What is the total number of singers?", "query": "SELECT count(*) FROM singer"}
{"db_id": "concert_singer", "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.", "query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC"}
{"db_id": "concert_singer", "question": "What are the names, countries, and ages for every singer in descending order of age?", "query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC"}
{"db_id": "concert_singer", "question": "What is the average, minimum, and maximum age of all singers from France?", "query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}
{"db_id": "concert_singer", "question": "What is the average, minimum, and maximum age for all French singers?", "query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}
{"db_id": "concert_singer", "question": "Show the name and the release year of the song by the youngest singer.", "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}
{"db_id": "concert_singer", "question": "What are the names and release years for all the songs of the youngest singer?", "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}
{"db_id": "concert_singer", "question": "What are all distinct countries where singers above age 20 are from?", "query": "SELECT DISTINCT country FROM singer WHERE age  >  20"}
{"db_id": "concert_singer", "question": "What are  the different countries with singers above age 20?", "query": "SELECT DISTINCT country FROM singer WHERE age  >  20"}
{"db_id": "concert_singer", "question": "Show all countries and the number of singers in each country.", "query": "SELECT country ,  count(*) FROM singer GROUP BY country"}
{"db_id": "concert_singer", "question": "How many singers are from each country?", "query": "SELECT country ,  count(*) FROM singer GROUP BY country"}
{"db_id": "concert_singer", "question": "List all song names by singers above the average age.", "query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)"}
{"db_id": "concert_singer", "question": "What are all the song names by singers who are older than average?", "query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)"}
{"db_id": "concert_singer", "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}
{"db_id": "concert_singer", "question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}
{"db_id": "concert_singer", "question": "What is the average and maximum capacities for all stadiums ?", "query": "select avg(capacity) ,  max(capacity) from stadium"}
{"db_id": "concert_singer", "question": "What is the name and capacity for the stadium with highest average attendance?", "query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}
{"db_id": "concert_singer", "question": "What is the name and capacity for the stadium with the highest average attendance?", "query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}
{"db_id": "concert_singer", "question": "Which year has most number of concerts?", "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "concert_singer", "question": "What is the year that had the most concerts?", "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "concert_singer", "question": "Show countries where a singer above age 40 and a singer below 30 are from.", "query": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30"}
{"db_id": "concert_singer", "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}
{"db_id": "concert_singer", "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}
{"db_id": "pets_1", "question": "Find the number of pets whose weight is heavier than 10.", "query": "SELECT count(*) FROM pets WHERE weight  >  10"}
{"db_id": "pets_1", "question": "How many pets have a greater weight than 10?", "query": "SELECT count(*) FROM pets WHERE weight  >  10"}
{"db_id": "pets_1", "question": "Find the weight of the youngest dog.", "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}
{"db_id": "pets_1", "question": "How much does the youngest dog weigh?", "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}
{"db_id": "pets_1", "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.", "query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType"}
{"db_id": "pets_1", "question": "List the maximum weight and type for each type of pet.", "query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType"}
{"db_id": "pets_1", "question": "Find number of pets owned by students who are older than 20.", "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}
{"db_id": "pets_1", "question": "How many pets are owned by students that have an age greater than 20?", "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}
{"db_id": "pets_1", "question": "Find the number of dog pets that are raised by female students (with sex F).", "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}
{"db_id": "pets_1", "question": "How many dog pets are raised by female students?", "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}
{"db_id": "pets_1", "question": "Find the number of distinct type of pets.", "query": "SELECT count(DISTINCT pettype) FROM pets"}
{"db_id": "pets_1", "question": "How many different types of pet are there?", "query": "SELECT count(DISTINCT pettype) FROM pets"}
{"db_id": "pets_1", "question": "Find the first name of students who have cat or dog pet.", "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'"}
{"db_id": "pets_1", "question": "What are the first names of every student who has a cat or dog as a pet?", "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'"}
{"db_id": "pets_1", "question": "Find the first name of students who have both cat and dog pets .", "query": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'"}
{"db_id": "pets_1", "question": "What are the students' first names who have both cats and dogs as pets?", "query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'"}
{"db_id": "pets_1", "question": "Find the major and age of students who do not have a cat pet.", "query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"}
{"db_id": "pets_1", "question": "What major is every student who does not own a cat as a pet, and also how old are they?", "query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"}
{"db_id": "pets_1", "question": "Find the id of students who do not have a cat pet.", "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'"}
{"db_id": "pets_1", "question": "What are the ids of the students who do not own cats as pets?", "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'"}
{"db_id": "pets_1", "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.", "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"}
{"db_id": "pets_1", "question": "What is the first name of every student who has a dog but does not have a cat?", "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"}
{"db_id": "pets_1", "question": "Find the type and weight of the youngest pet.", "query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}
{"db_id": "pets_1", "question": "What type of pet is the youngest animal, and how much does it weigh?", "query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}
{"db_id": "pets_1", "question": "Find the id and weight of all pets whose age is older than 1.", "query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}
{"db_id": "pets_1", "question": "What is the id and weight of every pet who is older than 1?", "query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}
{"db_id": "pets_1", "question": "Find the average and maximum age for each type of pet.", "query": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype"}
{"db_id": "pets_1", "question": "What is the average and maximum age for each pet type?", "query": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype"}
{"db_id": "pets_1", "question": "Find the average weight for each pet type.", "query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype"}
{"db_id": "pets_1", "question": "What is the average weight for each type of pet?", "query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype"}
{"db_id": "pets_1", "question": "Find the first name and age of students who have a pet.", "query": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}
{"db_id": "pets_1", "question": "What are the different first names and ages of the students who do have pets?", "query": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}
{"db_id": "pets_1", "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.", "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'"}
{"db_id": "pets_1", "question": "What is the id of the pet owned by the student whose last name is 'Smith'?", "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'"}
{"db_id": "pets_1", "question": "Find the number of pets for each student who has any pet and student id.", "query": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid"}
{"db_id": "pets_1", "question": "For students who have pets , how many pets does each student have ? list their ids instead of names .", "query": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid"}
{"db_id": "pets_1", "question": "Find the first name and gender of student who have more than one pet.", "query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1"}
{"db_id": "pets_1", "question": "What is the first name and gender of the all the students who have more than one pet?", "query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1"}
{"db_id": "pets_1", "question": "Find the last name of the student who has a cat that is age 3.", "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}
{"db_id": "pets_1", "question": "What is the last name of the student who has a cat that is 3 years old?", "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}
{"db_id": "pets_1", "question": "Find the average age of students who do not have any pet .", "query": "select avg(age) from student where stuid not in (select stuid from has_pet)"}
{"db_id": "pets_1", "question": "What is the average age for all students who do not own any pets ?", "query": "select avg(age) from student where stuid not in (select stuid from has_pet)"}
{"db_id": "car_1", "question": "How many continents are there?", "query": "SELECT count(*) FROM CONTINENTS;"}
{"db_id": "car_1", "question": "What is the number of continents?", "query": "SELECT count(*) FROM CONTINENTS;"}
{"db_id": "car_1", "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.", "query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;"}
{"db_id": "car_1", "question": "For each continent, list its id, name, and how many countries it has?", "query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;"}
{"db_id": "car_1", "question": "How many countries are listed?", "query": "SELECT count(*) FROM COUNTRIES;"}
{"db_id": "car_1", "question": "How many countries exist?", "query": "SELECT count(*) FROM COUNTRIES;"}
{"db_id": "car_1", "question": "How many models does each car maker produce? List maker full name, id and the number.", "query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;"}
{"db_id": "car_1", "question": "What is the full name of each car maker, along with its id and how many models it produces?", "query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;"}
{"db_id": "car_1", "question": "Which model of the car has the minimum horsepower?", "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;"}
{"db_id": "car_1", "question": "What is the model of the car with the smallest amount of horsepower?", "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;"}
{"db_id": "car_1", "question": "Find the model of the car whose weight is below the average weight.", "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)"}
{"db_id": "car_1", "question": "What is the model for the car with a weight smaller than the average?", "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)"}
{"db_id": "car_1", "question": "Find the name of the makers that produced some cars in the year of 1970?", "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';"}
{"db_id": "car_1", "question": "What is the name of the different car makers who produced a car in 1970?", "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';"}
{"db_id": "car_1", "question": "Find the make and production time of the cars that were produced in the earliest year?", "query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);"}
{"db_id": "car_1", "question": "What is the maker of the carr produced in the earliest year and what year was it?", "query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);"}
{"db_id": "car_1", "question": "Which distinct car models are the produced after 1980?", "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;"}
{"db_id": "car_1", "question": "What are the different models for the cards produced after 1980?", "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;"}
{"db_id": "car_1", "question": "How many car models are produced by each maker ? Only list the count and the maker full name .", "query": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;"}
{"db_id": "car_1", "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?", "query": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;"}
{"db_id": "car_1", "question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';"}
{"db_id": "car_1", "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?", "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';"}
{"db_id": "car_1", "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "query": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}
{"db_id": "car_1", "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "query": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}
{"db_id": "car_1", "question": "What are all the makers and models?", "query": "SELECT Maker ,  Model FROM MODEL_LIST;"}
{"db_id": "car_1", "question": "What are the makers and models?", "query": "SELECT Maker ,  Model FROM MODEL_LIST;"}
{"db_id": "car_1", "question": "What is the average weight of cars each year?", "query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;"}
{"db_id": "car_1", "question": "What is the average weight and year for each year?", "query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;"}
{"db_id": "car_1", "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;"}
{"db_id": "car_1", "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;"}
{"db_id": "car_1", "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;"}
{"db_id": "car_1", "question": "What is the car model with the highest mpg ?", "query": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;"}
{"db_id": "car_1", "question": "What is the average edispl of the cars of model volvo?", "query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';"}
{"db_id": "car_1", "question": "What is the average edispl for all volvos?", "query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';"}
{"db_id": "car_1", "question": "What is the maximum accelerate for different number of cylinders?", "query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;"}
{"db_id": "car_1", "question": "What is the maximum accelerate for all the different cylinders?", "query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;"}
{"db_id": "car_1", "question": "Which model has the most version(make) of cars?", "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;"}
{"db_id": "car_1", "question": "What model has the most different versions?", "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;"}
{"db_id": "car_1", "question": "How many cars have more than 4 cylinders?", "query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;"}
{"db_id": "car_1", "question": "What is the number of cars with more than 4 cylinders?", "query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;"}
{"db_id": "car_1", "question": "how many cars were produced in 1980?", "query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;"}
{"db_id": "car_1", "question": "In 1980, how many cars were made?", "query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;"}
{"db_id": "car_1", "question": "How many car models were produced by the maker with full name American Motor Company?", "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';"}
{"db_id": "car_1", "question": "What is the number of car models created by the car maker American Motor Company?", "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';"}
{"db_id": "car_1", "question": "Which makers designed more than 3 car models? List full name and the id.", "query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;"}
{"db_id": "car_1", "question": "What are the names and ids of all makers with more than 3 models?", "query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;"}
{"db_id": "car_1", "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?", "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;"}
{"db_id": "car_1", "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?", "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;"}
{"db_id": "car_1", "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "query": "select distinct year from cars_data where weight between 3000 and 4000;"}
{"db_id": "car_1", "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "query": "select distinct year from cars_data where weight between 3000 and 4000;"}
{"db_id": "car_1", "question": "What is the horsepower of the car with the largest accelerate?", "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;"}
{"db_id": "car_1", "question": "What is the horsepower of the car with the greatest accelerate?", "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;"}
{"db_id": "car_1", "question": "For model volvo, how many cylinders does the car with the least accelerate have?", "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;"}
{"db_id": "car_1", "question": "For a volvo model, how many cylinders does the version with least accelerate have?", "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;"}
{"db_id": "car_1", "question": "How many cars have a larger accelerate than the car with the largest horsepower?", "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );"}
{"db_id": "car_1", "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?", "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );"}
{"db_id": "car_1", "question": "How many cars has over 6 cylinders?", "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;"}
{"db_id": "car_1", "question": "What is the number of carsw ith over 6 cylinders?", "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;"}
{"db_id": "car_1", "question": "For the cars with 4 cylinders, which model has the largest horsepower?", "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;"}
{"db_id": "car_1", "question": "For all of the 4 cylinder cars, which model has the most horsepower?", "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;"}
{"db_id": "car_1", "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.", "query": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;"}
{"db_id": "car_1", "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?", "query": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;"}
{"db_id": "car_1", "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?", "query": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980"}
{"db_id": "car_1", "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?", "query": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980"}
{"db_id": "car_1", "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';"}
{"db_id": "car_1", "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';"}
{"db_id": "car_1", "question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .", "query": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;"}
{"db_id": "car_1", "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?", "query": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;"}
{"db_id": "flight_2", "question": "How many airlines do we have?", "query": "SELECT count(*) FROM AIRLINES"}
{"db_id": "flight_2", "question": "What is the total number of airlines?", "query": "SELECT count(*) FROM AIRLINES"}
{"db_id": "flight_2", "question": "How many airports do we have?", "query": "SELECT count(*) FROM AIRPORTS"}
{"db_id": "flight_2", "question": "Return the number of  airports.", "query": "SELECT count(*) FROM AIRPORTS"}
{"db_id": "flight_2", "question": "How many flights do we have?", "query": "SELECT count(*) FROM FLIGHTS"}
{"db_id": "flight_2", "question": "Return the number of flights.", "query": "SELECT count(*) FROM FLIGHTS"}
{"db_id": "flight_2", "question": "Which city has most number of arriving flights?", "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "flight_2", "question": "Which city has the most frequent destination airport?", "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "flight_2", "question": "Which city has most number of departing flights?", "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "flight_2", "question": "Which city is the most frequent source airport?", "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "flight_2", "question": "What is the code of airport that has the highest number of flights?", "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "flight_2", "question": "What is the airport code of the airport with the most flights?", "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "flight_2", "question": "What is the code of airport that has fewest number of flights?", "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1"}
{"db_id": "flight_2", "question": "Give the code of the airport with the least flights.", "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1"}
{"db_id": "flight_2", "question": "Which airline has most number of flights?", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "flight_2", "question": "What airline serves the most flights?", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "flight_2", "question": "Find all airlines that have at least 10 flights.", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10"}
{"db_id": "flight_2", "question": "Which airlines have at least 10 flights?", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10"}
{"db_id": "flight_2", "question": "Find all airlines that have fewer than 200 flights.", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200"}
{"db_id": "flight_2", "question": "Which airlines have less than 200 flights?", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200"}
{"db_id": "flight_2", "question": "Find the name of airports which do not have any flight in and out.", "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)"}
{"db_id": "flight_2", "question": "Which airports do not have departing or arriving flights?", "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)"}
{"db_id": "employee_hire_evaluation", "question": "How many employees are there?", "query": "SELECT count(*) FROM employee"}
{"db_id": "employee_hire_evaluation", "question": "Count the number of employees", "query": "SELECT count(*) FROM employee"}
{"db_id": "employee_hire_evaluation", "question": "Sort employee names by their age in ascending order.", "query": "SELECT name FROM employee ORDER BY age"}
{"db_id": "employee_hire_evaluation", "question": "List the names of employees and sort in ascending order of age.", "query": "SELECT name FROM employee ORDER BY age"}
{"db_id": "employee_hire_evaluation", "question": "What is the number of employees from each city?", "query": "SELECT count(*) ,  city FROM employee GROUP BY city"}
{"db_id": "employee_hire_evaluation", "question": "Count the number of employees for each city.", "query": "SELECT count(*) ,  city FROM employee GROUP BY city"}
{"db_id": "employee_hire_evaluation", "question": "Which cities do more than one employee under age 30 come from?", "query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1"}
{"db_id": "employee_hire_evaluation", "question": "Find the cities that have more than one employee under age 30.", "query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1"}
{"db_id": "employee_hire_evaluation", "question": "Find the number of shops in each location.", "query": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION"}
{"db_id": "employee_hire_evaluation", "question": "How many shops are there in each location?", "query": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION"}
{"db_id": "employee_hire_evaluation", "question": "Find the manager name and district of the shop whose number of products is the largest.", "query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}
{"db_id": "employee_hire_evaluation", "question": "What are the manager name and district of the shop that sells the largest number of products?", "query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}
{"db_id": "employee_hire_evaluation", "question": "find the minimum and maximum number of products of all stores.", "query": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}
{"db_id": "employee_hire_evaluation", "question": "What are the minimum and maximum number of products across all the shops?", "query": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}
{"db_id": "employee_hire_evaluation", "question": "Return the name, location and district of all shops in descending order of number of products.", "query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC"}
{"db_id": "employee_hire_evaluation", "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.", "query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC"}
{"db_id": "employee_hire_evaluation", "question": "Find the names of stores whose number products is more than the average number of products.", "query": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)"}
{"db_id": "employee_hire_evaluation", "question": "Which shops' number products is above the average? Give me the shop names.", "query": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)"}
{"db_id": "employee_hire_evaluation", "question": "Find the name of the shops that do not hire any employee.", "query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)"}
{"db_id": "employee_hire_evaluation", "question": "Which shops run with no employees? Find the shop names", "query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)"}
{"db_id": "employee_hire_evaluation", "question": "Find the number of employees hired in each shop; show the shop name as well.", "query": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name"}
{"db_id": "employee_hire_evaluation", "question": "For each shop, return the number of employees working there and the name of the shop.", "query": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name"}
{"db_id": "employee_hire_evaluation", "question": "What is total bonus given in all evaluations?", "query": "SELECT sum(bonus) FROM evaluation"}
{"db_id": "employee_hire_evaluation", "question": "Find the total amount of bonus given in all the evaluations.", "query": "SELECT sum(bonus) FROM evaluation"}
{"db_id": "employee_hire_evaluation", "question": "Give me all the information about hiring.", "query": "SELECT * FROM hiring"}
{"db_id": "employee_hire_evaluation", "question": "What is all the information about hiring?", "query": "SELECT * FROM hiring"}
{"db_id": "employee_hire_evaluation", "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?", "query": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000"}
{"db_id": "employee_hire_evaluation", "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.", "query": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000"}
{"db_id": "employee_hire_evaluation", "question": "How many different store locations are there?", "query": "SELECT count(DISTINCT LOCATION) FROM shop"}
{"db_id": "employee_hire_evaluation", "question": "Count the number of distinct store locations.", "query": "SELECT count(DISTINCT LOCATION) FROM shop"}
{"db_id": "cre_doc_template_mgt", "question": "How many documents do we have?", "query": "SELECT count(*) FROM Documents"}
{"db_id": "cre_doc_template_mgt", "question": "Count the number of documents.", "query": "SELECT count(*) FROM Documents"}
{"db_id": "cre_doc_template_mgt", "question": "List document IDs, document names, and document descriptions for all documents.", "query": "SELECT document_id ,  document_name ,  document_description FROM Documents"}
{"db_id": "cre_doc_template_mgt", "question": "What are the ids, names, and descriptions for all documents?", "query": "SELECT document_id ,  document_name ,  document_description FROM Documents"}
{"db_id": "cre_doc_template_mgt", "question": "How many different templates do all document use?", "query": "SELECT count(DISTINCT template_id) FROM Documents"}
{"db_id": "cre_doc_template_mgt", "question": "Count the number of different templates used for documents.", "query": "SELECT count(DISTINCT template_id) FROM Documents"}
{"db_id": "cre_doc_template_mgt", "question": "How many documents are using the template with type code 'PPT'?", "query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'"}
{"db_id": "cre_doc_template_mgt", "question": "Count the number of documents that use the PPT template type.", "query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'"}
{"db_id": "cre_doc_template_mgt", "question": "Show all template ids and number of documents using each template.", "query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id"}
{"db_id": "cre_doc_template_mgt", "question": "What are all different template ids used for documents, and how many times were each of them used?", "query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id"}
{"db_id": "cre_doc_template_mgt", "question": "Show ids for all templates that are used by more than one document.", "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1"}
{"db_id": "cre_doc_template_mgt", "question": "What are the template ids of any templates used in more than a single document?", "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1"}
{"db_id": "cre_doc_template_mgt", "question": "Show ids for all templates not used by any document.", "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents"}
{"db_id": "cre_doc_template_mgt", "question": "What are the ids for templates that are not used in any documents?", "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents"}
{"db_id": "cre_doc_template_mgt", "question": "How many templates do we have?", "query": "SELECT count(*) FROM Templates"}
{"db_id": "cre_doc_template_mgt", "question": "Count the number of templates.", "query": "SELECT count(*) FROM Templates"}
{"db_id": "cre_doc_template_mgt", "question": "Show template ids, version numbers, and template type codes for all templates.", "query": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}
{"db_id": "cre_doc_template_mgt", "question": "What are the ids, version numbers, and type codes for each template?", "query": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}
{"db_id": "cre_doc_template_mgt", "question": "Show all distinct template type codes for all templates.", "query": "SELECT DISTINCT template_type_code FROM Templates"}
{"db_id": "cre_doc_template_mgt", "question": "What are the different template type codes?", "query": "SELECT DISTINCT template_type_code FROM Templates"}
{"db_id": "cre_doc_template_mgt", "question": "What is the version number and template type code for the template with version number later than 5?", "query": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}
{"db_id": "cre_doc_template_mgt", "question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "query": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}
{"db_id": "cre_doc_template_mgt", "question": "Show all template type codes and number of templates for each.", "query": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code"}
{"db_id": "cre_doc_template_mgt", "question": "What are the different template type codes, and how many templates correspond to each?", "query": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code"}
{"db_id": "cre_doc_template_mgt", "question": "Which template type code has most number of templates?", "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "cre_doc_template_mgt", "question": "Return the type code of the template type that the most templates belong to.", "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "cre_doc_template_mgt", "question": "Show all template type codes with less than three templates.", "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3"}
{"db_id": "cre_doc_template_mgt", "question": "What are the codes of template types that have fewer than 3 templates?", "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3"}
{"db_id": "cre_doc_template_mgt", "question": "Show all template type codes and the number of documents using each type.", "query": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code"}
{"db_id": "cre_doc_template_mgt", "question": "What are the different template type codes, and how many documents use each type?", "query": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code"}
{"db_id": "cre_doc_template_mgt", "question": "Which template type code is used by most number of documents?", "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "cre_doc_template_mgt", "question": "Return the code of the template type that is most commonly used in documents.", "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "cre_doc_template_mgt", "question": "Show all template type codes that are not used by any document.", "query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id"}
{"db_id": "cre_doc_template_mgt", "question": "What are the codes of template types that are not used for any document?", "query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id"}
{"db_id": "cre_doc_template_mgt", "question": "Show all template type codes and descriptions.", "query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}
{"db_id": "cre_doc_template_mgt", "question": "What are the type codes and descriptions for all template types?", "query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}
{"db_id": "cre_doc_template_mgt", "question": "What are the distinct template type descriptions for the templates ever used by any document?", "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}
{"db_id": "cre_doc_template_mgt", "question": "Return the different descriptions for templates that have been used in a document.", "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}
{"db_id": "cre_doc_template_mgt", "question": "How many paragraphs in total?", "query": "SELECT count(*) FROM Paragraphs"}
{"db_id": "cre_doc_template_mgt", "question": "Count the number of paragraphs.", "query": "SELECT count(*) FROM Paragraphs"}
{"db_id": "cre_doc_template_mgt", "question": "How many paragraphs for the document with name 'Summer Show'?", "query": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}
{"db_id": "cre_doc_template_mgt", "question": "Count the number of paragraphs in the document named 'Summer Show'.", "query": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}
{"db_id": "cre_doc_template_mgt", "question": "Show paragraph details for paragraph with text 'Korea ' .", "query": "select other_details from paragraphs where paragraph_text like 'korea'"}
{"db_id": "cre_doc_template_mgt", "question": "What are the details for the paragraph that includes the text 'Korea ' ?", "query": "select other_details from paragraphs where paragraph_text like 'korea'"}
{"db_id": "cre_doc_template_mgt", "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "query": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}
{"db_id": "cre_doc_template_mgt", "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "query": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}
{"db_id": "cre_doc_template_mgt", "question": "Show all document ids and the number of paragraphs in each document. Order by document id.", "query": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id"}
{"db_id": "cre_doc_template_mgt", "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.", "query": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id"}
{"db_id": "cre_doc_template_mgt", "question": "List all document ids with at least two paragraphs.", "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2"}
{"db_id": "cre_doc_template_mgt", "question": "What are the ids of documents that have 2 or more paragraphs?", "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2"}
{"db_id": "cre_doc_template_mgt", "question": "What is the document id with least number of paragraphs?", "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1"}
{"db_id": "cre_doc_template_mgt", "question": "Return the id of the document with the fewest paragraphs.", "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1"}
{"db_id": "cre_doc_template_mgt", "question": "What is the document id with 1 to 2 paragraphs?", "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2"}
{"db_id": "cre_doc_template_mgt", "question": "Give the ids of documents that have between one and two paragraphs.", "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2"}
{"db_id": "cre_doc_template_mgt", "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.", "query": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'"}
{"db_id": "cre_doc_template_mgt", "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?", "query": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'"}
{"db_id": "course_teach", "question": "How many teachers are there?", "query": "SELECT count(*) FROM teacher"}
{"db_id": "course_teach", "question": "What is the total count of teachers?", "query": "SELECT count(*) FROM teacher"}
{"db_id": "course_teach", "question": "List the names of teachers in ascending order of age.", "query": "SELECT Name FROM teacher ORDER BY Age ASC"}
{"db_id": "course_teach", "question": "What are the names of the teachers ordered by ascending age?", "query": "SELECT Name FROM teacher ORDER BY Age ASC"}
{"db_id": "course_teach", "question": "What are the age and hometown of teachers?", "query": "SELECT Age ,  Hometown FROM teacher"}
{"db_id": "course_teach", "question": "What is the age and hometown of every teacher?", "query": "SELECT Age ,  Hometown FROM teacher"}
{"db_id": "course_teach", "question": "What is the hometown of the youngest teacher?", "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}
{"db_id": "course_teach", "question": "Where is the youngest teacher from?", "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}
{"db_id": "course_teach", "question": "Show different hometown of teachers and the number of teachers from each hometown.", "query": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown"}
{"db_id": "course_teach", "question": "For each hometown, how many teachers are there?", "query": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown"}
{"db_id": "course_teach", "question": "List the most common hometown of teachers.", "query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1"}
{"db_id": "course_teach", "question": "What is the most commmon hometowns for teachers?", "query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1"}
{"db_id": "course_teach", "question": "Show the hometowns shared by at least two teachers.", "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2"}
{"db_id": "course_teach", "question": "What are the towns from which at least two teachers come from?", "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2"}
{"db_id": "course_teach", "question": "Show names of teachers and the courses they are arranged to teach.", "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}
{"db_id": "course_teach", "question": "What is the name of each teacher and what course they teach?", "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}
{"db_id": "course_teach", "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.", "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name"}
{"db_id": "course_teach", "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?", "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name"}
{"db_id": "course_teach", "question": "Show names of teachers and the number of courses they teach.", "query": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name"}
{"db_id": "course_teach", "question": "What are the names of the teachers and how many courses do they teach?", "query": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name"}
{"db_id": "course_teach", "question": "Show names of teachers that teach at least two courses.", "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2"}
{"db_id": "course_teach", "question": "What are the names of the teachers who teach at least two courses?", "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2"}
{"db_id": "course_teach", "question": "List the names of teachers who have not been arranged to teach courses.", "query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)"}
{"db_id": "course_teach", "question": "What are the names of the teachers whose courses have not been arranged?", "query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)"}
{"db_id": "museum_visit", "question": "How many visitors below age 30 are there?", "query": "SELECT count(*) FROM visitor WHERE age  <  30"}
{"db_id": "museum_visit", "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.", "query": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC"}
{"db_id": "museum_visit", "question": "What is the average age of the visitors whose membership level is not higher than 4?", "query": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4"}
{"db_id": "museum_visit", "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.", "query": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC"}
{"db_id": "museum_visit", "question": "Find the id and name of the museum that has the most staff members?", "query": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1"}
{"db_id": "museum_visit", "question": "What are the opening year and staff number of the museum named Plaza Museum?", "query": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'"}
{"db_id": "museum_visit", "question": "What is the name of the museum that had no visitor yet?", "query": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)"}
{"db_id": "museum_visit", "question": "What are the average and maximum number of tickets bought in all visits?", "query": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit"}
{"db_id": "wta_1", "question": "Find the total number of players.", "query": "SELECT count(*) FROM players"}
{"db_id": "wta_1", "question": "How many players are there?", "query": "SELECT count(*) FROM players"}
{"db_id": "wta_1", "question": "Find the total number of matches.", "query": "SELECT count(*) FROM matches"}
{"db_id": "wta_1", "question": "Count the number of matches.", "query": "SELECT count(*) FROM matches"}
{"db_id": "wta_1", "question": "List the first name and birth date of all players from the country with code USA.", "query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"}
{"db_id": "wta_1", "question": "What are the first names and birth dates of players from the USA?", "query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"}
{"db_id": "wta_1", "question": "Find the average age of losers and winners of all matches.", "query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"}
{"db_id": "wta_1", "question": "What are the average ages of losers and winners across matches?", "query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"}
{"db_id": "wta_1", "question": "Find the average rank of winners in all matches.", "query": "SELECT avg(winner_rank) FROM matches"}
{"db_id": "wta_1", "question": "What is the average rank for winners in all matches?", "query": "SELECT avg(winner_rank) FROM matches"}
{"db_id": "wta_1", "question": "Find the highest rank of losers in all matches.", "query": "SELECT min(loser_rank) FROM matches"}
{"db_id": "wta_1", "question": "What is the best rank of losers across all matches?", "query": "SELECT min(loser_rank) FROM matches"}
{"db_id": "wta_1", "question": "find the number of distinct country codes of all players.", "query": "SELECT count(DISTINCT country_code) FROM players"}
{"db_id": "wta_1", "question": "How many distinct countries do players come from?", "query": "SELECT count(DISTINCT country_code) FROM players"}
{"db_id": "wta_1", "question": "Find the number of distinct name of losers.", "query": "SELECT count(DISTINCT loser_name) FROM matches"}
{"db_id": "wta_1", "question": "How many different loser names are there?", "query": "SELECT count(DISTINCT loser_name) FROM matches"}
{"db_id": "wta_1", "question": "Find the name of tourney that has more than 10 matches.", "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10"}
{"db_id": "wta_1", "question": "What are the names of tournaments that have more than 10 matches?", "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10"}
{"db_id": "wta_1", "question": "List the names of all winners who played in both 2013 and 2016.", "query": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016"}
{"db_id": "wta_1", "question": "What are the names of players who won in both 2013 and 2016?", "query": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016"}
{"db_id": "wta_1", "question": "List the number of all matches who played in years of 2013 or 2016.", "query": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016"}
{"db_id": "wta_1", "question": "How many matches were played in 2013 or 2016?", "query": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016"}
{"db_id": "wta_1", "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?", "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'"}
{"db_id": "wta_1", "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?", "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'"}
{"db_id": "wta_1", "question": "Find the first name and country code of the oldest player.", "query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"}
{"db_id": "wta_1", "question": "What is the first name and country code of the oldest player?", "query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"}
{"db_id": "wta_1", "question": "List the first and last name of all players in the order of birth date.", "query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date"}
{"db_id": "wta_1", "question": "What are the full names of all players, sorted by birth date?", "query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date"}
{"db_id": "wta_1", "question": "List the first and last name of all players who are left / L hand in the order of birth date.", "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date"}
{"db_id": "wta_1", "question": "What are the full names of all left handed players, in order of birth date?", "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date"}
{"db_id": "wta_1", "question": "Find the first name and country code of the player who did the most number of tours.", "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"}
{"db_id": "wta_1", "question": "What is the first name and country code of the player with the most tours?", "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"}
{"db_id": "wta_1", "question": "Find the year that has the most number of matches.", "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "wta_1", "question": "Which year had the most matches?", "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "wta_1", "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.", "query": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"}
{"db_id": "wta_1", "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?", "query": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"}
{"db_id": "wta_1", "question": "find the names of loser and winner who played in the match with greatest number of minutes.", "query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"}
{"db_id": "wta_1", "question": "What are the names of the winner and loser who played in the longest match?", "query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"}
{"db_id": "wta_1", "question": "Find the average ranking for each player and their first name.", "query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"}
{"db_id": "wta_1", "question": "What are the first names of all players, and their average rankings?", "query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"}
{"db_id": "wta_1", "question": "Find the total ranking points for each player and their first name.", "query": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"}
{"db_id": "wta_1", "question": "What are the first names of all players, and their total ranking points?", "query": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"}
{"db_id": "wta_1", "question": "find the number of players for each country.", "query": "SELECT count(*) ,  country_code FROM players GROUP BY country_code"}
{"db_id": "wta_1", "question": "How many players are from each country?", "query": "SELECT count(*) ,  country_code FROM players GROUP BY country_code"}
{"db_id": "wta_1", "question": "find the code of the country where has the greatest number of players.", "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "wta_1", "question": "What is the code of the country with the most players?", "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "wta_1", "question": "Find the codes of countries that have more than 50 players.", "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50"}
{"db_id": "wta_1", "question": "What are the codes of countries with more than 50 players?", "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50"}
{"db_id": "wta_1", "question": "Find the total number of tours for each ranking date.", "query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date"}
{"db_id": "wta_1", "question": "How many total tours were there for each ranking date?", "query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date"}
{"db_id": "wta_1", "question": "Find the number of matches happened in each year.", "query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR"}
{"db_id": "wta_1", "question": "How many matches were played in each year?", "query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR"}
{"db_id": "wta_1", "question": "How many different winners both participated in the WTA Championships and were left handed?", "query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"}
{"db_id": "wta_1", "question": "Find the number of left handed winners who participated in the WTA Championships.", "query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"}
{"db_id": "wta_1", "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.", "query": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"}
{"db_id": "wta_1", "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?", "query": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"}
{"db_id": "wta_1", "question": "Find the number of players for each hand type.", "query": "SELECT count(*) ,  hand FROM players GROUP BY hand"}
{"db_id": "wta_1", "question": "How many players are there for each hand type?", "query": "SELECT count(*) ,  hand FROM players GROUP BY hand"}
{"db_id": "battle_death", "question": "How many ships ended up being 'Captured'?", "query": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'"}
{"db_id": "battle_death", "question": "List the name and tonnage ordered by in descending alphaetical order for the names.", "query": "SELECT name ,  tonnage FROM ship ORDER BY name DESC"}
{"db_id": "battle_death", "question": "List the name, date and result of each battle.", "query": "SELECT name ,  date FROM battle"}
{"db_id": "battle_death", "question": "What is maximum and minimum death toll caused each time?", "query": "SELECT max(killed) ,  min(killed) FROM death"}
{"db_id": "battle_death", "question": "What is the average number of injuries caused each time?", "query": "SELECT avg(injured) FROM death"}
{"db_id": "battle_death", "question": "What are the death and injury situations caused by the ship with tonnage 't'?", "query": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'"}
{"db_id": "battle_death", "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "query": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'"}
{"db_id": "battle_death", "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "query": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'"}
{"db_id": "battle_death", "question": "What are the ids and names of the battles that led to more than 10 people killed in total.", "query": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10"}
{"db_id": "battle_death", "question": "What is the ship id and name that caused most total injuries?", "query": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "battle_death", "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "query": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'"}
{"db_id": "battle_death", "question": "How many different results are there for the battles?", "query": "SELECT count(DISTINCT RESULT) FROM battle"}
{"db_id": "battle_death", "question": "How many battles did not lose any ship with tonnage '225'?", "query": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );"}
{"db_id": "battle_death", "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'", "query": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'"}
{"db_id": "battle_death", "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.", "query": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'"}
{"db_id": "battle_death", "question": "What are the notes of the death events which has substring 'East'?", "query": "SELECT note FROM death WHERE note LIKE '%East%'"}
{"db_id": "student_transcripts_tracking", "question": "what are all the addresses including line 1 and line 2?", "query": "SELECT line_1 ,  line_2 FROM addresses"}
{"db_id": "student_transcripts_tracking", "question": "What is the first and second line for all addresses?", "query": "SELECT line_1 ,  line_2 FROM addresses"}
{"db_id": "student_transcripts_tracking", "question": "How many courses in total are listed?", "query": "SELECT count(*) FROM Courses"}
{"db_id": "student_transcripts_tracking", "question": "How many courses are there?", "query": "SELECT count(*) FROM Courses"}
{"db_id": "student_transcripts_tracking", "question": "How is the math course described?", "query": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}
{"db_id": "student_transcripts_tracking", "question": "What are the descriptions for all the math courses?", "query": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}
{"db_id": "student_transcripts_tracking", "question": "What is the zip code of the address in the city Port Chelsea?", "query": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}
{"db_id": "student_transcripts_tracking", "question": "What is the zip code for Port Chelsea?", "query": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}
{"db_id": "student_transcripts_tracking", "question": "How many departments offer any degree?", "query": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}
{"db_id": "student_transcripts_tracking", "question": "How many different departments offer degrees?", "query": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}
{"db_id": "student_transcripts_tracking", "question": "How many different degree names are offered?", "query": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}
{"db_id": "student_transcripts_tracking", "question": "How many different degrees are offered?", "query": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}
{"db_id": "student_transcripts_tracking", "question": "How many degrees does the engineering department offer?", "query": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"}
{"db_id": "student_transcripts_tracking", "question": "How many degrees does the engineering department have?", "query": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"}
{"db_id": "student_transcripts_tracking", "question": "What are the names and descriptions of all the sections?", "query": "SELECT section_name ,  section_description FROM Sections"}
{"db_id": "student_transcripts_tracking", "question": "What are the names and descriptions for all the sections?", "query": "SELECT section_name ,  section_description FROM Sections"}
{"db_id": "student_transcripts_tracking", "question": "What are the names and id of courses having at most 2 sections?", "query": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2"}
{"db_id": "student_transcripts_tracking", "question": "What are the names and ids of every course with less than 2 sections?", "query": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2"}
{"db_id": "student_transcripts_tracking", "question": "List the section_name in reversed lexicographical order.", "query": "SELECT section_name FROM Sections ORDER BY section_name DESC"}
{"db_id": "student_transcripts_tracking", "question": "What are the names of the sections in reverse alphabetical order?", "query": "SELECT section_name FROM Sections ORDER BY section_name DESC"}
{"db_id": "student_transcripts_tracking", "question": "What is the semester which most student registered in? Show both the name and the id.", "query": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "student_transcripts_tracking", "question": "For each semester, what is the name and id of the one with the most students registered?", "query": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "student_transcripts_tracking", "question": "What is the description of the department whose name has the substring the computer?", "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}
{"db_id": "student_transcripts_tracking", "question": "What is the department description for the one whose name has the word computer?", "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}
{"db_id": "student_transcripts_tracking", "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.", "query": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2"}
{"db_id": "student_transcripts_tracking", "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?", "query": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2"}
{"db_id": "student_transcripts_tracking", "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}
{"db_id": "student_transcripts_tracking", "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}
{"db_id": "student_transcripts_tracking", "question": "Find the kind of program which most number of students are enrolled in?", "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "student_transcripts_tracking", "question": "What is the degree summary name that has the most number of students enrolled?", "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "student_transcripts_tracking", "question": "Find the program which most number of students are enrolled in. List both the id and the summary.", "query": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "student_transcripts_tracking", "question": "What is the program id and the summary of the degree that has the most students enrolled?", "query": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "student_transcripts_tracking", "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.", "query": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "student_transcripts_tracking", "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?", "query": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "student_transcripts_tracking", "question": "Which semesters do not have any student enrolled? List the semester name.", "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )"}
{"db_id": "student_transcripts_tracking", "question": "What is the name of the semester with no students enrolled?", "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )"}
{"db_id": "student_transcripts_tracking", "question": "What are all the course names of the courses which ever have students enrolled in?", "query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}
{"db_id": "student_transcripts_tracking", "question": "What are the names of all courses that have some students enrolled?", "query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}
{"db_id": "student_transcripts_tracking", "question": "What's the name of the course with most number of enrollments?", "query": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "student_transcripts_tracking", "question": "What is the name of the course with the most students enrolled?", "query": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "student_transcripts_tracking", "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.", "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id"}
{"db_id": "student_transcripts_tracking", "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?", "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id"}
{"db_id": "student_transcripts_tracking", "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "query": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'"}
{"db_id": "student_transcripts_tracking", "question": "What is the mobile phone number of the student named Timmothy Ward ?", "query": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'"}
{"db_id": "student_transcripts_tracking", "question": "Who is the first student to register? List the first name, middle name and last name.", "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}
{"db_id": "student_transcripts_tracking", "question": "What is the first, middle, and last name of the first student to register?", "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}
{"db_id": "student_transcripts_tracking", "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}
{"db_id": "student_transcripts_tracking", "question": "What is the first, middle, and last name of the earliest school graduate?", "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}
{"db_id": "student_transcripts_tracking", "question": "Whose permanent address is different from his or her current address? List his or her first name.", "query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id"}
{"db_id": "student_transcripts_tracking", "question": "What is the first name of the student whose permanent address is different from his or her current one?", "query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id"}
{"db_id": "student_transcripts_tracking", "question": "Which address holds the most number of students currently? List the address id and all lines.", "query": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "student_transcripts_tracking", "question": "What is the id, line 1, and line 2 of the address with the most students?", "query": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "student_transcripts_tracking", "question": "When is the first transcript released? List the date and details.", "query": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}
{"db_id": "student_transcripts_tracking", "question": "What is the earliest date of a transcript release, and what details can you tell me?", "query": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}
{"db_id": "student_transcripts_tracking", "question": "How many transcripts are released?", "query": "SELECT count(*) FROM Transcripts"}
{"db_id": "student_transcripts_tracking", "question": "How many transcripts are listed?", "query": "SELECT count(*) FROM Transcripts"}
{"db_id": "student_transcripts_tracking", "question": "What is the last transcript release date?", "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}
{"db_id": "student_transcripts_tracking", "question": "When was the last transcript released?", "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}
{"db_id": "student_transcripts_tracking", "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.", "query": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "student_transcripts_tracking", "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?", "query": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "student_transcripts_tracking", "question": "Find the semester when both Master students and Bachelor students got enrolled in.", "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'"}
{"db_id": "student_transcripts_tracking", "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?", "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'"}
{"db_id": "student_transcripts_tracking", "question": "How many different addresses do the students currently live?", "query": "SELECT count(DISTINCT current_address_id) FROM Students"}
{"db_id": "student_transcripts_tracking", "question": "What are the different addresses that have students living there?", "query": "SELECT count(DISTINCT current_address_id) FROM Students"}
{"db_id": "student_transcripts_tracking", "question": "List all the student details in reversed lexicographical order.", "query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC"}
{"db_id": "student_transcripts_tracking", "question": "What other details can you tell me about students in reverse alphabetical order?", "query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC"}
{"db_id": "student_transcripts_tracking", "question": "Describe the section h.", "query": "SELECT section_description FROM Sections WHERE section_name  =  'h'"}
{"db_id": "student_transcripts_tracking", "question": "What is the description for the section named h?", "query": "SELECT section_description FROM Sections WHERE section_name  =  'h'"}
{"db_id": "student_transcripts_tracking", "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .", "query": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'"}
{"db_id": "student_transcripts_tracking", "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?", "query": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'"}
{"db_id": "tvshow", "question": "List the title of all cartoons in alphabetical order.", "query": "SELECT Title FROM Cartoon ORDER BY title"}
{"db_id": "tvshow", "question": "What are the titles of the cartoons sorted alphabetically?", "query": "SELECT Title FROM Cartoon ORDER BY title"}
{"db_id": "tvshow", "question": "list all cartoon titles and their directors ordered by their air date", "query": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date"}
{"db_id": "tvshow", "question": "What is the name and directors of all the cartoons that are ordered by air date?", "query": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date"}
{"db_id": "tvshow", "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.", "query": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;"}
{"db_id": "tvshow", "question": "What is the country with the most number of TV Channels and how many does it have?", "query": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;"}
{"db_id": "tvshow", "question": "List the number of different series names and contents in the TV Channel table.", "query": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;"}
{"db_id": "tvshow", "question": "How many different series and contents are listed in the TV Channel table?", "query": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;"}
{"db_id": "tvshow", "question": "List the language used least number of TV Channel. List language and number of TV Channel.", "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;"}
{"db_id": "tvshow", "question": "What are the languages used by the least number of TV Channels and how many channels use it?", "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;"}
{"db_id": "tvshow", "question": "List each language and the number of TV Channels using it.", "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE"}
{"db_id": "tvshow", "question": "For each language, list the number of TV Channels that use it.", "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE"}
{"db_id": "tvshow", "question": "List the Episode of all TV series sorted by rating.", "query": "SELECT Episode FROM TV_series ORDER BY rating"}
{"db_id": "tvshow", "question": "What are all of the episodes ordered by ratings?", "query": "SELECT Episode FROM TV_series ORDER BY rating"}
{"db_id": "tvshow", "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.", "query": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;"}
{"db_id": "tvshow", "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?", "query": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;"}
{"db_id": "tvshow", "question": "What is minimum and maximum share of TV series?", "query": "SELECT max(SHARE) , min(SHARE) FROM TV_series;"}
{"db_id": "tvshow", "question": "What is the maximum and minimum share for the TV series?", "query": "SELECT max(SHARE) , min(SHARE) FROM TV_series;"}
{"db_id": "tvshow", "question": "Find the number of cartoons directed by each of the listed directors.", "query": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by"}
{"db_id": "tvshow", "question": "How many cartoons did each director create?", "query": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by"}
{"db_id": "tvshow", "question": "Find the production code and channel of the most recently aired cartoon .", "query": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}
{"db_id": "tvshow", "question": "What is the produdction code and channel of the most recent cartoon ?", "query": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}
{"db_id": "tvshow", "question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}
{"db_id": "tvshow", "question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}
{"db_id": "tvshow", "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?", "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}
{"db_id": "tvshow", "question": "What are the countries that are not playing cartoons written by Todd Casey?", "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}
{"db_id": "tvshow", "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?", "query": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'"}
{"db_id": "tvshow", "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?", "query": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'"}
{"db_id": "tvshow", "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "query": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}
{"db_id": "tvshow", "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "query": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}
{"db_id": "tvshow", "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.", "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'"}
{"db_id": "tvshow", "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?", "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'"}
{"db_id": "tvshow", "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.", "query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')"}
{"db_id": "tvshow", "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?", "query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')"}
{"db_id": "poker_player", "question": "How many poker players are there?", "query": "SELECT count(*) FROM poker_player"}
{"db_id": "poker_player", "question": "Count the number of poker players.", "query": "SELECT count(*) FROM poker_player"}
{"db_id": "poker_player", "question": "List the earnings of poker players in descending order.", "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC"}
{"db_id": "poker_player", "question": "What are the earnings of poker players, ordered descending by value?", "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC"}
{"db_id": "poker_player", "question": "List the final tables made and the best finishes of poker players.", "query": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}
{"db_id": "poker_player", "question": "What are the final tables made and best finishes for all poker players?", "query": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}
{"db_id": "poker_player", "question": "What is the average earnings of poker players?", "query": "SELECT avg(Earnings) FROM poker_player"}
{"db_id": "poker_player", "question": "Return the average earnings across all poker players.", "query": "SELECT avg(Earnings) FROM poker_player"}
{"db_id": "poker_player", "question": "What is the money rank of the poker player with the highest earnings?", "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}
{"db_id": "poker_player", "question": "Return the money rank of the player with the greatest earnings.", "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}
{"db_id": "poker_player", "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}
{"db_id": "poker_player", "question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}
{"db_id": "poker_player", "question": "What are the names of poker players?", "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}
{"db_id": "poker_player", "question": "Return the names of all the poker players.", "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}
{"db_id": "poker_player", "question": "What are the names of poker players whose earnings is higher than 300000?", "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}
{"db_id": "poker_player", "question": "Give the names of poker players who have earnings above 300000.", "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}
{"db_id": "poker_player", "question": "List the names of poker players ordered by the final tables made in ascending order.", "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made"}
{"db_id": "poker_player", "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?", "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made"}
{"db_id": "poker_player", "question": "What is the birth date of the poker player with the lowest earnings?", "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}
{"db_id": "poker_player", "question": "Return the birth date of the poker player with the lowest earnings.", "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}
{"db_id": "poker_player", "question": "What is the money rank of the tallest poker player?", "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}
{"db_id": "poker_player", "question": "Return the money rank of the poker player with the greatest height.", "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}
{"db_id": "poker_player", "question": "What is the average earnings of poker players with height higher than 200?", "query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}
{"db_id": "poker_player", "question": "Give average earnings of poker players who are taller than 200.", "query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}
{"db_id": "poker_player", "question": "What are the names of poker players in descending order of earnings?", "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC"}
{"db_id": "poker_player", "question": "Return the names of poker players sorted by their earnings descending.", "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC"}
{"db_id": "poker_player", "question": "What are different nationalities of people and the corresponding number of people from each nation?", "query": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality"}
{"db_id": "poker_player", "question": "How many people are there of each nationality?", "query": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality"}
{"db_id": "poker_player", "question": "What is the most common nationality of people?", "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"}
{"db_id": "poker_player", "question": "Give the nationality that is most common across all people.", "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"}
{"db_id": "poker_player", "question": "What are the nationalities that are shared by at least two people?", "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2"}
{"db_id": "poker_player", "question": "Return the nationalities for which there are two or more people.", "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2"}
{"db_id": "poker_player", "question": "List the names and birth dates of people in ascending alphabetical order of name.", "query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC"}
{"db_id": "poker_player", "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?", "query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC"}
{"db_id": "poker_player", "question": "List the names of people that are not poker players.", "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)"}
{"db_id": "poker_player", "question": "What are the names of people who do not play poker?", "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)"}
{"db_id": "poker_player", "question": "How many distinct nationalities are there?", "query": "SELECT count(DISTINCT Nationality) FROM people"}
{"db_id": "poker_player", "question": "Count the number of different nationalities.", "query": "SELECT count(DISTINCT Nationality) FROM people"}
{"db_id": "voter_1", "question": "How many states are there?", "query": "SELECT count(*) FROM area_code_state"}
{"db_id": "voter_1", "question": "List the contestant numbers and names, ordered by contestant name descending.", "query": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC"}
{"db_id": "voter_1", "question": "List the vote ids, phone numbers and states of all votes.", "query": "SELECT vote_id ,  phone_number ,  state FROM votes"}
{"db_id": "voter_1", "question": "What are the maximum and minimum values of area codes?", "query": "SELECT max(area_code) ,  min(area_code) FROM area_code_state"}
{"db_id": "voter_1", "question": "What is last date created of votes from the state 'CA'?", "query": "SELECT max(created) FROM votes WHERE state  =  'CA'"}
{"db_id": "voter_1", "question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "query": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'"}
{"db_id": "voter_1", "question": "What are the distinct states and create time of all votes?", "query": "SELECT DISTINCT state ,  created FROM votes"}
{"db_id": "voter_1", "question": "What are the contestant numbers and names of the contestants who had at least two votes?", "query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2"}
{"db_id": "voter_1", "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?", "query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1"}
{"db_id": "voter_1", "question": "What are the number of votes from state 'NY' or 'CA'?", "query": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'"}
{"db_id": "voter_1", "question": "How many contestants did not get voted?", "query": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )"}
{"db_id": "voter_1", "question": "What is the area code in which the most voters voted?", "query": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "voter_1", "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "query": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'"}
{"db_id": "voter_1", "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.", "query": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'"}
{"db_id": "world_1", "question": "What are the names of all the countries that became independent after 1950?", "query": "SELECT Name FROM country WHERE IndepYear  >  1950"}
{"db_id": "world_1", "question": "Give the names of the nations that were founded after 1950.", "query": "SELECT Name FROM country WHERE IndepYear  >  1950"}
{"db_id": "world_1", "question": "How many unique languages are spoken in the world?", "query": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}
{"db_id": "world_1", "question": "What is the number of distinct languages used around the world?", "query": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}
{"db_id": "world_1", "question": "What is name of the country that speaks the largest number of languages?", "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1"}
{"db_id": "world_1", "question": "Give the name of the nation that uses the greatest amount of languages.", "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1"}
{"db_id": "world_1", "question": "Which continent has the most diverse languages?", "query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1"}
{"db_id": "world_1", "question": "Which continent speaks the most languages?", "query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1"}
{"db_id": "world_1", "question": "Which cities are in European countries where English is not the official language?", "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')"}
{"db_id": "world_1", "question": "What are the names of cities in Europe for which English is not the official language?", "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')"}
{"db_id": "world_1", "question": "What are the name, independence year, and surface area of the country with the smallest population?", "query": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}
{"db_id": "world_1", "question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "query": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}
{"db_id": "world_1", "question": "What are the population, name and leader of the country with the largest area?", "query": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}
{"db_id": "world_1", "question": "Give the name, population, and head of state for the country that has the largest area.", "query": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}
{"db_id": "world_1", "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.", "query": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2"}
{"db_id": "world_1", "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?", "query": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2"}
{"db_id": "world_1", "question": "Find the number of cities in each district whose population is greater than the average population of cities?", "query": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District"}
{"db_id": "world_1", "question": "How many cities in each district have a population that is above the average population across all cities?", "query": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District"}
{"db_id": "world_1", "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.", "query": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72"}
{"db_id": "world_1", "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?", "query": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72"}
{"db_id": "world_1", "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?", "query": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72"}
{"db_id": "world_1", "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?", "query": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72"}
{"db_id": "world_1", "question": "What are the names and areas of countries with the top 5 largest area?", "query": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5"}
{"db_id": "world_1", "question": "Return the names and surface areas of the 5 largest countries.", "query": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5"}
{"db_id": "world_1", "question": "What are names of countries with the top 3 largest population?", "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3"}
{"db_id": "world_1", "question": "Return the names of the 3 most populated countries.", "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3"}
{"db_id": "world_1", "question": "What are the names of the nations with the 3 lowest populations?", "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3"}
{"db_id": "world_1", "question": "Return the names of the 3 countries with the fewest people.", "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3"}
{"db_id": "world_1", "question": "What are the cities whose population is between 160000 and 900000?", "query": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000"}
{"db_id": "world_1", "question": "Return the names of cities that have a population between 160000 and 900000 .", "query": "select name from city where population between 160000 and 900000"}
{"db_id": "world_1", "question": "Which language is spoken by the largest number of countries?", "query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "world_1", "question": "Give the language that is spoken in the most countries.", "query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "orchestra", "question": "How many conductors are there?", "query": "SELECT count(*) FROM conductor"}
{"db_id": "orchestra", "question": "Count the number of conductors.", "query": "SELECT count(*) FROM conductor"}
{"db_id": "orchestra", "question": "List the names of conductors in ascending order of age.", "query": "SELECT Name FROM conductor ORDER BY Age ASC"}
{"db_id": "orchestra", "question": "What are the names of conductors, ordered by age?", "query": "SELECT Name FROM conductor ORDER BY Age ASC"}
{"db_id": "orchestra", "question": "What are the names of conductors whose nationalities are not \"USA\"?", "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}
{"db_id": "orchestra", "question": "Return the names of conductors that do not have the nationality \"USA\".", "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}
{"db_id": "orchestra", "question": "What are the record companies of orchestras in descending order of years in which they were founded?", "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC"}
{"db_id": "orchestra", "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.", "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC"}
{"db_id": "orchestra", "question": "What is the average attendance of shows?", "query": "SELECT avg(Attendance) FROM SHOW"}
{"db_id": "orchestra", "question": "Return the average attendance across all shows.", "query": "SELECT avg(Attendance) FROM SHOW"}
{"db_id": "orchestra", "question": "How many different nationalities do conductors have?", "query": "SELECT count(DISTINCT Nationality) FROM conductor"}
{"db_id": "orchestra", "question": "Count the number of different nationalities of conductors.", "query": "SELECT count(DISTINCT Nationality) FROM conductor"}
{"db_id": "orchestra", "question": "List names of conductors in descending order of years of work.", "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC"}
{"db_id": "orchestra", "question": "What are the names of conductors, sorted descending by the number of years they have worked?", "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC"}
{"db_id": "orchestra", "question": "List the name of the conductor with the most years of work.", "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}
{"db_id": "orchestra", "question": "What is the name of the conductor who has worked the greatest number of years?", "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}
{"db_id": "orchestra", "question": "Show the names of conductors and the orchestras they have conducted.", "query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}
{"db_id": "orchestra", "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}
{"db_id": "orchestra", "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}
{"db_id": "orchestra", "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}
{"db_id": "orchestra", "question": "Please show the different record companies and the corresponding number of orchestras.", "query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company"}
{"db_id": "orchestra", "question": "How many orchestras does each record company manage?", "query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company"}
{"db_id": "orchestra", "question": "Please show the record formats of orchestras in ascending order of count.", "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC"}
{"db_id": "orchestra", "question": "What are the major record formats of orchestras, sorted by their frequency?", "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC"}
{"db_id": "orchestra", "question": "List the record company shared by the most number of orchestras.", "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1"}
{"db_id": "orchestra", "question": "What is the record company used by the greatest number of orchestras?", "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1"}
{"db_id": "orchestra", "question": "List the names of orchestras that have no performance.", "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)"}
{"db_id": "orchestra", "question": "What are the orchestras that do not have any performances?", "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)"}
{"db_id": "orchestra", "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.", "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003"}
{"db_id": "orchestra", "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?", "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003"}
{"db_id": "network_1", "question": "How many high schoolers are there?", "query": "SELECT count(*) FROM Highschooler"}
{"db_id": "network_1", "question": "Count the number of high schoolers.", "query": "SELECT count(*) FROM Highschooler"}
{"db_id": "network_1", "question": "Show the names and grades of each high schooler.", "query": "SELECT name ,  grade FROM Highschooler"}
{"db_id": "network_1", "question": "What are the names and grades for each high schooler?", "query": "SELECT name ,  grade FROM Highschooler"}
{"db_id": "network_1", "question": "Show all the grades of the high schoolers.", "query": "SELECT grade FROM Highschooler"}
{"db_id": "network_1", "question": "What is the grade of each high schooler?", "query": "SELECT grade FROM Highschooler"}
{"db_id": "network_1", "question": "Show the names of all high schoolers in grade 10.", "query": "SELECT name FROM Highschooler WHERE grade  =  10"}
{"db_id": "network_1", "question": "What are the names of all high schoolers in grade 10?", "query": "SELECT name FROM Highschooler WHERE grade  =  10"}
{"db_id": "network_1", "question": "How many high schoolers are there in grade 9 or 10?", "query": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10"}
{"db_id": "network_1", "question": "Count the number of high schoolers in grades 9 or 10.", "query": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10"}
{"db_id": "network_1", "question": "Show the number of high schoolers for each grade.", "query": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade"}
{"db_id": "network_1", "question": "How many high schoolers are in each grade?", "query": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade"}
{"db_id": "network_1", "question": "Which grade has the most high schoolers?", "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "network_1", "question": "Return the grade that has the greatest number of high schoolers.", "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "network_1", "question": "Show me all grades that have at least 4 students.", "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4"}
{"db_id": "network_1", "question": "Which grades have 4 or more high schoolers?", "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4"}
{"db_id": "network_1", "question": "Show the student IDs and numbers of friends corresponding to each.", "query": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id"}
{"db_id": "network_1", "question": "How many friends does each student have?", "query": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id"}
{"db_id": "network_1", "question": "Show ids of all students who do not have any friends.", "query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend"}
{"db_id": "network_1", "question": "What are the ids of high school students who do not have friends?", "query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend"}
{"db_id": "network_1", "question": "Show names of all high school students who do not have any friends.", "query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id"}
{"db_id": "network_1", "question": "What are the names of students who have no friends?", "query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id"}
{"db_id": "network_1", "question": "Show the ids of high schoolers who have friends and are also liked by someone else.", "query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes"}
{"db_id": "network_1", "question": "What are the ids of students who both have friends and are liked?", "query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes"}
{"db_id": "network_1", "question": "Show name of all students who have some friends and also are liked by someone else.", "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id"}
{"db_id": "network_1", "question": "What are the names of high schoolers who both have friends and are liked?", "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id"}
{"db_id": "network_1", "question": "Count the number of likes for each student id.", "query": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id"}
{"db_id": "network_1", "question": "How many likes correspond to each student id?", "query": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id"}
{"db_id": "network_1", "question": "Find the average grade of all students who have some friends.", "query": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)"}
{"db_id": "network_1", "question": "What is the average grade of students who have friends?", "query": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)"}
{"db_id": "network_1", "question": "Find the minimum grade of students who have no friends.", "query": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)"}
{"db_id": "network_1", "question": "What is the lowest grade of students who do not have any friends?", "query": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)"}
{"db_id": "dog_kennels", "question": "Which states have both owners and professionals living there?", "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals"}
{"db_id": "dog_kennels", "question": "Find the states where both owners and professionals live.", "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals"}
{"db_id": "dog_kennels", "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.", "query": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2"}
{"db_id": "dog_kennels", "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.", "query": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2"}
{"db_id": "dog_kennels", "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .", "query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )"}
{"db_id": "dog_kennels", "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?", "query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )"}
{"db_id": "dog_kennels", "question": "Which first names are used for professionals or owners but are not used as dog names?", "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs"}
{"db_id": "dog_kennels", "question": "Find the first names that are used for professionals or owners but are not used as dog names.", "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs"}
{"db_id": "dog_kennels", "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.", "query": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id"}
{"db_id": "dog_kennels", "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.", "query": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id"}
{"db_id": "dog_kennels", "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.", "query": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"}
{"db_id": "dog_kennels", "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?", "query": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"}
{"db_id": "dog_kennels", "question": "What is the name of the breed with the most dogs?", "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "dog_kennels", "question": "Which breed do the most dogs have? Give me the breed name.", "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "dog_kennels", "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.", "query": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "dog_kennels", "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.", "query": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "dog_kennels", "question": "What is the description of the treatment type that costs the least money in total?", "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1"}
{"db_id": "dog_kennels", "question": "Give me the description of the treatment type whose total cost is the lowest.", "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1"}
{"db_id": "dog_kennels", "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.", "query": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1"}
{"db_id": "dog_kennels", "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.", "query": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1"}
{"db_id": "dog_kennels", "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.", "query": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"}
{"db_id": "dog_kennels", "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.", "query": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"}
{"db_id": "dog_kennels", "question": "List the date of each treatment, together with the first name of the professional who operated it.", "query": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}
{"db_id": "dog_kennels", "question": "What are the date and the operating professional's first name of each treatment?", "query": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}
{"db_id": "dog_kennels", "question": "List the cost of each treatment and the corresponding treatment type description.", "query": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code"}
{"db_id": "dog_kennels", "question": "What are the cost and treatment type description of each treatment?", "query": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code"}
{"db_id": "dog_kennels", "question": "List each owner's first name, last name, and the size of his for her dog.", "query": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}
{"db_id": "dog_kennels", "question": "What are each owner's first name, last name, and the size of their dog?", "query": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}
{"db_id": "dog_kennels", "question": "List pairs of the owner's first name and the dogs's name.", "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}
{"db_id": "dog_kennels", "question": "What are each owner's first name and their dogs's name?", "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}
{"db_id": "dog_kennels", "question": "List the names of the dogs of the rarest breed and the treatment dates of them.", "query": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )"}
{"db_id": "dog_kennels", "question": "Which dogs are of the rarest breed? Show their names and treatment dates.", "query": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )"}
{"db_id": "dog_kennels", "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}
{"db_id": "dog_kennels", "question": "Find the first names of owners living in Virginia and the names of dogs they own.", "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}
{"db_id": "dog_kennels", "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}
{"db_id": "dog_kennels", "question": "Find the arriving date and the departing date of the dogs that received a treatment.", "query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}
{"db_id": "dog_kennels", "question": "List the last name of the owner owning the youngest dog.", "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )"}
{"db_id": "dog_kennels", "question": "Who owns the youngest dog? Give me his or her last name.", "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )"}
{"db_id": "dog_kennels", "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.", "query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'"}
{"db_id": "dog_kennels", "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?", "query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'"}
{"db_id": "dog_kennels", "question": "What are the arriving date and the departing date of all the dogs?", "query": "SELECT date_arrived ,  date_departed FROM Dogs"}
{"db_id": "dog_kennels", "question": "List the arrival date and the departure date for all the dogs.", "query": "SELECT date_arrived ,  date_departed FROM Dogs"}
{"db_id": "dog_kennels", "question": "How many dogs went through any treatments?", "query": "SELECT count(DISTINCT dog_id) FROM Treatments"}
{"db_id": "dog_kennels", "question": "Count the number of dogs that went through a treatment.", "query": "SELECT count(DISTINCT dog_id) FROM Treatments"}
{"db_id": "dog_kennels", "question": "How many professionals have performed any treatment to dogs?", "query": "SELECT count(DISTINCT professional_id) FROM Treatments"}
{"db_id": "dog_kennels", "question": "Find the number of professionals who have ever treated dogs.", "query": "SELECT count(DISTINCT professional_id) FROM Treatments"}
{"db_id": "dog_kennels", "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "query": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}
{"db_id": "dog_kennels", "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "query": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}
{"db_id": "dog_kennels", "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "query": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}
{"db_id": "dog_kennels", "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "query": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}
{"db_id": "dog_kennels", "question": "How much does the most recent treatment cost?", "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}
{"db_id": "dog_kennels", "question": "Show me the cost of the most recently performed treatment.", "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}
{"db_id": "dog_kennels", "question": "How many dogs have not gone through any treatment?", "query": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )"}
{"db_id": "dog_kennels", "question": "Tell me the number of dogs that have not received any treatment .", "query": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )"}
{"db_id": "dog_kennels", "question": "How many owners temporarily do not have any dogs?", "query": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )"}
{"db_id": "dog_kennels", "question": "Find the number of owners who do not own any dogs at this moment.", "query": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )"}
{"db_id": "dog_kennels", "question": "How many professionals did not operate any treatment on dogs?", "query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )"}
{"db_id": "dog_kennels", "question": "Find the number of professionals who have not treated any dogs.", "query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )"}
{"db_id": "dog_kennels", "question": "What is the age of the oldest dog?", "query": "SELECT max(age) FROM Dogs"}
{"db_id": "dog_kennels", "question": "Tell me the age of the oldest dog.", "query": "SELECT max(age) FROM Dogs"}
{"db_id": "dog_kennels", "question": "How much does each charge type costs? List both charge type and amount.", "query": "SELECT charge_type ,  charge_amount FROM Charges"}
{"db_id": "dog_kennels", "question": "List each charge type and its amount.", "query": "SELECT charge_type ,  charge_amount FROM Charges"}
{"db_id": "dog_kennels", "question": "How much does the most expensive charge type costs?", "query": "SELECT max(charge_amount) FROM Charges"}
{"db_id": "dog_kennels", "question": "What is the charge amount of the most expensive charge type?", "query": "SELECT max(charge_amount) FROM Charges"}
{"db_id": "dog_kennels", "question": "List the email, cell phone and home phone of all the professionals.", "query": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}
{"db_id": "dog_kennels", "question": "What are the email, cell phone and home phone of each professional?", "query": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}
{"db_id": "dog_kennels", "question": "What are all the possible breed type and size type combinations?", "query": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}
{"db_id": "dog_kennels", "question": "Find the distinct breed type and size type combinations for dogs.", "query": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}
{"db_id": "dog_kennels", "question": "List the first name of all the professionals along with the description of the treatment they have done.", "query": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code"}
{"db_id": "dog_kennels", "question": "What are each professional's first name and description of the treatment they have performed?", "query": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code"}
{"db_id": "singer", "question": "How many singers are there?", "query": "SELECT count(*) FROM singer"}
{"db_id": "singer", "question": "What is the count of singers?", "query": "SELECT count(*) FROM singer"}
{"db_id": "singer", "question": "List the name of singers in ascending order of net worth.", "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC"}
{"db_id": "singer", "question": "What are the names of singers ordered by ascending net worth?", "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC"}
{"db_id": "singer", "question": "What are the birth year and citizenship of singers?", "query": "SELECT Birth_Year ,  Citizenship FROM singer"}
{"db_id": "singer", "question": "What are the birth years and citizenships of the singers?", "query": "SELECT Birth_Year ,  Citizenship FROM singer"}
{"db_id": "singer", "question": "Show the name of singers whose birth year is either 1948 or 1949?", "query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949"}
{"db_id": "singer", "question": "What are the names of the singers whose birth years are either 1948 or 1949?", "query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949"}
{"db_id": "singer", "question": "What is the name of the singer with the largest net worth?", "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}
{"db_id": "singer", "question": "What is the name of the singer who is worth the most?", "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}
{"db_id": "singer", "question": "Show different citizenship of singers and the number of singers of each citizenship.", "query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship"}
{"db_id": "singer", "question": "For each citizenship, how many singers are from that country?", "query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship"}
{"db_id": "singer", "question": "Please show the most common citizenship of singers.", "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1"}
{"db_id": "singer", "question": "What is the most common singer citizenship ?", "query": "select citizenship from singer group by citizenship order by count(*) desc limit 1"}
{"db_id": "singer", "question": "Show different citizenships and the maximum net worth of singers of each citizenship.", "query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship"}
{"db_id": "singer", "question": "For each citizenship, what is the maximum net worth?", "query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship"}
{"db_id": "singer", "question": "Show titles of songs and names of singers.", "query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}
{"db_id": "singer", "question": "What are the song titles and singer names?", "query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}
{"db_id": "singer", "question": "Show distinct names of singers that have songs with sales more than 300000.", "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}
{"db_id": "singer", "question": "what are the different names of the singers that have sales more than 300000?", "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}
{"db_id": "singer", "question": "Show the names of singers that have more than one song.", "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1"}
{"db_id": "singer", "question": "What are the names of the singers that have more than one songs?", "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1"}
{"db_id": "singer", "question": "Show the names of singers and the total sales of their songs.", "query": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name"}
{"db_id": "singer", "question": "For each singer name, what is the total sales for their songs?", "query": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name"}
{"db_id": "singer", "question": "List the name of singers that do not have any song.", "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)"}
{"db_id": "singer", "question": "What is the sname of every sing that does not have any song?", "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)"}
{"db_id": "singer", "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.", "query": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955"}
{"db_id": "singer", "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?", "query": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955"}
{"db_id": "real_estate_properties", "question": "How many available features are there in total?", "query": "SELECT count(*) FROM Other_Available_Features"}
