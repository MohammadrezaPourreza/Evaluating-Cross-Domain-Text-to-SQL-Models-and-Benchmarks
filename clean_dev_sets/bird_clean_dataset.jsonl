{"db_id": "california_schools", "question": "How many schools with an average score in Math under 400 in the SAT test are exclusively virtual?", "query": "SELECT COUNT(DISTINCT T2.School) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' AND T1.AvgScrMath < 400"}
{"db_id": "california_schools", "question": "Among the schools with the SAT test takers of over 500, please list the schools that are magnet schools or offer a magnet program.", "query": "SELECT T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Magnet = 1 AND T1.NumTstTakr > 500"}
{"db_id": "california_schools", "question": "What is the phone number of the school that has the highest number of test takers with an SAT score of over 1500?", "query": "SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1"}
{"db_id": "california_schools", "question": "Please list the phone numbers of the schools with the top 3 SAT excellence rate.", "query": "SELECT T1.Phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr DESC LIMIT 3"}
{"db_id": "california_schools", "question": "Which active district has the highest average score in Reading?", "query": "SELECT T1.District FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Active' ORDER BY T2.AvgScrRead DESC LIMIT 1"}
{"db_id": "california_schools", "question": "How many schools in merged Alameda have number of test takers less than 100?", "query": "SELECT COUNT(T1.CDSCode) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Merged' AND T2.NumTstTakr < 100 AND T1.County = 'Alameda'"}
{"db_id": "california_schools", "question": "What is the charter number of the school that the average score in Writing is 499?", "query": "SELECT T1.CharterNum FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrWrite = 499"}
{"db_id": "california_schools", "question": "What is the phone number of the school that has the highest average score in Math?", "query": "SELECT T1.Phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.AvgScrMath DESC LIMIT 1"}
{"db_id": "california_schools", "question": "Which school in Contra Costa has the highest number of test takers?", "query": "SELECT sname FROM satscores WHERE cname = 'Contra Costa' AND sname IS NOT NULL ORDER BY NumTstTakr DESC LIMIT 1"}
{"db_id": "california_schools", "question": "Under whose administration does the school with the highest number of test takers whose total SAT Scores are greater or equal to 1500 belong to? Indicate his or her full name.", "query": "SELECT T2.AdmFName1, T2.AdmLName1, T2.AdmFName2, T2.AdmLName2, T2.AdmFName3, T2.AdmLName3 FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1"}
{"db_id": "california_schools", "question": "What is the complete address of the school with the lowest excellence rate? Indicate the Street, City, Zip and State.", "query": "SELECT T2.Street, T2.City, T2.Zip, T2.State FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY CAST(T1.NumGE1500 AS REAL) / T1.NumTstTakr ASC LIMIT 1"}
{"db_id": "california_schools", "question": "What are the webpages for the Los Angeles County school that has between 2,000 and 3,000 test takers?", "query": "SELECT T2.Website FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.NumTstTakr BETWEEN 2000 AND 3000 AND T2.County = 'Los Angeles'"}
{"db_id": "california_schools", "question": "Which exclusively virtual schools have the top 5 highest average reading scores?", "query": "SELECT T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' ORDER BY T1.AvgScrRead DESC LIMIT 5"}
{"db_id": "california_schools", "question": "What is the type of education offered in the school who scored the highest average in Math?", "query": "SELECT T2.EdOpsName FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 1"}
{"db_id": "california_schools", "question": "What is the average math score of the school with the lowest average score for all subjects, and in which county is it located?", "query": "SELECT T1.AvgScrMath, T2.County FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath IS NOT NULL ORDER BY T1.AvgScrMath + T1.AvgScrRead + T1.AvgScrWrite ASC LIMIT 1"}
{"db_id": "california_schools", "question": "What is the average writing score of the school who has the highest number of test takers whose total SAT sscores are greater or equal to 1500? Indicate the city to where the school is situated.", "query": "SELECT T1.AvgScrWrite, T2.City FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1"}
{"db_id": "california_schools", "question": "What is the average reading score of each of the schools managed by Ricci Ulrich? List the schools and the corresponding average writing scores.", "query": "SELECT T2.School, T1.AvgScrWrite FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.AdmFName1 = 'Ricci' AND T2.AdmLName1 = 'Ulrich'"}
{"db_id": "california_schools", "question": "Which different county has the most number of closed schools?\nPlease provide the name of each school as well as the closure date.", "query": "SELECT DISTINCT County, School, ClosedDate FROM schools WHERE County = ( SELECT County FROM schools WHERE StatusType = 'Closed' GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1 ) AND StatusType = 'Closed' AND school IS NOT NULL"}
{"db_id": "california_schools", "question": "In which mailing street address can you find the school that has the lowest average score in reading? Also give the school's name.", "query": "SELECT T2.MailStreet, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrRead IS NOT NULL ORDER BY T1.AvgScrRead ASC LIMIT 1"}
{"db_id": "california_schools", "question": "What is the total number of schools whose total SAT scores are greater or equal to 1500 whose mailing city is Lafayette?", "query": "SELECT COUNT(T1.cds) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Lafayette'"}
{"db_id": "california_schools", "question": "How many test takers are there at the school/s whose mailing city address is in Fresno?", "query": "SELECT T1.NumTstTakr FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Fresno'"}
{"db_id": "california_schools", "question": "Please specify all of the schools and their related mailing zip codes that are under Avetik Atoian's administration.", "query": "SELECT School, MailZip FROM schools WHERE AdmFName1 = 'Avetik' AND AdmLName1 = 'Atoian'"}
{"db_id": "california_schools", "question": "Of the schools with a mailing state address in California, what is the ratio of the schools located in the county of Colusa against the school located in the county of Humboldt?", "query": "SELECT CAST(SUM(CASE WHEN County = 'Colusa' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN County = 'Humboldt' THEN 1 ELSE 0 END) FROM schools WHERE MailState = 'CA'"}
{"db_id": "california_schools", "question": "Of all the schools with a mailing state address in California, how many are active in San Joaquin?", "query": "SELECT COUNT(CDSCode) FROM schools WHERE City = 'San Joaquin' AND State = 'CA' AND StatusType = 'Active'"}
{"db_id": "california_schools", "question": "What is the phone number and extension number for the school with the zip code 95203-3704? Indicate the school's name.", "query": "SELECT Phone, Ext, School FROM schools WHERE Zip = '95203-3704'"}
{"db_id": "california_schools", "question": "What is the website for the schools under the administrations of Mike Larson and Dante Alvarez?", "query": "SELECT Website FROM schools WHERE (AdmFName1 = 'Mike' AND AdmLName1 = 'Larson') OR (AdmFName1 = 'Dante' AND AdmLName1 = 'Alvarez')"}
{"db_id": "california_schools", "question": "What are the websites for all the partially virtual chartered schools located in San Joaquin?", "query": "SELECT Website FROM schools WHERE County = 'San Joaquin' AND Virtual = 'P' AND Charter = 1"}
{"db_id": "california_schools", "question": "In chartered schools with charter number 00D2, what are the names of all the administrators? Include the name of the school and the city to which it belongs", "query": "SELECT AdmFName1, AdmLName1, School, City FROM schools WHERE Charter = 1 AND CharterNum = '00D2'"}
{"db_id": "california_schools", "question": "What is the total number of schools with a mailing city in Handford belonging to the charter number 00D4?", "query": "SELECT COUNT(*) FROM schools WHERE CharterNum = '00D4' AND City = 'Hanford'"}
{"db_id": "california_schools", "question": "What is the ratio in percentage of Santa Clara County schools that are locally funded compared to all other types of charter school funding?", "query": "SELECT CAST(SUM(CASE WHEN FundingType = 'Locally funded' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN FundingType != 'Locally funded' THEN 1 ELSE 0 END) FROM schools WHERE County = 'Santa Clara' AND Charter = 1"}
{"db_id": "california_schools", "question": "How many active and closed District Community Day Schools are there in the county of Alpine?", "query": "SELECT COUNT(School) FROM schools WHERE StatusType = 'Closed' OR StatusType = 'Active' AND County = 'Alpine'"}
{"db_id": "california_schools", "question": "What is the most common type of grade span served in the city of Adelanto?", "query": "SELECT GSserved FROM schools WHERE City = 'Adelanto' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1"}
{"db_id": "california_schools", "question": "Between San Diego and Santa Barbara, which county offers the most number of schools that does not offer physical building? Indicate the amount.", "query": "SELECT County, COUNT(Virtual) FROM schools WHERE County = 'San Diego' OR County = 'Santa Barbara' AND Virtual = 'F' GROUP BY County ORDER BY COUNT(Virtual) DESC LIMIT 1"}
{"db_id": "california_schools", "question": "What is the grade span offered in the school with the highest longitude?", "query": "SELECT GSoffered FROM schools ORDER BY ABS(longitude) DESC LIMIT 1"}
{"db_id": "california_schools", "question": "What are the two most common first names among the school administrators? Indicate the district to which they administer.", "query": "SELECT DISTINCT T1.AdmFName1, T1.District FROM schools AS T1 INNER JOIN ( SELECT admfname1 FROM schools GROUP BY admfname1 ORDER BY COUNT(admfname1) DESC LIMIT 2 ) AS T2 ON T1.AdmFName1 = T2.admfname1"}
{"db_id": "california_schools", "question": "What is the administrator's last name that oversees the school with Charter number 40? Indicate the district, the county where the school is situated, and the name of the school.", "query": "SELECT AdmLName1, District, County, School FROM schools WHERE CharterNum = '0040'"}
{"db_id": "california_schools", "question": "What is the administrator's email address for the school with the highest number of test takers who received SAT scores of at least 1500?Provide the name of the school.", "query": "SELECT T2.AdmEmail1, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1"}
{"db_id": "financial", "question": "How many accounts who choose issuance after transaction are staying in East Bohemia region?", "query": "SELECT COUNT(T1.district_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 = 'East Bohemia' AND T2.frequency = 'POPLATEK PO OBRATU'"}
{"db_id": "financial", "question": "How many accounts who have region in Prague are eligible for loans?", "query": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T3.A3 = 'Prague'"}
{"db_id": "financial", "question": "List out the no. of districts that have female average salary is more than 6000 but less than 10000?", "query": "SELECT DISTINCT T2.district_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A11 BETWEEN 6000 AND 10000"}
{"db_id": "financial", "question": "How many male customers who are living in North Bohemia have average salary greater than 8000?", "query": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A3 = 'North Bohemia' AND T2.A11 > 8000"}
{"db_id": "financial", "question": "List out the account numbers of female clients who are oldest and has lowest average salary, calculate the gap between this lowest average salary with the highest average salary?", "query": "SELECT T1.account_id , ( SELECT MAX(A11) - MIN(A11) FROM district ) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.district_id = ( SELECT district_id FROM client WHERE gender = 'F' ORDER BY birth_date ASC LIMIT 1 ) ORDER BY T2.A11 DESC LIMIT 1"}
{"db_id": "financial", "question": "List out the account numbers of clients who are youngest and have highest average salary?", "query": "SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.district_id = ( SELECT district_id FROM client ORDER BY birth_date DESC LIMIT 1 ) ORDER BY T2.A11 DESC LIMIT 1"}
{"db_id": "financial", "question": "How many customers who choose statement of weekly issuance are Owner?", "query": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'Owner' AND T1.frequency = 'POPLATEK TYDNE'"}
{"db_id": "financial", "question": "List out the clients who choose statement of issuance after transaction are Disponent?", "query": "SELECT T2.client_id FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND T2.type = 'DISPONENT'"}
{"db_id": "financial", "question": "Which client issued his/her card in 1994/3/3, give his/her client id.", "query": "SELECT T2.account_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.issued = '1994-03-03'"}
{"db_id": "financial", "question": "The transaction of 840 USD happened in 1998/10/14, when was this account opened?", "query": "SELECT T1.date FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.amount = 840 AND T2.date = '1998-10-14'"}
{"db_id": "financial", "question": "There was a loan approved in 1994/8/25, where was that account opened, give the district Id of the branch.", "query": "SELECT T1.district_id FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date = '1994-08-25'"}
{"db_id": "financial", "question": "What is the biggest amount of transaction that the client whose card was opened in 1995/10/8 made?", "query": "SELECT T2.amount FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T1.date = '1995-10-08' ORDER BY T2.amount DESC LIMIT 1"}
{"db_id": "financial", "question": "What is the gender of the oldest client who opened his/her account in the highest average salary branch?", "query": "SELECT T2.gender FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id ORDER BY T1.A11 DESC, T2.birth_date ASC LIMIT 1"}
{"db_id": "financial", "question": "For the client who applied the biggest loan, what was his/her first amount of transaction after opened the account?", "query": "SELECT T2.amount FROM loan AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id ORDER BY T1.amount DESC, T2.date ASC LIMIT 1"}
{"db_id": "financial", "question": "How many clients opened their accounts in Jesenik branch were women?", "query": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A2 = 'Jesenik'"}
{"db_id": "financial", "question": "What is the disposition id of the client who made 5100 USD transaction in 1998/9/2?", "query": "SELECT T1.type FROM disp AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.date = '1998-09-02' AND T2.amount = 5100"}
{"db_id": "financial", "question": "For the female client who was born in 1976/1/29, which brand did she opened her account?", "query": "SELECT T1.A2 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.birth_date = '1976-01-29' AND T2.gender = 'F'"}
{"db_id": "financial", "question": "For the client who applied 98832 USD loan in 1996/1/3, when was his/her birthday?", "query": "SELECT T3.birth_date FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.district_id = T3.district_id WHERE T1.date = '1996-01-03' AND T1.amount = 98832"}
{"db_id": "financial", "question": "For the first client who opened his/her account in Prague, what is his/her account ID?", "query": "SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Prague' ORDER BY T1.date ASC LIMIT 1"}
{"db_id": "financial", "question": "List account ID and account opening date for accounts from 'Prachatice'.", "query": "SELECT T1.account_id, T1.date FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Prachatice'"}
{"db_id": "financial", "question": "State the district and region for loan ID '4990'.", "query": "SELECT T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.loan_id = 4990"}
{"db_id": "financial", "question": "Provide the account ID, district and region for loan amount greater than USD300,000.", "query": "SELECT T1.account_id, T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.amount > 300000"}
{"db_id": "financial", "question": "List the loan ID, district and average salary for loan with duration of 60 months.", "query": "SELECT T3.loan_id, T2.A3, T2.A11 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.duration = 60"}
{"db_id": "financial", "question": "For loans contracts which are still running where client are in debt, list the district of the and the state the percentage unemployment rate increment from year 1995 to 1996.", "query": "SELECT CAST((T3.A13 - T3.A12) AS REAL) * 100 / T3.A12 FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.status = 'D'"}
{"db_id": "financial", "question": "List the account IDs with monthly issuance of statements.", "query": "SELECT account_id FROM account WHERE Frequency = 'POPLATEK MESICNE'"}
{"db_id": "financial", "question": "List the top ten districts, by descending order, from the highest to the lowest, the number of female account holders.", "query": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' GROUP BY T2.district_id, T2.A2 ORDER BY COUNT(T2.A2) DESC LIMIT 10"}
{"db_id": "financial", "question": "How many of the account holders in South Bohemia still do not own credit cards?", "query": "SELECT COUNT(T3.account_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.client_id = T3.client_id WHERE T1.A3 = 'south Bohemia' AND T3.type != 'OWNER'"}
{"db_id": "financial", "question": "Which district has highest active loan?", "query": "SELECT T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.status IN ('C', 'D') GROUP BY T2.A3 ORDER BY SUM(T3.amount) DESC LIMIT 1"}
{"db_id": "financial", "question": "What is the average loan amount by male borrowers?", "query": "SELECT AVG(T3.amount) FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'M'"}
{"db_id": "financial", "question": "In 1996, which districts have the highest unemployment rate? List their branch location and district name.", "query": "SELECT district_id, A2 FROM district ORDER BY A13 DESC LIMIT 1"}
{"db_id": "financial", "question": "In the branch where the largest number of crimes were committed in 1996, how many accounts were opened?", "query": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id GROUP BY T1.A16 ORDER BY T1.A16 DESC LIMIT 1"}
{"db_id": "financial", "question": "After making a credit card withdrawal, how many account/s with monthly issuance has a negative balance?", "query": "SELECT COUNT(T1.account_id) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.balance < 0 AND T1.operation = 'VYBER KARTOU' AND T2.frequency = 'POPLATEK MESICNE'"}
{"db_id": "financial", "question": "Between 1/1/1995 and 12/31/1997, how many loans in the amount of at least 250,000 per account that chose monthly statement issuance were approved?", "query": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date BETWEEN '1995-01-01' AND '1997-12-31' AND T1.frequency = 'POPLATEK MESICNE' AND T2.amount > 250000"}
{"db_id": "financial", "question": "How many accounts have running contracts in Branch location 1?", "query": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T1.district_id = 1 AND T3.status = 'C' OR T3.status = 'D'"}
{"db_id": "financial", "question": "How many high-level credit cards have \"disponent\" type of disposition?", "query": "SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'gold' AND T2.type = 'DISPONENT'"}
{"db_id": "financial", "question": "How many accounts are there in the district of \"Pisek\"?", "query": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Pisek'"}
{"db_id": "financial", "question": "Which accounts placed orders for household payment in Pisek?", "query": "SELECT DISTINCT T2.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.k_symbol = 'SIPO' AND T3.A2 = 'Pisek'"}
{"db_id": "financial", "question": "What are the accounts that have both gold and junior credit cards?", "query": "SELECT T2.account_id FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type IN ('gold', 'junior')"}
{"db_id": "financial", "question": "Who are the female account holders who own credit cards and also have loans?", "query": "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id INNER JOIN card AS T4 ON T2.disp_id = T4.disp_id WHERE T1.gender = 'F'"}
{"db_id": "financial", "question": "How many female clients' accounts are in the region of South Bohemia?", "query": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A3 = 'south Bohemia'"}
{"db_id": "financial", "question": "Please list the accounts whose district is Tabor that are eligible for loans.", "query": "SELECT T2.account_id FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'OWNER' AND T1.A2 = 'Tabor'"}
{"db_id": "financial", "question": "Please list the account types that are not eligible for loans, and the average income of residents in the district where the account is located exceeds $8000 but is no more than $9000.", "query": "SELECT T3.type FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T3.type != 'Owner' AND T1.A11 BETWEEN 8000 AND 9000"}
{"db_id": "financial", "question": "How many accounts in North Bohemia has made a transaction with the partner's bank being AB?", "query": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.bank = 'AB' AND T1.A3 = 'north Bohemia'"}
{"db_id": "financial", "question": "Please list the name of the districts with accounts that made withdrawal transactions.", "query": "SELECT DISTINCT T1.A2 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'VYDAJ'"}
{"db_id": "financial", "question": "How many 'classic' cards are eligible for loan?", "query": "SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'classic' AND T2.type = 'Owner'"}
{"db_id": "financial", "question": "How many male clients in 'Hl.m. Praha' district?", "query": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A2 = 'Hl.m. Praha'"}
{"db_id": "financial", "question": "Who is the owner of the account with the largest loan amount?", "query": "SELECT T1.client_id FROM disp AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id ORDER BY T2.amount DESC LIMIT 1"}
{"db_id": "financial", "question": "List all the withdrawals in cash transactions that the client with the id 3356 makes.", "query": "SELECT T3.trans_id FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T1.client_id = 3356 AND T3.operation = 'VYBER'"}
{"db_id": "financial", "question": "Among the weekly issuance accounts, how many have a loan of under 200000?", "query": "SELECT COUNT(T1.account_id) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.frequency = 'POPLATEK TYDNE' AND T1.amount < 200000"}
{"db_id": "financial", "question": "What type of credit card does the client with the id 13539 own?", "query": "SELECT T3.type FROM disp AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T1.disp_id = T3.disp_id WHERE T2.client_id = 13539"}
{"db_id": "financial", "question": "What is the region of the client with the id 3541 from?", "query": "SELECT T2.district_id, T1.A3 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.client_id = 3541"}
{"db_id": "financial", "question": "Which district has the most accounts with loan contracts finished with no problems?", "query": "SELECT T1.district_id FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T3.status = 'A' GROUP BY T1.district_id ORDER BY COUNT(T2.account_id) DESC LIMIT 1"}
{"db_id": "financial", "question": "Please list all the transactions made by accounts from district 5.", "query": "SELECT T3.trans_id FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T1.district_id = 5"}
{"db_id": "financial", "question": "How many of the accounts are from Jesenik district?", "query": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A2 = 'Jesenik'"}
{"db_id": "financial", "question": "List all the clients' IDs whose junior credit cards were issued after 1996.", "query": "SELECT T2.client_id FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'junior' AND T1.issued >= '1997-01-01'"}
{"db_id": "financial", "question": "How many accounts have an owner disposition and request for a statement to be generated upon a transaction?", "query": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'OWNER' AND T1.frequency = 'POPLATEK PO OBRATU'"}
{"db_id": "financial", "question": "What is the amount of debt that client number 992 has, and how is this client doing with payments?", "query": "SELECT T3.amount, T3.status FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T1.client_id = 992"}
{"db_id": "financial", "question": "What is the sum that client number 4's account has following transaction 851? Who owns this account, a man or a woman?", "query": "SELECT T3.balance, T1.gender FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T1.client_id = 4 AND T3.trans_id = 851"}
{"db_id": "financial", "question": "Which kind of credit card does client number 9 possess?", "query": "SELECT T3.type FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.client_id = 9"}
{"db_id": "financial", "question": "Please provide the IDs of the 3 female clients with the largest loans.", "query": "SELECT T1.client_id FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'F' ORDER BY T3.amount DESC LIMIT 3"}
{"db_id": "financial", "question": "How many female customers have a junior credit card?", "query": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.gender = 'F' AND T3.type = 'junior'"}
{"db_id": "financial", "question": "How many clients who choose statement of weekly issuance are User?", "query": "SELECT COUNT(T2.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T2.account_id = T1.account_id WHERE T1.frequency = 'POPLATEK TYDNE' AND T2.type = 'USER'"}
{"db_id": "financial", "question": "Name the account numbers of female clients who are oldest and have lowest average salary?", "query": "SELECT T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id WHERE T1.gender = 'F' ORDER BY T1.birth_date ASC, T2.A11 ASC LIMIT 1"}
{"db_id": "financial", "question": "How many loan accounts are for pre-payment of duration of 24 months with weekly issuance of statement.", "query": "SELECT COUNT(T2.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.duration = 24 AND T1.frequency = 'POPLATEK TYDNE'"}
{"db_id": "financial", "question": "What is the average amount of loan which are still on running contract with statement issuance after each transaction?", "query": "SELECT AVG(T2.payments) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.status IN ('C', 'D') AND T1.frequency = 'POPLATEK PO OBRATU'"}
{"db_id": "financial", "question": "List all ID and district for clients that can only have the right to issue permanent orders or apply for loans.", "query": "SELECT T3.client_id, T2.district_id, T2.A2 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id WHERE T3.type = 'OWNER'"}
{"db_id": "toxicology", "question": "What is the most common bond type?", "query": "SELECT T.bond_type FROM ( SELECT bond_type, COUNT(bond_id) FROM bond GROUP BY bond_type ORDER BY COUNT(bond_id) DESC LIMIT 1 ) AS T"}
{"db_id": "toxicology", "question": "In the non-carcinogenic molecules, how many contain chlorine atoms?", "query": "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'cl' AND T1.label = '-'"}
{"db_id": "toxicology", "question": "Calculate the average number of oxygen atoms in single-bonded molecules.", "query": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element = 'o' THEN T1.molecule_id ELSE NULL END) AS REAL) / COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-'"}
{"db_id": "toxicology", "question": "On average how many carcinogenic molecules are single bonded?", "query": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.bond_type = '-' AND T3.label = '+' THEN T3.molecule_id ELSE NULL END) AS REAL) / COUNT(DISTINCT T3.molecule_id) FROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN molecule AS T3 ON T3.molecule_id = T2.molecule_id"}
{"db_id": "toxicology", "question": "In the molecule containing sodium atoms, how many are non-carcinogenic?", "query": "SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'na' AND T2.label = '-'"}
{"db_id": "toxicology", "question": "Find the triple-bonded molecules which are carcinogenic.", "query": "SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '+'"}
{"db_id": "toxicology", "question": "What is the percentage of carbon in double-bond molecules?", "query": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element = 'c' THEN T1.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '='"}
{"db_id": "toxicology", "question": "How many triple type bonds are there?", "query": "SELECT COUNT(T.bond_id) FROM bond AS T WHERE T.bond_type = '#'"}
{"db_id": "toxicology", "question": "In how many atoms is there no bromine?", "query": "SELECT COUNT(DISTINCT T.atom_id) FROM atom AS T WHERE T.element <> 'br'"}
{"db_id": "toxicology", "question": "Of the first 100 molecules in number order, how many are carcinogenic?", "query": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND T.label = '+'"}
{"db_id": "toxicology", "question": "Identify by their ID the molecules in which there is silicon.", "query": "SELECT T.atom_id FROM atom AS T WHERE T.element = 'si'"}
{"db_id": "toxicology", "question": "What elements are in the TR004_8_9 bond atoms?", "query": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR004_8_9'"}
{"db_id": "toxicology", "question": "What elements are in a double type bond?", "query": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.bond_type = '='"}
{"db_id": "toxicology", "question": "Which type of label is the most numerous in atoms with hydrogen?", "query": "SELECT T.label FROM ( SELECT T2.label, COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'h' GROUP BY T2.label ORDER BY COUNT(T2.molecule_id) DESC LIMIT 1 ) t"}
{"db_id": "toxicology", "question": "Tellurium is in what type of bond?", "query": "SELECT DISTINCT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T3.element = 'te'"}
{"db_id": "toxicology", "question": "What atoms are connected in single type bonds?", "query": "SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '-'"}
{"db_id": "toxicology", "question": "Indicate which atoms are connected in non-carcinogenic type molecules.", "query": "SELECT DISTINCT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.label = '-'"}
{"db_id": "toxicology", "question": "Which element is the least numerous in non-carcinogenic molecules?", "query": "SELECT T.element FROM ( SELECT T1.element, COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' GROUP BY T1.element ORDER BY COUNT(DISTINCT T1.molecule_id) ASC LIMIT 4 ) t"}
{"db_id": "toxicology", "question": "What type of bond is there between the atoms TR004_8 and TR004_20?", "query": "SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR004_8' AND T2.atom_id2 = 'TR004_20' OR T2.atom_id2 = 'TR004_8' AND T2.atom_id = 'TR004_20'"}
{"db_id": "toxicology", "question": "What type of label is not on molecules with atoms with tin?", "query": "SELECT DISTINCT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element != 'sn'"}
{"db_id": "toxicology", "question": "How many atoms with iodine and sulfur type elements are there in single bond molecules?", "query": "SELECT COUNT(DISTINCT CASE WHEN T1.element = 'i' THEN T1.atom_id ELSE NULL END) AS iodine_nums , COUNT(DISTINCT CASE WHEN T1.element = 's' THEN T1.atom_id ELSE NULL END) AS sulfur_nums FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'"}
{"db_id": "toxicology", "question": "Identify all connected atoms with a triple bond.", "query": "SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '#'"}
{"db_id": "toxicology", "question": "Identify all the atoms that are connected to the atoms of the TR181 molecule.", "query": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T2.atom_id = T1.atom_id WHERE T1.molecule_id = 'TR181'"}
{"db_id": "toxicology", "question": "What percentage of carcinogenic-type molecules does not contain fluorine?", "query": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element <> 'f' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'"}
{"db_id": "toxicology", "question": "What is the percentage of carcinogenic molecules in triple type bonds?", "query": "SELECT CAST(COUNT(DISTINCT CASE WHEN T2.label = '+' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#'"}
{"db_id": "toxicology", "question": "Please list top three elements of the toxicology of the molecule TR000 in alphabetical order.", "query": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR000' ORDER BY T.element LIMIT 3"}
{"db_id": "toxicology", "question": "What are the atoms that are bonded in the molecule TR001 with the bond ID of TR001_2_6?", "query": "SELECT SUBSTR(T.bond_id, 1, 7) AS atom_id1 , T.molecule_id || SUBSTR(T.bond_id, 8, 2) AS atom_id2 FROM bond AS T WHERE T.molecule_id = 'TR001' AND T.bond_id = 'TR001_2_6'"}
{"db_id": "toxicology", "question": "What is the difference between the number of molecules that are carcinogenic and those that are not?", "query": "SELECT COUNT(CASE WHEN T.label = '+' THEN T.molecule_id ELSE NULL END) - COUNT(CASE WHEN T.label = '-' THEN T.molecule_id ELSE NULL END) AS diff_car_notcar FROM molecule t"}
{"db_id": "toxicology", "question": "What are the atom IDs of the bond TR_000_2_5?", "query": "SELECT T.atom_id FROM connected AS T WHERE T.bond_id = 'TR000_2_5'"}
{"db_id": "toxicology", "question": "What are the bond IDs that have the same atom ID 2 of TR000_2?", "query": "SELECT T.bond_id FROM connected AS T WHERE T.atom_id2 = 'TR000_2'"}
{"db_id": "toxicology", "question": "Please list top five molecules that have double bonds in alphabetical order.", "query": "SELECT DISTINCT T.molecule_id FROM bond AS T WHERE T.bond_type = '=' ORDER BY T.molecule_id LIMIT 5"}
{"db_id": "toxicology", "question": "What is the percentage of double bonds in the molecule TR008?", "query": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond AS T WHERE T.molecule_id = 'TR008'"}
{"db_id": "toxicology", "question": "What is the percentage of molecules that are carcinogenic?", "query": "SELECT CAST(COUNT(CASE WHEN T.label = '+' THEN T.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T.molecule_id) FROM molecule t"}
{"db_id": "toxicology", "question": "How much of the hydrogen in molecule TR206 is accounted for? Please provide your answer in percentage.", "query": "SELECT CAST(COUNT(CASE WHEN T.element = 'h' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id) FROM atom AS T WHERE T.molecule_id = 'TR206'"}
{"db_id": "toxicology", "question": "What is the type of bond that molecule TR000 has when involved in any bonds?", "query": "SELECT DISTINCT T.bond_type FROM bond AS T WHERE T.molecule_id = 'TR000'"}
{"db_id": "toxicology", "question": "What are the elements of the toxicology and label of molecule TR060?", "query": "SELECT DISTINCT T1.element, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR060'"}
{"db_id": "toxicology", "question": "Which bond type accounted for the majority of the bonds found in molecule TR018 and state whether or not this molecule is carcinogenic?", "query": "SELECT T.bond_type FROM ( SELECT T1.bond_type, COUNT(T2.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR018' GROUP BY T1.bond_type ORDER BY COUNT(T2.molecule_id) DESC LIMIT 1 ) t"}
{"db_id": "toxicology", "question": "Please list top three molecules that have single bonds between two atoms and are not carcinogenic in alphabetical order.", "query": "SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T2.label = '-' ORDER BY T2.molecule_id LIMIT 3"}
{"db_id": "toxicology", "question": "Please list top two bonds that happened with the molecule TR006 in alphabetical order.", "query": "SELECT DISTINCT T2.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.molecule_id = 'TR006' ORDER BY T2.bond_id LIMIT 2"}
{"db_id": "toxicology", "question": "How many bonds which involved atom 12 does molecule TR009 have?", "query": "SELECT COUNT(T2.bond_id) FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.molecule_id = 'TR009' AND T2.atom_id = T1.molecule_id || '_1' AND T2.atom_id2 = T1.molecule_id || '_2'"}
{"db_id": "toxicology", "question": "How many molecules are carcinogenic and have the bromine element?", "query": "SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'br'"}
{"db_id": "toxicology", "question": "What are the bond type and the atoms of the bond ID of TR001_6_9?", "query": "SELECT T1.bond_type, T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_id = 'TR001_6_9'"}
{"db_id": "toxicology", "question": "How many molecules have a triple bond type?", "query": "SELECT COUNT(DISTINCT T.molecule_id) FROM bond AS T WHERE T.bond_type = '#'"}
{"db_id": "toxicology", "question": "How many connections does the atom 19 have?", "query": "SELECT COUNT(T.bond_id) FROM connected AS T WHERE SUBSTR(T.atom_id, -2) = '19'"}
{"db_id": "toxicology", "question": "List all the elements of the toxicology of the molecule \"TR004\".", "query": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR004'"}
{"db_id": "toxicology", "question": "How many of the molecules are not carcinogenic?", "query": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '-'"}
{"db_id": "toxicology", "question": "Among all the atoms from 21 to 25, list all the molecules that are carcinogenic.", "query": "SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE SUBSTR(T1.atom_id, -2) BETWEEN '21' AND '25' AND T2.label = '+'"}
{"db_id": "toxicology", "question": "What are the bonds that have phosphorus and nitrogen as their atom elements?", "query": "SELECT T2.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id IN ( SELECT T3.bond_id FROM connected AS T3 INNER JOIN atom AS T4 ON T3.atom_id = T4.atom_id WHERE T4.element = 'p' ) AND T1.element = 'n'"}
{"db_id": "toxicology", "question": "Is the molecule with the most double bonds carcinogenic?", "query": "SELECT T1.label FROM molecule AS T1 INNER JOIN ( SELECT T.molecule_id, COUNT(T.bond_type) FROM bond AS T WHERE T.bond_type = '=' GROUP BY T.molecule_id ORDER BY COUNT(T.bond_type) DESC LIMIT 1 ) AS T2 ON T1.molecule_id = T2.molecule_id"}
{"db_id": "toxicology", "question": "What is the average number of bonds the atoms with the element iodine have?", "query": "SELECT CAST(COUNT(T2.bond_id) AS REAL) / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'i'"}
{"db_id": "toxicology", "question": "List the bond type and the bond ID of the atom 45.", "query": "SELECT T1.bond_type, T1.bond_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE SUBSTR(T2.atom_id, 7, 2) = '45'"}
{"db_id": "toxicology", "question": "List all the elements of atoms that can not bond with any other atoms.", "query": "SELECT DISTINCT T.element FROM atom AS T WHERE T.element NOT IN ( SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id )"}
{"db_id": "toxicology", "question": "What are the atoms of the triple bond with the molecule \"TR447\"?", "query": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '#' AND T3.molecule_id = 'TR447'"}
{"db_id": "toxicology", "question": "What are the elements of the atoms of TR144_8_19?", "query": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR144_8_19'"}
{"db_id": "toxicology", "question": "Of all the carcinogenic molecules, which one has the most double bonds?", "query": "SELECT T.molecule_id FROM ( SELECT T3.molecule_id, COUNT(T1.bond_type) FROM bond AS T1 INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.label = '+' AND T1.bond_type = '=' GROUP BY T3.molecule_id ORDER BY COUNT(T1.bond_type) DESC LIMIT 1 ) AS T"}
{"db_id": "toxicology", "question": "What is the least common element of all carcinogenic molecules?", "query": "SELECT T.element FROM ( SELECT T2.element, COUNT(DISTINCT T2.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' GROUP BY T2.element ORDER BY COUNT(DISTINCT T2.molecule_id) LIMIT 1 ) t"}
{"db_id": "toxicology", "question": "What are the atoms that can bond with the atom that has the element lead?", "query": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'pb'"}
{"db_id": "toxicology", "question": "List the elements of all the triple bonds.", "query": "SELECT DISTINCT T3.element FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T1.bond_type = '#'"}
{"db_id": "toxicology", "question": "What percentage of bonds have the most common combination of atoms' elements?", "query": "SELECT CAST((SELECT COUNT(T1.atom_id) FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id GROUP BY T2.bond_type ORDER BY COUNT(T2.bond_id) DESC LIMIT 1 ) AS REAL) * 100 / ( SELECT COUNT(atom_id) FROM connected )"}
{"db_id": "toxicology", "question": "What proportion of single bonds are carcinogenic?", "query": "SELECT CAST(COUNT(CASE WHEN T2.label = '+' THEN T1.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.bond_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-'"}
{"db_id": "toxicology", "question": "Calculate the total atoms consisting of the element carbon and hydrogen.", "query": "SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.element = 'c' OR T.element = 'h'"}
{"db_id": "toxicology", "question": "List down atom id2 for atoms with element sulfur.", "query": "SELECT DISTINCT T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 's'"}
{"db_id": "toxicology", "question": "What are the bond type for atoms with element Tin?", "query": "SELECT DISTINCT T3.bond_type FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T3.bond_id = T2.bond_id WHERE T1.element = 'sn'"}
{"db_id": "toxicology", "question": "How many elements are there for single bond molecules?", "query": "SELECT COUNT(DISTINCT T.element) FROM ( SELECT DISTINCT T2.molecule_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-' ) AS T"}
{"db_id": "toxicology", "question": "Calculate the total atoms with triple-bond molecules containing the element phosphorus or bromine.", "query": "SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T1.element IN ('p', 'br')"}
{"db_id": "toxicology", "question": "Write down bond id for molecules that are carcinogenic.", "query": "SELECT DISTINCT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'"}
{"db_id": "toxicology", "question": "Among the single bond molecule id, which molecules are not carcinogenic?", "query": "SELECT DISTINCT T1.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' AND T1.bond_type = '-'"}
{"db_id": "toxicology", "question": "What is the composition of element chlorine in percentage among the single bond molecules?", "query": "SELECT CAST(COUNT(CASE WHEN T.element = 'cl' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id) FROM ( SELECT T1.atom_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-' ) AS T"}
{"db_id": "toxicology", "question": "What are the labels for TR000, TR001 and TR002?", "query": "SELECT molecule_id, T.label FROM molecule AS T WHERE T.molecule_id IN ('TR000', 'TR001', 'TR002')"}
{"db_id": "toxicology", "question": "List down the molecule id for non carcinogenic molecules.", "query": "SELECT T.molecule_id FROM molecule AS T WHERE T.label = '-'"}
{"db_id": "toxicology", "question": "Calculate the total carcinogenic molecules for molecule id from TR000 to TR030.", "query": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.molecule_id BETWEEN 'TR000' AND 'TR030' AND T.label = '+'"}
{"db_id": "toxicology", "question": "List down the bond type for molecules from molecule id TR000 to TR050.", "query": "SELECT T2.molecule_id, T2.bond_type FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id BETWEEN 'TR000' AND 'TR050'"}
{"db_id": "toxicology", "question": "What are the elements for bond id TR001_10?", "query": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR001_10'"}
{"db_id": "toxicology", "question": "How many bond id have element iodine?", "query": "SELECT COUNT(T3.bond_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T1.element = 'i'"}
{"db_id": "toxicology", "question": "Among the molecules with element Calcium, are they mostly carcinogenic or non carcinogenic?", "query": "SELECT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'ca' GROUP BY T2.label ORDER BY COUNT(T2.label) DESC LIMIT 1"}
{"db_id": "toxicology", "question": "Does bond id TR001_1_8 have both element of chlorine and carbon?", "query": "SELECT T2.bond_id, T2.atom_id2, T1.element AS flag_have_CaCl FROM atom AS T1 INNER JOIN connected AS T2 ON T2.atom_id = T1.atom_id WHERE T2.bond_id = 'TR001_1_8' AND (T1.element = 'c1' OR T1.element = 'c')"}
{"db_id": "toxicology", "question": "List down two molecule id of triple bond non carcinogenic molecules with element carbon.", "query": "SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T1.element = 'c' AND T2.label = '-'"}
{"db_id": "toxicology", "question": "What is the percentage of element lead in carcinogenic molecules?", "query": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element = 'pb' THEN T1.element ELSE NULL END) AS REAL) * 100 / COUNT(T1.element) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'"}
{"db_id": "toxicology", "question": "List the toxicology elements associated with molecule TR001.", "query": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR001'"}
{"db_id": "toxicology", "question": "Give me the molecule ID of the double bond type.", "query": "SELECT DISTINCT T.molecule_id FROM bond AS T WHERE T.bond_type = '='"}
{"db_id": "toxicology", "question": "Write down the atom IDs of the first and second atoms of triple bond type molecules.", "query": "SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '#'"}
{"db_id": "toxicology", "question": "What are the toxicology elements associated with bond ID TR005_16_26?", "query": "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR005_16_26'"}
{"db_id": "toxicology", "question": "How many of the single bond type molecules are non-carcinogenic?", "query": "SELECT COUNT(DISTINCT T2.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' AND T1.bond_type = '-'"}
{"db_id": "toxicology", "question": "What is the label for bond ID TR001_10_11?", "query": "SELECT T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_id = 'TR001_10_11'"}
{"db_id": "toxicology", "question": "Enumerate the bond ID of triple bond type molecules and tell me if they are carcinogenic or not.", "query": "SELECT DISTINCT T1.bond_id, T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'"}
{"db_id": "toxicology", "question": "Tally the toxicology element of the 4th atom of each molecule that was carcinogenic.", "query": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND SUBSTR(T1.atom_id, -1) = '4' AND LENGTH(T1.atom_id) = 7"}
{"db_id": "toxicology", "question": "Identify whether the chemical compound that contains Calcium is carcinogenic.", "query": "SELECT T2.label AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'ca'"}
{"db_id": "toxicology", "question": "Determine the bond type that is formed in the chemical compound containing element Tellurium.", "query": "SELECT DISTINCT T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'te'"}
{"db_id": "toxicology", "question": "Name chemical elements that form a bond TR001_10_11.", "query": "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR001_10_11'"}
{"db_id": "toxicology", "question": "Among all chemical compounds identified in the database, what percent of compounds form a triple-bond.", "query": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '#' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond AS T"}
{"db_id": "toxicology", "question": "Among all chemical compounds that contain molecule TR047, identify the percent that form a double-bond.", "query": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond AS T WHERE T.molecule_id = 'TR047'"}
{"db_id": "toxicology", "question": "Identify whether the molecule that contains atom TR001_1 is carcinogenic.", "query": "SELECT T2.label AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_1'"}
{"db_id": "toxicology", "question": "Is molecule TR151 carcinogenic?", "query": "SELECT T.label FROM molecule AS T WHERE T.molecule_id = 'TR151'"}
{"db_id": "toxicology", "question": "Which toxic element can be found in the molecule TR151?", "query": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR151'"}
{"db_id": "toxicology", "question": "How many chemical compounds in the database are identified as carcinogenic.", "query": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '+'"}
{"db_id": "toxicology", "question": "Identify the atoms belong to the molecule with ID between TR010 to TR050 that contain the element carbon.", "query": "SELECT T.atom_id FROM atom AS T WHERE T.molecule_id BETWEEN 'TR010' AND 'TR050' AND T.element = 'c'"}
{"db_id": "toxicology", "question": "How many atoms belong to the molecule labeled with carcinogenic compounds?", "query": "SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'"}
{"db_id": "toxicology", "question": "Which bond ids are double-bond with carcinogenic compound?", "query": "SELECT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.bond_type = '='"}
{"db_id": "toxicology", "question": "How many atoms belong to the molecule that element is hydrogen and labeled with carcinogenic compound?", "query": "SELECT COUNT(T1.atom_id) AS atomnums_h FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'h'"}
{"db_id": "toxicology", "question": "Indicate the molecule id is belonging to the TR00_1_2 bond that has the first atom named TR00_1.", "query": "SELECT T2.molecule_id, T2.bond_id, T1.atom_id FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T1.atom_id = 'TR000_1' AND T2.bond_id = 'TR000_1_2'"}
{"db_id": "toxicology", "question": "Among the atoms that contain element carbon, which one does not contain compound carcinogenic?", "query": "SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'"}
{"db_id": "toxicology", "question": "Calculate the percentage of molecules containing carcinogenic compounds that element is hydrogen.", "query": "SELECT CAST(COUNT(CASE WHEN T1.element = 'h' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'"}
{"db_id": "toxicology", "question": "Is molecule TR124 carcinogenic?", "query": "SELECT T.label FROM molecule AS T WHERE T.molecule_id = 'TR124'"}
{"db_id": "toxicology", "question": "What atoms comprise TR186?", "query": "SELECT T.atom_id FROM atom AS T WHERE T.molecule_id = 'TR186'"}
{"db_id": "toxicology", "question": "What is the bond type of TR007_4_19?", "query": "SELECT T.bond_type FROM bond AS T WHERE T.bond_id = 'TR007_4_19'"}
{"db_id": "toxicology", "question": "Name the elements that comprise the atoms of bond TR001_2_4.", "query": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_2_4'"}
{"db_id": "toxicology", "question": "How many double bonds does TR006 have and is it carcinogenic?", "query": "SELECT COUNT(T1.bond_id), T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '=' AND T2.molecule_id = 'TR006' GROUP BY T2.label"}
{"db_id": "toxicology", "question": "List all carcinogenic molecules and their elements.", "query": "SELECT DISTINCT T2.molecule_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'"}
{"db_id": "toxicology", "question": "Name all bonds with single bond types and what atoms are connected to the molecules.", "query": "SELECT T1.bond_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '-'"}
{"db_id": "toxicology", "question": "Which molecules have triple bonds and list all the elements they contain.", "query": "SELECT DISTINCT T1.molecule_id, T2.element FROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'"}
{"db_id": "toxicology", "question": "Name the atoms' elements that form bond TR000_2_3.", "query": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR000_2_3'"}
{"db_id": "toxicology", "question": "How many bonds are created by bonding atoms with chlorine element?", "query": "SELECT COUNT(T1.bond_id) FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T2.element = 'cl'"}
{"db_id": "toxicology", "question": "List out the atom id that belongs to the TR346 molecule and how many bond type can be created by this molecule?", "query": "SELECT T1.atom_id, COUNT(DISTINCT T2.bond_type) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR346' GROUP BY T1.atom_id, T2.bond_type"}
{"db_id": "toxicology", "question": "How many molecules have a double bond type and among these molecule, how many are labeled as carcinogenic compound?", "query": "SELECT COUNT(DISTINCT T2.molecule_id), SUM(CASE WHEN T2.label = '+' THEN 1 ELSE 0 END) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '='"}
{"db_id": "toxicology", "question": "How many molecules without sulphur element is not having double bond?", "query": "SELECT COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element <> 's' AND T2.bond_type <> '='"}
{"db_id": "toxicology", "question": "What is the carcinogenic label for bond TR001_2_4?", "query": "SELECT DISTINCT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_id = 'TR001_2_4'"}
{"db_id": "toxicology", "question": "How many atoms belong to molecule id TR005?", "query": "SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.molecule_id = 'TR005'"}
{"db_id": "toxicology", "question": "How many single bonds are there in the list?", "query": "SELECT COUNT(T.bond_id) FROM bond AS T WHERE T.bond_type = '-'"}
{"db_id": "toxicology", "question": "Among the molecules which contain \"cl\" element, which of them are carcinogenic?", "query": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'cl' AND T2.label = '+'"}
{"db_id": "toxicology", "question": "Among the molecules which contain \"c\" element, which of them are not carcinogenic?", "query": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'"}
{"db_id": "toxicology", "question": "Calculate the percentage of carcinogenic molecules which contain the Chlorine element.", "query": "SELECT COUNT(CASE WHEN T2.label = '+' AND T1.element = 'cl' THEN T2.molecule_id ELSE NULL END) * 100 / COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id"}
{"db_id": "toxicology", "question": "What is the molecule id of bond id TR001_1_7?", "query": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_1_7'"}
{"db_id": "toxicology", "question": "How many elements are contained in bond_id TR001_3_4?", "query": "SELECT COUNT(DISTINCT T1.element) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_3_4'"}
{"db_id": "toxicology", "question": "What is the type of the bond which is presenting the connection between two atoms TR000_1 and TR000_2?", "query": "SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR000_1' AND T2.atom_id2 = 'TR000_2'"}
{"db_id": "toxicology", "question": "What is the molecule of atom id \"TR000_2\" and atom id 2 \"TR000_4\"?", "query": "SELECT T1.molecule_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR000_2' AND T2.atom_id2 = 'TR000_4'"}
{"db_id": "toxicology", "question": "What is the element of toxicology for the atom with the ID of TR000_1?", "query": "SELECT T.element FROM atom AS T WHERE T.atom_id = 'TR000_1'"}
{"db_id": "toxicology", "question": "Is molecule TR000 is carcinogenic or not?", "query": "SELECT label FROM molecule AS T WHERE T.molecule_id = 'TR000'"}
{"db_id": "toxicology", "question": "Find the percentage of atoms with single bond.", "query": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '-' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond t"}
{"db_id": "toxicology", "question": "How many carcinogenic molecules that consisted of Nitrogen?", "query": "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'n' AND T1.label = '+'"}
{"db_id": "toxicology", "question": "Which molecule consisted of Sulphur atom with double bond?", "query": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 's' AND T2.bond_type = '='"}
{"db_id": "toxicology", "question": "Which non-carcinogenic molecules consisted more than 5 atoms?", "query": "SELECT T.molecule_id FROM ( SELECT T1.molecule_id, COUNT(T2.atom_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' GROUP BY T1.molecule_id HAVING COUNT(T2.atom_id) > 5 ) t"}
{"db_id": "toxicology", "question": "List all the elements with triple bond, consisted in molecule TR024.", "query": "SELECT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR024' AND T2.bond_type = '#'"}
{"db_id": "toxicology", "question": "Which carcinogenic molecule have the highest number of atoms consisted in it?", "query": "SELECT T.molecule_id FROM ( SELECT T2.molecule_id, COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' GROUP BY T2.molecule_id ORDER BY COUNT(T1.atom_id) DESC LIMIT 1 ) t"}
{"db_id": "toxicology", "question": "Calculate the percentage of carcinogenic molecules with triple bonded Hidrogen atoms.", "query": "SELECT CAST(SUM(CASE WHEN T1.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T2.element = 'h'"}
{"db_id": "toxicology", "question": "How many of the molecules are carcinogenic?", "query": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '+'"}
{"db_id": "toxicology", "question": "Among the molecules between TR004 to TR010, how many of them has single bonds?", "query": "SELECT COUNT(DISTINCT T.molecule_id) FROM bond AS T WHERE T.molecule_id BETWEEN 'TR004' AND 'TR010' AND T.bond_type = '-'"}
{"db_id": "toxicology", "question": "In the molecule TR008, how many carbons are present?", "query": "SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.molecule_id = 'TR008' AND T.element = 'c'"}
{"db_id": "toxicology", "question": "What is the element with the atom ID of TR004_7 in molecule that is not carcinogenic?", "query": "SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR004_7' AND T2.label = '-'"}
{"db_id": "toxicology", "question": "What is the total number of molecules with double bonded oxygen?", "query": "SELECT COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '=' AND T1.element = 'o'"}
{"db_id": "toxicology", "question": "in molecules with triple bonds, how many of them are not carcinogenic?", "query": "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '#' AND T1.label = '-'"}
{"db_id": "toxicology", "question": "List the element and bond type included in the molecule with molecule ID of TR016.", "query": "SELECT DISTINCT T1.element, T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR016'"}
{"db_id": "toxicology", "question": "What is the atom ID of double bonded carbon in TR012 molecule?", "query": "SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T2.molecule_id = 'TR012' AND T3.bond_type = '=' AND T1.element = 'c'"}
{"db_id": "toxicology", "question": "List the atom ID of the carcinogenic molecule that contains oxygen?", "query": "SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'o' AND T2.label = '+'"}
{"db_id": "card_games", "question": "Which are the cards that have incredibly powerful foils.", "query": "SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL"}
{"db_id": "card_games", "question": "What are the borderless cards available without powerful foils?", "query": "SELECT id FROM cards WHERE borderColor = 'borderless' AND cardKingdomId IS NULL AND cardKingdomId IS NULL"}
{"db_id": "card_games", "question": "List the card names with value that cost more converted mana for the face.", "query": "SELECT name FROM cards ORDER BY faceConvertedManaCost LIMIT 1"}
{"db_id": "card_games", "question": "List all the mythic rarity print cards banned in gladiator format.", "query": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Banned' AND T1.rarity = 'mythic'"}
{"db_id": "card_games", "question": "For artifact type of cards that do not have multiple faces on the same card, state its legalities for vintage play format.", "query": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Artifact' AND T2.format = 'vintage' AND T1.side IS NULL"}
{"db_id": "card_games", "question": "List all the card id and artist with unknown power which are legal for commander play format.", "query": "SELECT T1.id, T1.artist FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Legal' AND T2.format = 'commander' AND T1.power IS NULL OR T1.power = '*'"}
{"db_id": "card_games", "question": "Find all cards illustrated by Stephen Daniel and describe the text of the ruling of these cards. State if these cards have missing or degraded properties and values.", "query": "SELECT T1.id, T2.text, T1.hasContentWarning FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Stephen Daniele'"}
{"db_id": "card_games", "question": "Describe the information about rulings for card named 'Sublime Epiphany' with number 74s.", "query": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sublime Epiphany' AND T1.number = '74'"}
{"db_id": "card_games", "question": "Name all the cards which have alternative language in Japanese.", "query": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'"}
{"db_id": "card_games", "question": "Calculate the percentage of the cards availabe in Chinese Simplified.", "query": "SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid"}
{"db_id": "card_games", "question": "List all the sets available in Italian translation. State the total number of cards per set.", "query": "SELECT T1.name, T1.totalSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian'"}
{"db_id": "card_games", "question": "How many types of cards does the artist Aaron Boyd illustrated about card art?", "query": "SELECT COUNT(type) FROM cards WHERE artist = 'Aaron Boyd'"}
{"db_id": "card_games", "question": "What is the keyword found on card 'Angel of Mercy'?", "query": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'"}
{"db_id": "card_games", "question": "How many cards have infinite power?", "query": "SELECT COUNT(*) FROM cards WHERE power = '*'"}
{"db_id": "card_games", "question": "What type of promotion is of card 'Duress'?", "query": "SELECT promoTypes FROM cards WHERE name = 'Duress' AND promoTypes IS NOT NULL"}
{"db_id": "card_games", "question": "What is the border color of card \"Ancestor's Chosen\"?", "query": "SELECT DISTINCT borderColor FROM cards WHERE name = 'Ancestor''s Chosen'"}
{"db_id": "card_games", "question": "What is the type of the card \"Ancestor's Chosen\" as originally printed?", "query": "SELECT originalType FROM cards WHERE name = 'Ancestor''s Chosen' AND originalType IS NOT NULL"}
{"db_id": "card_games", "question": "cards are not directly linked to language but through table 'set'. you need to add set in covered table & rephrase your question\nWhat are the languages available for the set that card 'Angel of Mercy' is in?", "query": "SELECT language FROM set_translations WHERE id IN ( SELECT id FROM cards WHERE name = 'Angel of Mercy' )"}
{"db_id": "card_games", "question": "How many cards of legalities whose status is restricted have text boxes?", "query": "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Restricted' AND T1.isTextless = 0"}
{"db_id": "card_games", "question": "What is the description about the ruling of card \"Condemn\"?", "query": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Condemn'"}
{"db_id": "card_games", "question": "How many cards of legalities whose status is restricted are found in a starter deck?", "query": "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Restricted' AND T1.isStarter = 1"}
{"db_id": "card_games", "question": "What is the status of card \"Cloudchaser Eagle\"?", "query": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'"}
{"db_id": "card_games", "question": "What is the type of card \"Benalish Knight\"?", "query": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'"}
{"db_id": "card_games", "question": "What is the rule of playing card \"Benalish Knight\"?", "query": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'"}
{"db_id": "card_games", "question": "Please provide the names of the artists who illustrated the card art in Phyrexian.", "query": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Phyrexian'"}
{"db_id": "card_games", "question": "What is the percentage of borderless cards\uff1f", "query": "SELECT CAST(SUM(CASE WHEN borderColor = 'borderless' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards"}
{"db_id": "card_games", "question": "How many cards that illusrtated in German have been reprinted?", "query": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.isReprint = 1"}
{"db_id": "card_games", "question": "How many borderless cards are illustrated in Russian?", "query": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.borderColor = 'borderless' AND T2.language = 'Russian'"}
{"db_id": "card_games", "question": "What is the percentage of cards whose language is French among the Story Spotlight cards?", "query": "SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.isStorySpotlight = 1"}
{"db_id": "card_games", "question": "Name the cards that were illustrated by Aaron Boyd.", "query": "SELECT DISTINCT name FROM cards WHERE artist = 'Aaron Boyd'"}
{"db_id": "card_games", "question": "How many black border cards are only available on mtgo?", "query": "SELECT COUNT(id) FROM cards WHERE availability = 'mtgo' AND borderColor = 'black'"}
{"db_id": "card_games", "question": "List down all the card IDs with converted mana cost of 0.", "query": "SELECT id FROM cards WHERE convertedManaCost = 0"}
{"db_id": "card_games", "question": "What are the card layout of cards with keyword of flying?", "query": "SELECT layout FROM cards WHERE keywords = 'Flying'"}
{"db_id": "card_games", "question": "How many cards with original type of \"Summon - Angel\" have subtype other than \"Angel\"?", "query": "SELECT COUNT(id) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes != 'Angel'"}
{"db_id": "card_games", "question": "What are the foiled cards that are incredibly powerful when paired with non foiled cards? List the IDs.", "query": "SELECT id FROM cards WHERE cardKingdomId IS NOT NULL AND cardKingdomFoilId IS NOT NULL"}
{"db_id": "card_games", "question": "What are the cards belong to duel deck a? List the ID.", "query": "SELECT id FROM cards WHERE duelDeck = 'a'"}
{"db_id": "card_games", "question": "List down the name of artists for cards in Chinese Simplified.", "query": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'"}
{"db_id": "card_games", "question": "What are the cards that only available in paper and Japanese language?", "query": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Japanese'"}
{"db_id": "card_games", "question": "How many of the banned cards are white border?", "query": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Banned' AND T1.borderColor = 'white'"}
{"db_id": "card_games", "question": "List down the uuid for legacy cards and the foreign language of these cards.", "query": "SELECT T1.uuid, T3.language FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN foreign_data AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'legacy'"}
{"db_id": "card_games", "question": "Write down the ruling of Beacon of Immortality.", "query": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality'"}
{"db_id": "card_games", "question": "How many cards are having future frame version and what are the legality status of these cards?", "query": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.frameVersion = 'future'"}
{"db_id": "card_games", "question": "What are the cards for set OGW? State the colour for these cards.", "query": "SELECT id, colors FROM cards WHERE id IN ( SELECT id FROM set_translations WHERE setCode = 'OGW' )"}
{"db_id": "card_games", "question": "List down the name of cards with original types of Creature - Elf and the date of rulings for these cards.", "query": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'"}
{"db_id": "card_games", "question": "What are the colors of cards from ID 1-20? What are the format of these cards?", "query": "SELECT T1.colors, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.id BETWEEN 1 AND 20"}
{"db_id": "card_games", "question": "Among the Artifact cards, which are black color and comes with foreign languague translation?", "query": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Artifact' AND T1.colors = 'B'"}
{"db_id": "card_games", "question": "On how many cards designed by Volcan Ba\u00c7\u00b5a is its foil non-powerful?", "query": "SELECT COUNT(id) FROM cards WHERE cardKingdomId IS NULL AND cardKingdomFoilId IS NULL AND artist = 'Volcan Ba\u00c7\u00b5a'"}
{"db_id": "card_games", "question": "How many white bordered cards are powerful?", "query": "SELECT COUNT(id) FROM cards WHERE borderColor = 'white' AND cardKingdomId IS NOT NULL AND cardKingdomFoilId IS NOT NULL"}
{"db_id": "card_games", "question": "How many cards designed by UDON and available in mtgo print type has a starting maximum hand size of -1?", "query": "SELECT COUNT(id) FROM cards WHERE hAND = '-1' AND artist = 'UDON' AND Availability = 'print' AND type = 'mtgo'"}
{"db_id": "card_games", "question": "Lists all types of cards available in arena.", "query": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE availability = 'arena' AND subtypes IS NOT NULL AND supertypes IS NOT NULL"}
{"db_id": "card_games", "question": "Lists the set code of all cards translated into Spanish.", "query": "SELECT setCode FROM set_translations WHERE language = 'Spanish'"}
{"db_id": "card_games", "question": "What percentage of legendary frame effect cards have a maximum starting maximun hand\nsize of +3?", "query": "SELECT SUM(CASE WHEN hAND = '+3' THEN 1.0 ELSE 0 END) / COUNT(id) * 100 FROM cards WHERE frameEffects = 'legendary'"}
{"db_id": "card_games", "question": "What is the percentage of Story Spotlight cards that also have a text box? List them by their ID.", "query": "SELECT CAST(SUM(CASE WHEN isTextless = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards WHERE isStorySpotlight = 1"}
{"db_id": "card_games", "question": "Calculate the percentage of cards in Spanish. List them by name.", "query": "SELECT ( SELECT CAST(SUM(CASE WHEN language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data ) FROM foreign_data WHERE language = 'Spanish'"}
{"db_id": "card_games", "question": "Indicates the name of all the languages into which the set whose number of cards is 309 is translated.", "query": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.baseSetSize = 309"}
{"db_id": "card_games", "question": "How many Brazilian Portuguese translated sets are inside the Commander block?", "query": "SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Portuguese (Brazil)' AND T1.block = 'Commander'"}
{"db_id": "card_games", "question": "Lists by ID all Creature-type cards with legal status.", "query": "SELECT T1.id FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T3.status = 'Legal' AND T1.types = 'Creature'"}
{"db_id": "card_games", "question": "Lists all types of cards in German.", "query": "SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL"}
{"db_id": "card_games", "question": "How many null power cards have the \"If you have two Lords of the Pit, you can sacrifice them to each other\" ruling text?", "query": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.power IS NULL OR T1.power LIKE '%*%' AND T2.text = 'If you have two Lords of the Pit, you can sacrifice them to each other'"}
{"db_id": "card_games", "question": "Indicates the number of cards with pre-modern format, ruling text \"This is a triggered mana ability\" that do not have multiple faces.", "query": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN rulings AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'premodern' AND T3.text = 'This is a triggered mana ability.' AND T1.Side IS NULL"}
{"db_id": "card_games", "question": "Is there any card from Erica Yang artist in pauper format and available in paper? If so, indicate its ID.", "query": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'paper'"}
{"db_id": "card_games", "question": "To which artist does the card with the text \"Das perfekte Gegenmittel zu einer dichten Formation\" belong?", "query": "SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.flavorText = 'DAS perfekte Gegenmittel zu einer dichten Formation.'"}
{"db_id": "card_games", "question": "What is the foreign name of the card in French of type Creature, normal layout and black border color, by artist Matthew D. Wilson?", "query": "SELECT name FROM foreign_data WHERE uuid IN ( SELECT uuid FROM cards WHERE types = 'Creature' AND layout = 'normal' AND borderColor = 'black' AND artist = 'Matthew D. Wilson' ) AND language = 'French'"}
{"db_id": "card_games", "question": "How many cards with print rarity have ruling text printed on 10/01/2009?", "query": "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'rare' AND T2.date = '2009-01-10'"}
{"db_id": "card_games", "question": "What language is the set of 180 cards that belongs to the Ravnica block translated into?", "query": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Ravnica' AND T1.baseSetSize = 180"}
{"db_id": "card_games", "question": "What percentage of cards with format commander and legal status do not have a content warning?", "query": "SELECT CAST(SUM(CASE WHEN T1.hasContentWarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'commander' AND T2.status = 'Legal'"}
{"db_id": "card_games", "question": "What percentage of cards without power are in French?", "query": "SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.power IS NULL OR T1.power LIKE '%*%'"}
{"db_id": "card_games", "question": "What percentage of Japanese translated sets are expansion sets?", "query": "SELECT CAST(SUM(CASE WHEN T2.language = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.type = 'expansion'"}
{"db_id": "card_games", "question": "What kind of printing is on the card that Daren Bader created?", "query": "SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader'"}
{"db_id": "card_games", "question": "How many color cards with no borders have been ranked higher than 12000 on EDHRec?", "query": "SELECT COUNT(id) FROM cards WHERE edhrecRank > 12000 AND borderColor = 'borderless'"}
{"db_id": "card_games", "question": "How many cards are oversized, reprinted, and printed for promotions?", "query": "SELECT COUNT(id) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1"}
{"db_id": "card_games", "question": "Please list top three unknown power cards that have promotional types for arena league in alphabetical order.", "query": "SELECT name FROM cards WHERE power IS NULL OR power LIKE '%*%' AND promoTypes = 'arenaleague' ORDER BY name LIMIT 3"}
{"db_id": "card_games", "question": "What is the language of the card with the multiverse number 149934?", "query": "SELECT language FROM foreign_data WHERE multiverseid = 149934"}
{"db_id": "card_games", "question": "Please provide the ids of top three powerful pairs of Kingdom Foil and Kingdom Cards sorted by Kingdom Foil id in alphabetical order.", "query": "SELECT cardKingdomFoilId, cardKingdomId FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL ORDER BY cardKingdomFoilId LIMIT 3"}
{"db_id": "card_games", "question": "What proportion of cards do not have a text box with a normal layout?", "query": "SELECT CAST(SUM(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards"}
{"db_id": "card_games", "question": "What are the card numbers that don't have multiple faces on a single card and have the subtypes Angel and Wizard?", "query": "SELECT id FROM cards WHERE subtypes = 'Angel,Wizard' AND side IS NULL"}
{"db_id": "card_games", "question": "Please provide top three sets that don't appear in Magic: The Gathering Online, along with their names in in alphabetical order.", "query": "SELECT name FROM sets WHERE mtgoCode IS NULL ORDER BY name LIMIT 3"}
{"db_id": "card_games", "question": "What languages are available in the set known as Archenemy on the magic card market and having the code ARC?", "query": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.mcmName = 'Archenemy' AND T2.setCode = 'ARC'"}
{"db_id": "card_games", "question": "What is the name of set number 5 and its translation?", "query": "SELECT T1.name, T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.id = 5 GROUP BY T1.name, T2.translation"}
{"db_id": "card_games", "question": "What is the language and expansion type of set number 206?", "query": "SELECT T2.language, T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.id = 206"}
{"db_id": "card_games", "question": "Please list top two sets of cards with their IDs that have Italian-language cards and are located in the Shadowmoor block in alphabetical order.", "query": "SELECT T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Shadowmoor' AND T2.language = 'Italian' ORDER BY T1.id LIMIT 2"}
{"db_id": "card_games", "question": "Which set is not available outside of the United States and has foil cards with Japanese writing on them? Please include the set ID in your response.", "query": "SELECT T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Japanese' AND T1.isFoilOnly = 1 AND T1.isForeignOnly = 0"}
{"db_id": "card_games", "question": "What is the percentage of the set of cards that have Chinese Simplified as the language and are only available for online games?", "query": "SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' AND T1.isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode"}
{"db_id": "card_games", "question": "How many sets are available just in Japanese and not in Magic: The Gathering Online?", "query": "SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.language = 'Japanese' AND T1.mtgoCode IS NULL"}
{"db_id": "card_games", "question": "How many card border with black color ? List out the card id.", "query": "SELECT id FROM cards WHERE borderColor = 'black' GROUP BY id"}
{"db_id": "card_games", "question": "How many cards have frame effect as extendedart? List out the id of those cards.", "query": "SELECT id FROM cards WHERE frameEffects = 'extendedart' GROUP BY id"}
{"db_id": "card_games", "question": "Among black card borders, which card has full artwork?", "query": "SELECT id FROM cards WHERE borderColor = 'black' AND isFullArt = 1"}
{"db_id": "card_games", "question": "Point out the language of set id \"174\"?", "query": "SELECT language FROM set_translations WHERE id = 174"}
{"db_id": "card_games", "question": "List out the set name of the set code \"ALL\".", "query": "SELECT name FROM sets WHERE code = 'ALL'"}
{"db_id": "card_games", "question": "Which foreign language used by \"A Pedra Fellwar\"?", "query": "SELECT DISTINCT language FROM foreign_data WHERE name = 'A Pedra Fellwar'"}
{"db_id": "card_games", "question": "State the set code of the set with release date of 07/13/2007?", "query": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.releaseDate = '2007-07-13'"}
{"db_id": "card_games", "question": "Mention the base set size and set code of the set that was in block named \"Masques\" and \"Mirage\".", "query": "SELECT DISTINCT T1.baseSetSize, T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.block IN ('Masques', 'Mirage')"}
{"db_id": "card_games", "question": "Give the code of sets have expansion type of 'expansion'?", "query": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'expansion' GROUP BY T2.setCode"}
{"db_id": "card_games", "question": "Name the foreign name of the card that has boros watermark? List out the type of this card.", "query": "SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'boros'"}
{"db_id": "card_games", "question": "What is the language and flavor text of the card that has colorpie watermark? List out the type of this card.", "query": "SELECT DISTINCT T2.language, T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'colorpie'"}
{"db_id": "card_games", "question": "Give the code of sets have expansion commander type?", "query": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'commander'"}
{"db_id": "card_games", "question": "Name the foreign name of the card that has abzan watermark? List out the type of this card.", "query": "SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'abzan'"}
{"db_id": "card_games", "question": "What is the language of the card that has azorius watermark? List out the type of this card.", "query": "SELECT DISTINCT T2.language, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'azorius'"}
{"db_id": "card_games", "question": "Of all the cards that are designed by Aaron Miller, how many of them are incredibly powerful?", "query": "SELECT SUM(CASE WHEN artist = 'Aaron Miller' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) FROM cards"}
{"db_id": "card_games", "question": "How many cards available in paper have a positive starting maximum hand size?", "query": "SELECT SUM(CASE WHEN availability = 'paper' AND hAND LIKE '+%' AND hAND != '+0' THEN 1 ELSE 0 END) FROM cards"}
{"db_id": "card_games", "question": "Please list the names of the cards that have a text box.", "query": "SELECT DISTINCT name FROM cards WHERE isTextless = 0"}
{"db_id": "card_games", "question": "What's the unconverted mana cost of the card \"Ancestor's Chosen\"?", "query": "SELECT DISTINCT manaCost FROM cards WHERE name = 'Ancestor''s Chosen'"}
{"db_id": "card_games", "question": "Among the cards with a white border color, how many of them have unknown power?", "query": "SELECT SUM(CASE WHEN power LIKE '%*%' OR power IS NULL THEN 1 ELSE 0 END) FROM cards WHERE borderColor = 'white'"}
{"db_id": "card_games", "question": "Which of the cards that are a promotional painting have multiple faces on the same card? Please list their names.", "query": "SELECT DISTINCT name FROM cards WHERE isPromo = 1 AND side IS NOT NULL"}
{"db_id": "card_games", "question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?", "query": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'"}
{"db_id": "card_games", "question": "Please list the websites where I can purchase the cards that have the promotional type of \"bundle\".", "query": "SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'bundle'"}
{"db_id": "card_games", "question": "How many artists have designed a card with a black border color and is available in both \"arena\" and \"mtgo\" printing type?", "query": "SELECT COUNT(CASE WHEN availability LIKE '%arena,mtgo%' THEN 1 ELSE NULL END) FROM cards"}
{"db_id": "card_games", "question": "Which card costs more converted mana, \"Serra Angel\" or \"Shrine Keeper\"?", "query": "SELECT name FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1"}
{"db_id": "card_games", "question": "Which artist designed the card whose promotional name is \"Battra, Dark Destroyer\"?", "query": "SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer'"}
{"db_id": "card_games", "question": "What's the Italian name of the set of cards with \"Ancestor's Chosen\" is in?", "query": "SELECT translation FROM set_translations WHERE setCode IN ( SELECT setCode FROM cards WHERE name = 'Ancestor''s Chosen' ) AND language = 'Italian'"}
{"db_id": "card_games", "question": "How many translations are there for the set of cards with \"Angel of Mercy\" in it?", "query": "SELECT COUNT(DISTINCT translation) FROM set_translations WHERE setCode IN ( SELECT setCode FROM cards WHERE name = 'Angel of Mercy' ) AND translation IS NOT NULL"}
{"db_id": "card_games", "question": "Please list the names of the cards in the set \"Hauptset Zehnte Edition\".", "query": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T2.translation = 'Hauptset Zehnte Edition'"}
{"db_id": "card_games", "question": "Among the cards in the set \"Hauptset Zehnte Edition\", how many of them are designed by Adam Rex?", "query": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T2.translation = 'Hauptset Zehnte Edition' AND T1.artist = 'Adam Rex'"}
{"db_id": "card_games", "question": "How many cards are there in the base set of \"Hauptset Zehnte Edition\"?", "query": "SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Hauptset Zehnte Edition'"}
{"db_id": "card_games", "question": "What is the Simplified Chinese translation of the name of the set \"Eighth Edition\"?", "query": "SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.name = 'Eighth Edition' AND T2.language = 'Chinese Simplified'"}
{"db_id": "card_games", "question": "When was the set of cards with \"Ancestor's Chosen\" released?", "query": "SELECT DISTINCT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Ancestor''s Chosen'"}
{"db_id": "card_games", "question": "What is the expansion type of the set \"Hauptset Zehnte Edition\"?", "query": "SELECT T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Hauptset Zehnte Edition'"}
{"db_id": "card_games", "question": "Among the sets in the block \"Ice Age\", how many of them have an Italian translation?", "query": "SELECT COUNT(DISTINCT T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.block = 'Ice Age' AND T2.language = 'Italian' AND T2.translation IS NOT NULL"}
{"db_id": "card_games", "question": "Among the sets of cards that have an Italian translation, how many of them have a base set number of under 10?", "query": "SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation IS NOT NULL AND T1.baseSetSize < 10 AND T2.language = 'Italian'"}
{"db_id": "card_games", "question": "How many cards in the set Coldsnap have a black border color?", "query": "SELECT SUM(CASE WHEN T1.borderColor = 'black' THEN 1 ELSE 0 END) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap'"}
{"db_id": "card_games", "question": "Please list the name of the cards in the set Coldsnap with the highest converted mana cost.", "query": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' ORDER BY T1.convertedManaCost DESC LIMIT 1"}
{"db_id": "card_games", "question": "Which of these artists have designed a card in the set Coldsnap, Jeremy Jarvis, Aaron Miller or Chippy?", "query": "SELECT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE (T2.name = 'Coldsnap' AND T1.artist = 'Chippy') OR (T2.name = 'Coldsnap' AND T1.artist = 'Aaron Miller') OR (T2.name = 'Coldsnap' AND T1.artist = 'Jeremy Jarvis') GROUP BY T1.artist"}
{"db_id": "card_games", "question": "Among the cards with converted mana cost higher than 5 in the set Coldsnap, how many of them have unknown power?", "query": "SELECT SUM(CASE WHEN T1.power LIKE '%*%' OR T1.power IS NULL THEN 1 ELSE 0 END) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.convertedManaCost > 5"}
{"db_id": "card_games", "question": "What is the Italian flavor text of the card \"Ancestor's Chosen\"?", "query": "SELECT T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'Italian'"}
{"db_id": "card_games", "question": "Please list all the foreign languages in which the card \"Ancestor's Chosen\" has a flavor text.", "query": "SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Ancestor''s Chosen'"}
{"db_id": "card_games", "question": "What's the German type of the card \"Ancestor's Chosen\"?", "query": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'German'"}
{"db_id": "card_games", "question": "Please list the Italian text ruling of all the cards in the set Coldsnap.", "query": "SELECT DISTINCT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian'"}
{"db_id": "card_games", "question": "Please list the Italian names of the cards in the set Coldsnap with the highest converted mana cost.", "query": "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian' ORDER BY T2.convertedManaCost DESC LIMIT 1"}
{"db_id": "card_games", "question": "When was the ruling for the card 'Reminisce' created?", "query": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Reminisce'"}
{"db_id": "card_games", "question": "What is the percentage of the cards with a converted mana cost of 7 in the set Coldsnap?", "query": "SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap'"}
{"db_id": "card_games", "question": "What is the percentage of incredibly powerful cards in the set Coldsnap?", "query": "SELECT CAST(SUM(CASE WHEN T1.cardKingdomFoilId IS NOT NULL AND T1.cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap'"}
{"db_id": "card_games", "question": "What's the code for the set which was released on 2017/7/14?", "query": "SELECT code FROM sets WHERE releaseDate = '2017-07-14' GROUP BY releaseDate, code"}
{"db_id": "card_games", "question": "List the keyrune code for the set whose code is 'PKHC'.", "query": "SELECT keyruneCode FROM sets WHERE code = 'PKHC'"}
{"db_id": "card_games", "question": "For the set which had 'SS2' as the code, what is its magic card market id?", "query": "SELECT mcmId FROM sets WHERE code = 'SS2'"}
{"db_id": "card_games", "question": "What's the magic card market name for the set which was released on 2017/6/9?", "query": "SELECT mcmName FROM sets WHERE releaseDate = '2017-06-09'"}
{"db_id": "card_games", "question": "For the set \"From the Vault: Lore\", what is its expansion type?", "query": "SELECT type FROM sets WHERE name = 'FROM the Vault: Lore'"}
{"db_id": "card_games", "question": "For the set \"Commander 2014 Oversized\" , give its parent code.", "query": "SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized'"}
{"db_id": "card_games", "question": "For all cards illustrated by Jim Pavelec. and describe the text of the ruling of these cards. Do these cards have missing or degraded properties and values.", "query": "SELECT T2.text , CASE WHEN T1.hasContentWarning = 1 THEN 'YES' ELSE 'NO' END FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Jim Pavelec'"}
{"db_id": "card_games", "question": "What was the release date for the set which card \"Evacuation\" in it?", "query": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'"}
{"db_id": "card_games", "question": "What is the number of cards are there in the set of \"Rinascita di Alara\"?", "query": "SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Rinascita di Alara'"}
{"db_id": "card_games", "question": "List the expansion type of the set \"Huiti\u00e8me \u00e9dition\".", "query": "SELECT type FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE translation = 'Huiti\u00e8me \u00e9dition' )"}
{"db_id": "card_games", "question": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in?", "query": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French' AND T2.translation IS NOT NULL"}
{"db_id": "card_games", "question": "How many translations of the name of the set \"Salvat 2011\"?", "query": "SELECT COUNT(DISTINCT T2.translation) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.name = 'Salvat 2011' AND T2.translation IS NOT NULL"}
{"db_id": "card_games", "question": "Tell the Japanese name of the set which card \"Fellwar Stone\" is in it.", "query": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL"}
{"db_id": "card_games", "question": "Which card name in the set 'Journey into Nyx Hero's Path' has the highest converted mana cost.", "query": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Journey into Nyx Hero''s Path' ORDER BY T1.convertedManaCost DESC LIMIT 1"}
{"db_id": "card_games", "question": "What is the release date for the set \"Ola de fr\u00edo\"?", "query": "SELECT T1.releaseDate FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Ola de fr\u00edo'"}
{"db_id": "card_games", "question": "What was the expansion type for the set which card \"Samite Pilgrim\" in it?", "query": "SELECT type FROM sets WHERE code IN ( SELECT setCode FROM cards WHERE name = 'Samite Pilgrim' )"}
{"db_id": "card_games", "question": "How many cards are there in the set 'World Championship Decks 2004' with the converted mana cost as '3'.", "query": "SELECT COUNT(id) FROM cards WHERE setCode IN ( SELECT code FROM sets WHERE name = 'World Championship Decks 2004' ) AND convertedManaCost = 3"}
{"db_id": "card_games", "question": "Show the Simplified Chinese translation of the name of the set \"Mirrodin\"?", "query": "SELECT translation FROM set_translations WHERE setCode IN ( SELECT code FROM sets WHERE name = 'Mirrodin' ) AND language = 'Chinese Simplified'"}
{"db_id": "card_games", "question": "For all the set of cards that has Japanese translation, what is the percentage of them are only available in non-foil?", "query": "SELECT CAST(SUM(CASE WHEN isNonFoilOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Japanese' )"}
{"db_id": "card_games", "question": "For all the set of cards that has Brazil Portuguese translation, what is the percentage of them are only available online?", "query": "SELECT CAST(SUM(CASE WHEN isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Portuguese (Brazil)' )"}
{"db_id": "card_games", "question": "What are the available printing types of the cards that doesn't have a text box created by Aleksi Briclot?", "query": "SELECT DISTINCT availability FROM cards WHERE artist = 'Aleksi Briclot' AND isTextless = 1"}
{"db_id": "card_games", "question": "What is the unique id of the set that has the highest number of cards?", "query": "SELECT id FROM sets ORDER BY baseSetSize DESC LIMIT 1"}
{"db_id": "card_games", "question": "Among the cards that doesn't have multiple faces on the same card, who is the illustrator of the card art that has the highest cost of converted mana?", "query": "SELECT artist FROM cards WHERE side IS NULL ORDER BY convertedManaCost DESC LIMIT 1"}
{"db_id": "card_games", "question": "What is the most common visual frame effects among the incredibly powerful foils?", "query": "SELECT frameEffects FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL GROUP BY frameEffects ORDER BY COUNT(frameEffects) DESC LIMIT 1"}
{"db_id": "card_games", "question": "How many cards with unknown power that can't be found in foil is in duel deck A?", "query": "SELECT SUM(CASE WHEN power LIKE '%*%' OR power IS NULL THEN 1 ELSE 0 END) FROM cards WHERE hasFoil = 0 AND duelDeck = 'a'"}
{"db_id": "card_games", "question": "Among the sets whose expansion type is Commander, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set.", "query": "SELECT id FROM sets WHERE type = 'commander' ORDER BY totalSetSize DESC LIMIT 1"}
{"db_id": "card_games", "question": "When was the oldest mythic card released and what are its legal play formats?", "query": "SELECT T1.originalReleaseDate, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T1.originalReleaseDate IS NOT NULL AND T2.status = 'Legal' ORDER BY T1.originalReleaseDate LIMIT 1"}
{"db_id": "card_games", "question": "How many cards did Volkan Ba\u00c7\u00b5a illustrated whose foreign language is in French?", "query": "SELECT COUNT(T3.id) FROM ( SELECT T1.id FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Volkan Ba\u01f5a' AND T2.language = 'French' GROUP BY T1.id ) AS T3"}
{"db_id": "card_games", "question": "How many rare enchantment Abundance cards are there whose play format status are all legal?", "query": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.rarity = 'rare' AND T1.types = 'Enchantment' AND T1.name = 'Abundance' AND T2.status = 'Legal'"}
{"db_id": "card_games", "question": "What is the language of the \"Battlebond\" set?", "query": "SELECT language FROM set_translations WHERE id IN ( SELECT id FROM sets WHERE name = 'Battlebond' )"}
{"db_id": "card_games", "question": "Which cards are ranked 1st on EDHRec? List all of the cards name and its banned play format.", "query": "SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'Banned' GROUP BY T1.name, T2.format"}
{"db_id": "card_games", "question": "List the artists who illustrated cards with black borders which are available only in arena.", "query": "SELECT DISTINCT artist FROM cards WHERE availability = 'arena' AND BorderColor = 'black'"}
{"db_id": "card_games", "question": "Find the uuid of cards in which the old school format is restricted or banned.", "query": "SELECT uuid FROM legalities WHERE format = 'oldschool' AND (status = 'Banned' OR status = 'Restricted')"}
{"db_id": "card_games", "question": "Among the card designed by Matthew D. Wilson, how many are available only in the paper?", "query": "SELECT COUNT(id) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper'"}
{"db_id": "card_games", "question": "What are the rulings for the card named and designed by Kev Walker? List them in descending order of dates.", "query": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Kev Walker' ORDER BY T2.date DESC"}
{"db_id": "card_games", "question": "List the names of all the cards in the set Hour of Devastation and find the formats in which these cards are legal.", "query": "SELECT DISTINCT T2.name , CASE WHEN T1.status = 'Legal' THEN T1.format ELSE NULL END FROM legalities AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid WHERE T2.setCode IN ( SELECT code FROM sets WHERE name = 'Hour of Devastation' )"}
{"db_id": "card_games", "question": "Find and list the names of sets which doesn't have Japanese translation but have Korean translation.", "query": "SELECT name FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Korean' AND language NOT LIKE '%Japanese%' )"}
{"db_id": "codebase_community", "question": "Which user has a higher reputation, Harlan or Jarrod Dixon?", "query": "SELECT DisplayName FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') AND Reputation = ( SELECT MAX(Reputation) FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') )"}
{"db_id": "codebase_community", "question": "How many users last accessed the website after 2014/9/1?", "query": "SELECT COUNT(Id) FROM users WHERE date(LastAccessDate) > '2014-09-01'"}
{"db_id": "codebase_community", "question": "What is the display name of the user who has the most number of views?", "query": "SELECT DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users )"}
{"db_id": "codebase_community", "question": "Among the users who have more than 100 upvotes, how many of them have more then 1 downvotes?", "query": "SELECT COUNT(Id) FROM users WHERE Upvotes > 100 AND Downvotes > 1"}
{"db_id": "codebase_community", "question": "How many posts does the user csgillespie own?", "query": "SELECT COUNT(T1.id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'"}
{"db_id": "codebase_community", "question": "Please list the titles of the posts owned by the user csgillespie?", "query": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'"}
{"db_id": "codebase_community", "question": "Who is the owner of the post \"Eliciting priors from experts\"?", "query": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors FROM experts'"}
{"db_id": "codebase_community", "question": "What is the title of the post that is owned by csgillespie and has the highest popularity?", "query": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' ORDER BY T1.ViewCount DESC LIMIT 1"}
{"db_id": "codebase_community", "question": "What is the display name of the user who is the owner of the most valuable post?", "query": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id ORDER BY T1.FavoriteCount DESC LIMIT 1"}
{"db_id": "codebase_community", "question": "What is the total number of comments of all the posts owned by csgillespie?", "query": "SELECT SUM(T1.CommentCount) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'"}
{"db_id": "codebase_community", "question": "For the post that got the most number of answers owned by csgillespie, how many answers did it get?", "query": "SELECT MAX(T1.AnswerCount) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'"}
{"db_id": "codebase_community", "question": "What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"?", "query": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does NOT mean causation'"}
{"db_id": "codebase_community", "question": "Among the posts owned by csgillespie, how many of them are root posts?", "query": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' AND T1.ParentId IS NULL"}
{"db_id": "codebase_community", "question": "Please list the display names of all the users who owns a post that is well-finished.", "query": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.ClosedDate IS NOT NULL"}
{"db_id": "codebase_community", "question": "Among the posts owned by an elder user, how many of them have a score of over 19?", "query": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score >= 20 AND T2.Age > 65"}
{"db_id": "codebase_community", "question": "What is the location of the owner of the post \"Eliciting priors from experts\"?", "query": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors FROM experts'"}
{"db_id": "codebase_community", "question": "From which post is the tag \"bayesian\" excerpted from? Please give the body of the post.", "query": "SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.ExcerptPostId WHERE T1.TagName = 'bayesian'"}
{"db_id": "codebase_community", "question": "From which post is the most popular tag excerpted from? Please give the body of the post.", "query": "SELECT Body FROM posts WHERE id = ( SELECT ExcerptPostId FROM tags ORDER BY Count DESC LIMIT 1 )"}
{"db_id": "codebase_community", "question": "How many badges has the user csgillespie obtained?", "query": "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'"}
{"db_id": "codebase_community", "question": "What is the display name of the user who has obtained the most number of badges?", "query": "SELECT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T2.DisplayName ORDER BY COUNT(T1.Id) DESC LIMIT 1"}
{"db_id": "codebase_community", "question": "What is the average score of the posts owned by the user csgillespie?", "query": "SELECT AVG(T1.Score) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'"}
{"db_id": "codebase_community", "question": "What is the average number of badges obtained by a user with over 200 views?", "query": "SELECT CAST(COUNT(T1.Id) AS REAL) / COUNT(DISTINCT T2.DisplayName) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Views > 200"}
{"db_id": "codebase_community", "question": "How many votes did the user No.58 take on 2010/7/19?", "query": "SELECT COUNT(Id) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19'"}
{"db_id": "codebase_community", "question": "Indicate the creation date of the maximum number of votes.", "query": "SELECT CreationDate FROM votes GROUP BY CreationDate ORDER BY COUNT(Id) DESC LIMIT 1"}
{"db_id": "codebase_community", "question": "Give the number of \"Revival\" badges.", "query": "SELECT COUNT(Id) FROM badges WHERE Name = 'Revival'"}
{"db_id": "codebase_community", "question": "What is the title for the post which got the highest score comment?", "query": "SELECT Title FROM posts WHERE Id = ( SELECT PostId FROM comments ORDER BY Score DESC LIMIT 1 )"}
{"db_id": "codebase_community", "question": "For the post which got 1910 view counts, how many comments does it get?", "query": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ViewCount = 1910"}
{"db_id": "codebase_community", "question": "User No.3025 gave a comment at 20:29:39 on 2014/4/23 to a post, how many favorite counts did that post get?", "query": "SELECT T1.FavoriteCount FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.CreationDate = '2014-04-23 20:29:39' AND T2.UserId = 3025"}
{"db_id": "codebase_community", "question": "Give the only one comment text of the post with parent id 107829.", "query": "SELECT T2.Text FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ParentId = 107829 AND T1.CommentCount = 1"}
{"db_id": "codebase_community", "question": "For the owner user of post No. 65041, what is his/her reputation points?", "query": "SELECT T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Id = 65041"}
{"db_id": "codebase_community", "question": "For the user with the display name of \"Tiago Pasqualini\", how many posts did he/she own?", "query": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Tiago Pasqualini'"}
{"db_id": "codebase_community", "question": "Provide the display name of the user who made the vote No.381800.", "query": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T2.Id = 381800"}
{"db_id": "codebase_community", "question": "Give the number of votes for the post about data visualization.", "query": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T1.Title LIKE '%data visualization%'"}
{"db_id": "codebase_community", "question": "For the user whose display name is \"DatEpicCoderGuyWhoPrograms\", what is his/her badge's name?", "query": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'DatEpicCoderGuyWhoPrograms'"}
{"db_id": "codebase_community", "question": "For the user No.24, how many times is the number of his/her posts compared to his/her votes?", "query": "SELECT CAST(COUNT(T2.Id) AS REAL) / COUNT(DISTINCT T1.Id) FROM votes AS T1 INNER JOIN posts AS T2 ON T1.UserId = T2.OwnerUserId WHERE T1.UserId = 24"}
{"db_id": "codebase_community", "question": "How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get?", "query": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'"}
{"db_id": "codebase_community", "question": "Write the contents of comments with a score of 17.", "query": "SELECT Text FROM comments WHERE Score = 17"}
{"db_id": "codebase_community", "question": "Which user has the website URL listed at 'http://blue-feet.com?'", "query": "SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://blue-feet.com?'"}
{"db_id": "codebase_community", "question": "What is the badge name that user 'SilentGhost' obtained?", "query": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'SilentGhost'"}
{"db_id": "codebase_community", "question": "Name the user that commented 'thank you user93!'", "query": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Text = 'thank you user93!'"}
{"db_id": "codebase_community", "question": "Write all comments made by user 'A Lion.'", "query": "SELECT T2.Text FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'A Lion'"}
{"db_id": "codebase_community", "question": "Which user made a post titled 'Understanding what Dassault iSight is doing?' and how much is the reputation of the user?", "query": "SELECT T1.DisplayName, T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Title = 'Understanding what Dassault iSight is doing?'"}
{"db_id": "codebase_community", "question": "Write all comments made on the post titled 'How does gentle boosting differ from AdaBoost?'", "query": "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'How does gentle boosting differ FROM AdaBoost?'"}
{"db_id": "codebase_community", "question": "Name 10 users with the badge name 'Necromancer.'", "query": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10"}
{"db_id": "codebase_community", "question": "Who is the editor of the post titled 'Open source tools for visualizing multi-dimensional data?'", "query": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Open source tools for visualizing multi-dimensional data?'"}
{"db_id": "codebase_community", "question": "List the title of posts which were edited by Vebjorn Ljosa.", "query": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Vebjorn Ljosa'"}
{"db_id": "codebase_community", "question": "What is the total score of the posts edited by Yevgeny and include the user's website URL.", "query": "SELECT SUM(T1.Score), T2.WebsiteUrl FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Yevgeny' GROUP BY T2.WebsiteUrl"}
{"db_id": "codebase_community", "question": "Write all the comments left by users who edited the post titled 'Why square the difference instead of taking the absolute value in standard deviation?'", "query": "SELECT T2.Comment FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'"}
{"db_id": "codebase_community", "question": "How much is the total bounty amount of the post titled about 'data'", "query": "SELECT SUM(T2.BountyAmount) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T1.Title LIKE '%data%'"}
{"db_id": "codebase_community", "question": "Which user added a bounty amount of 50 to the post titled 'Variance of a difference in marginal proportions in a three-way contingency table?'", "query": "SELECT T3.DisplayName FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId INNER JOIN users AS T3 ON T3.Id = T2.UserId WHERE T2.BountyAmount = 50 AND T1.Title = 'Variance of a difference in marginal proportions in a three-way contingency table'"}
{"db_id": "codebase_community", "question": "Give the total number of comments posted by user ID 13.", "query": "SELECT COUNT(Id) FROM comments WHERE UserId = 13"}
{"db_id": "codebase_community", "question": "Which user ID has the highest reputation?", "query": "SELECT Id FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )"}
{"db_id": "codebase_community", "question": "Which user ID has the lowest view?", "query": "SELECT Id FROM users WHERE Views = ( SELECT MIN(Views) FROM users )"}
{"db_id": "codebase_community", "question": "How many users are awarded with more than 5 badges?", "query": "SELECT UserId FROM ( SELECT UserId, COUNT(Name) AS num FROM badges GROUP BY UserId ) T WHERE T.num > 5"}
{"db_id": "codebase_community", "question": "How many users from New York have a teacher and supporter badge?", "query": "SELECT COUNT(DISTINCT T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name IN ('Supporter', 'Teachers') AND T2.Location = 'New York'"}
{"db_id": "codebase_community", "question": "Which user created post ID 1 and what is the reputation of this user?", "query": "SELECT T2.Id, T2.Reputation FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.PostId = 1"}
{"db_id": "codebase_community", "question": "Which user have only one post history per post and having at least 1000 views?", "query": "SELECT DISTINCT T2.UserId FROM users AS T1 INNER JOIN postHistory AS T2 ON T2.UserId = T2.Id WHERE T2.PostHistoryTypeID = 1 AND T1.Views >= 1000"}
{"db_id": "codebase_community", "question": "How many users from India have the teacher badges?", "query": "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Location = 'India' AND T1.Name = 'Teacher'"}
{"db_id": "codebase_community", "question": "List out all post that are related to post ID 61217 and what is the popularity of this post?", "query": "SELECT T1.ViewCount FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T2.PostId = 61217"}
{"db_id": "codebase_community", "question": "What is the score and the link type ID for post ID 395?", "query": "SELECT T1.Score, T2.LinkTypeId FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T2.PostId = 395"}
{"db_id": "codebase_community", "question": "List out all post ID with score more than 60 and list out all the user ID that created these post.", "query": "SELECT PostId, UserId FROM postHistory WHERE PostId IN ( SELECT Id FROM posts WHERE Score > 60 )"}
{"db_id": "codebase_community", "question": "What is the average of the up votes and the average user age for users creating more than 10 posts?", "query": "SELECT AVG(T2.UpVotes), AVG(T2.Age) FROM postHistory AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T2.Id, T2.UpVotes HAVING COUNT(*) > 10"}
{"db_id": "codebase_community", "question": "How many users obtained the \"Announcer\" badge?", "query": "SELECT COUNT(id) FROM badges WHERE Name = 'Announcer'"}
{"db_id": "codebase_community", "question": "List out the name of badges that users obtained on 7/19/2010 7:39:08 PM.", "query": "SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:08'"}
{"db_id": "codebase_community", "question": "How many positive comments are there on the list?", "query": "SELECT COUNT(id) FROM comments WHERE score > 60"}
{"db_id": "codebase_community", "question": "State the detailed content of the comment which was created on 7/19/2010 7:25:47 PM.", "query": "SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:25:47'"}
{"db_id": "codebase_community", "question": "How many posts have a score of 10 on the list?", "query": "SELECT COUNT(id) FROM posts WHERE Score = 10"}
{"db_id": "codebase_community", "question": "What are the names of badges that users who have the highest reputation obtained?", "query": "SELECT T2.name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId ORDER BY T1.Reputation DESC LIMIT 1"}
{"db_id": "codebase_community", "question": "Mention the reputation of users who had obtained the badge on 7/19/2010 7:39:08 PM.", "query": "SELECT T1.Reputation FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Date = '2010-07-19 19:39:08'"}
{"db_id": "codebase_community", "question": "What is the name of badge that the user whose display name is \"Pierre\" obtained?", "query": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Pierre'"}
{"db_id": "codebase_community", "question": "List out the dates that users who are located in Rochester, NY obtained their badges?", "query": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Rochester, NY'"}
{"db_id": "codebase_community", "question": "What is the comment's rating score of the post which was created on 7/19/2010 7:14:43 PM", "query": "SELECT T1.Score FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.CreationDate = '2010-07-19 19:14:43'"}
{"db_id": "codebase_community", "question": "What is the detailed content of the comment of the post which was created on 7/19/2010 7:37:33 PM?", "query": "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.CreationDate = '2010-07-19 19:37:33'"}
{"db_id": "codebase_community", "question": "List out the age of users who located in Vienna, Austria obtained the badge?", "query": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Vienna, Austria'"}
{"db_id": "codebase_community", "question": "How many adults who obtained the badge Supporter?", "query": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Supporter' AND T1.Age BETWEEN 19 AND 65"}
{"db_id": "codebase_community", "question": "State the number of views of users who obtained the badge on 7/19/2010 7:39:08 PM.", "query": "SELECT T1.Views FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Date = '2010-07-19 19:39:08'"}
{"db_id": "codebase_community", "question": "What are the name of badges that users who have the lowest reputation obtained?", "query": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId ORDER BY T1.Reputation LIMIT 1"}
{"db_id": "codebase_community", "question": "State the name of badge that the user whose display name is \"Sharpie\" obtained.", "query": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sharpie'"}
{"db_id": "codebase_community", "question": "How many elders obtained the \"Supporter\" badge?", "query": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Age > 65 AND T2.Name = 'Supporter'"}
{"db_id": "codebase_community", "question": "What is the name of user with the ID of 30?", "query": "SELECT DisplayName FROM users WHERE Id = 30"}
{"db_id": "codebase_community", "question": "How many users were from New York?", "query": "SELECT COUNT(Id) FROM users WHERE Location = 'New York'"}
{"db_id": "codebase_community", "question": "How many users were adult?", "query": "SELECT COUNT(id) FROM users WHERE Age BETWEEN 19 AND 65"}
{"db_id": "codebase_community", "question": "Which users have the highest number of views?", "query": "SELECT Id, DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users )"}
{"db_id": "codebase_community", "question": "What is the name of tags used by John Stauffer's?", "query": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'John Stauffer'"}
{"db_id": "codebase_community", "question": "How many posts were created by Daniel Vassallo?", "query": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Daniel Vassallo'"}
{"db_id": "codebase_community", "question": "How many votes were made by Harlan?", "query": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN votes AS T3 ON T3.PostId = T2.PostId WHERE T1.DisplayName = 'Harlan'"}
{"db_id": "codebase_community", "question": "Which post by slashnick has the most answers count? State the post ID.", "query": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'slashnick' ORDER BY T3.AnswerCount DESC LIMIT 1"}
{"db_id": "codebase_community", "question": "Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity?", "query": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Harvey Motulsky' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1"}
{"db_id": "codebase_community", "question": "How many posts by Matt Parker have more than 100 votes?", "query": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id INNER JOIN votes AS T4 ON T4.PostId = T3.Id WHERE T1.DisplayName = 'Matt Parker' GROUP BY T2.PostId, T4.Id HAVING COUNT(T4.Id) > 100"}
{"db_id": "codebase_community", "question": "How many negative comments did Neil McGuigan get in his posts?", "query": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId INNER JOIN postHistory AS T3 ON T2.PostId = T3.PostId WHERE T1.DisplayName = 'Neil McGuigan' AND T2.score < 60"}
{"db_id": "codebase_community", "question": "State all the tags used by Mark Meckes in his posts that have more than 10 comment counts.", "query": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId WHERE T1.DisplayName = 'Mark Meckes' AND T3.CommentCount > 10"}
{"db_id": "codebase_community", "question": "How many posts were created on 21st July, 2010?", "query": "SELECT COUNT(id) FROM postHistory WHERE date(CreationDate) = '2010-07-21'"}
{"db_id": "codebase_community", "question": "What are the display names and ages of user who got the highest in views?", "query": "SELECT DisplayName, Age FROM users WHERE Views = ( SELECT MAX(Views) FROM users )"}
{"db_id": "codebase_community", "question": "Provide the last edit date and last edit user ID for the post \"Detecting a given face in a database of facial images\".", "query": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'"}
{"db_id": "codebase_community", "question": "How many negative comments were given by user ID 13?", "query": "SELECT COUNT(Id) FROM comments WHERE UserId = 13 AND Score < 60"}
{"db_id": "codebase_community", "question": "Describe the post title which got positive comments and display names of the users who posted those comments.", "query": "SELECT T1.Title, T2.UserDisplayName FROM posts AS T1 INNER JOIN comments AS T2 ON T2.PostId = T2.Id WHERE T1.Score > 60"}
{"db_id": "codebase_community", "question": "Provide the users' display names and available website URLs of the post with favorite count of more than 150.", "query": "SELECT T1.DisplayName, T1.WebsiteUrl FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.FavoriteCount > 150"}
{"db_id": "codebase_community", "question": "Describe the post history counts and last edit date of the post title \"What is the best introductory Bayesian statistics textbook?\"", "query": "SELECT T1.Id, T2.LastEditDate FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'What is the best introductory Bayesian statistics textbook?'"}
{"db_id": "codebase_community", "question": "Describe the last accessed date and location of the users who received the outliers badge.", "query": "SELECT T2.LastAccessDate, T2.Location FROM badges AS T1 INNER JOIN users AS T2 ON T1.Id = T1.UserId WHERE T1.Name = 'Outliers'"}
{"db_id": "codebase_community", "question": "Provide the related post title of \"How to tell if something happened in a data set which monitors a value over time\".", "query": "SELECT T1.RelatedPostId FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.Id = T1.PostId WHERE T2.Title = 'How to tell if something happened in a data set which monitors a value over time'"}
{"db_id": "codebase_community", "question": "What is the owner's display name of the most popular post?", "query": "SELECT DisplayName FROM users WHERE Id = ( SELECT OwnerUserId FROM posts ORDER BY ViewCount DESC LIMIT 1 )"}
{"db_id": "codebase_community", "question": "Mention the display name and location of the user who owned the excerpt post with hypothesis-testing tag.", "query": "SELECT T3.DisplayName, T3.Location FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id INNER JOIN users AS T3 ON T3.Id = T2.OwnerUserId WHERE T1.TagName = 'hypothesis-testing'"}
{"db_id": "codebase_community", "question": "Write down the related posts titles and link type IDs of the post \"What are principal component scores?\".", "query": "SELECT T2.RelatedPostId, T2.LinkTypeId FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'What are principal component scores?'"}
{"db_id": "codebase_community", "question": "Describe the display name of the parent ID for child post with the highest score.", "query": "SELECT DisplayName FROM users WHERE Id = ( SELECT OwnerUserId FROM posts WHERE ParentId IS NOT NULL ORDER BY Score DESC LIMIT 1 )"}
{"db_id": "codebase_community", "question": "Under the vote type of 8, provide the display names and websites URLs of the user who got the highest bounty amount.", "query": "SELECT DisplayName, WebsiteUrl FROM users WHERE Id = ( SELECT UserId FROM votes WHERE VoteTypeId = 8 ORDER BY BountyAmount DESC LIMIT 1 )"}
{"db_id": "codebase_community", "question": "What are the titles of the top 5 posts with the highest popularity?", "query": "SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 5"}
{"db_id": "codebase_community", "question": "How many tags have post count between 5,000 to 7,000?", "query": "SELECT COUNT(Id) FROM tags WHERE Count BETWEEN 5000 AND 7000"}
{"db_id": "codebase_community", "question": "What is the owner user id of the most valuable post?", "query": "SELECT OwnerUserId FROM posts WHERE FavoriteCount = ( SELECT MAX(FavoriteCount) FROM posts )"}
{"db_id": "codebase_community", "question": "How old is the most influential user?", "query": "SELECT Age FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )"}
{"db_id": "codebase_community", "question": "What is the id of the youngest user?", "query": "SELECT Id FROM users WHERE Age = ( SELECT MIN(Age) FROM users )"}
{"db_id": "codebase_community", "question": "What is the score of the post with the most popular tag?", "query": "SELECT Score FROM posts WHERE Id = ( SELECT ExcerptPostId FROM tags ORDER BY Count DESC LIMIT 1 )"}
{"db_id": "codebase_community", "question": "Among the posts that were voted by user 1465, what is the id of the most valuable post?", "query": "SELECT T2.Id FROM votes AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = 1465 ORDER BY T2.FavoriteCount DESC LIMIT 1"}
{"db_id": "codebase_community", "question": "What is the title of the post with the oldest post link?", "query": "SELECT T1.Title FROM posts AS T1 INNER JOIN postLinks AS T2 ON T2.PostId = T1.Id ORDER BY T1.CreaionDate LIMIT 1"}
{"db_id": "codebase_community", "question": "What is the display name of the user who acquired the highest amount of badges?", "query": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId GROUP BY T1.DisplayName ORDER BY COUNT(T1.Id) DESC LIMIT 1"}
{"db_id": "codebase_community", "question": "When did \"chl\" cast its first vote in a post?", "query": "SELECT T2.CreationDate FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'chl' ORDER BY T2.CreationDate LIMIT 1"}
{"db_id": "codebase_community", "question": "What is the date when the youngest user made his or her first post?", "query": "SELECT T2.CreaionDate FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Age IS NOT NULL ORDER BY T1.Age, T2.CreaionDate LIMIT 1"}
{"db_id": "codebase_community", "question": "Among the users located in United Kingdom, how many users whose post have a total favorite amount of 4 or more?", "query": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Location = 'United Kingdom' AND T2.FavoriteCount >= 4"}
{"db_id": "codebase_community", "question": "What is the average number of posts voted by the oldest users?", "query": "SELECT AVG(PostId) FROM votes WHERE UserId IN ( SELECT Id FROM users WHERE Age = ( SELECT MAX(Age) FROM users ) )"}
{"db_id": "codebase_community", "question": "Who has the highest reputation? Please give the display name.", "query": "SELECT DisplayName FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )"}
{"db_id": "codebase_community", "question": "How many users whose reputations are higher than 2000 and the number of views is higher than 1000?", "query": "SELECT COUNT(id) FROM users WHERE Reputation > 2000 AND Views > 1000"}
{"db_id": "codebase_community", "question": "Please list all display names of users who are adults.", "query": "SELECT DisplayName FROM users WHERE Age BETWEEN 19 AND 65"}
{"db_id": "codebase_community", "question": "Which post by Harvey Motulsky has the most views? Please give the id and title of this post.", "query": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Harvey Motulsky' ORDER BY T2.ViewCount DESC LIMIT 1"}
{"db_id": "codebase_community", "question": "Which post has the highest score? Please give its id and title's name.", "query": "SELECT T1.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId ORDER BY T2.Score DESC LIMIT 1"}
{"db_id": "codebase_community", "question": "What is the average score of Stephen Turner's posts?", "query": "SELECT AVG(T2.Score) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Stephen Turner'"}
{"db_id": "codebase_community", "question": "Identify the total views on the post 'Computer Game Datasets'. Name the user who posted it.", "query": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T1.Text = 'Computer Game Datasets'"}
{"db_id": "codebase_community", "question": "Identify the total number of posts with views above average.", "query": "SELECT Id FROM posts WHERE ViewCount > ( SELECT AVG(ViewCount) FROM posts )"}
{"db_id": "codebase_community", "question": "How many comments were added to the post with the highest score?", "query": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId GROUP BY T1.Id ORDER BY SUM(T1.Score) DESC LIMIT 1"}
{"db_id": "codebase_community", "question": "Identify the number of posts that have been viewed over 35000 times but have received no comments from other users.", "query": "SELECT COUNT(Id) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0"}
{"db_id": "codebase_community", "question": "Identify the display name and location of the user, who was the last to edit the post with ID 183.", "query": "SELECT T2.DisplayName, T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.Id = 183 ORDER BY T1.LastEditDate DESC LIMIT 1"}
{"db_id": "codebase_community", "question": "Identify the latest badge awarded to the user with the display name Emmett.", "query": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Emmett' ORDER BY T1.Date DESC LIMIT 1"}
{"db_id": "codebase_community", "question": "Identify the number of adult users who have cast over 5000 upvotes.", "query": "SELECT COUNT(Id) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000"}
{"db_id": "codebase_community", "question": "How long did it take the user, known by his or her display name 'Zolomon' to get the badge? Count from the date the user's account was created.", "query": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Zolomon'"}
{"db_id": "codebase_community", "question": "Provide the text of the latest comment to the post with the title 'Analysing wind data with R' and the display name of the user who left it.", "query": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Analysing wind data with R' ORDER BY T1.CreationDate DESC LIMIT 1"}
{"db_id": "codebase_community", "question": "Count the number of posts with a tag specified as 'careers'.", "query": "SELECT COUNT(Id) FROM tags WHERE TagName = 'careers'"}
{"db_id": "codebase_community", "question": "What is the reputation and view count of the user, who is known by his or her display name 'Jarrod Dixon'?", "query": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'"}
{"db_id": "codebase_community", "question": "How many comments and answers were left by the users on the post with the title 'Clustering 1D data'?", "query": "SELECT COUNT(id) FROM posts WHERE Title = 'Clustering 1D data'"}
{"db_id": "codebase_community", "question": "When did the user known as 'IrishStat' create his or her account?", "query": "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'"}
{"db_id": "codebase_community", "question": "Identify the number of posts that offer a bounty amount over 30.", "query": "SELECT COUNT(id) FROM votes WHERE BountyAmount >= 30"}
{"db_id": "codebase_community", "question": "Among all the posts posted by the most influential user, identify the percentage with a score above 50.", "query": "SELECT CAST(SUM(CASE WHEN T2.Score >= 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Id) FROM users T1 INNER JOIN posts T2 ON T1.Id = T2.OwnerUserId INNER JOIN ( SELECT MAX(Reputation) AS max_reputation FROM users ) T3 ON T1.Reputation = T3.max_reputation"}
{"db_id": "codebase_community", "question": "How many posts have a score less than 20?", "query": "SELECT COUNT(id) FROM posts WHERE Score < 20"}
{"db_id": "codebase_community", "question": "Among the tags with tag ID below 15, how many of them have 20 count of posts and below?", "query": "SELECT COUNT(id) FROM tags WHERE Count <= 20 AND Id < 15"}
{"db_id": "codebase_community", "question": "What is the excerpt post ID and wiki post ID of the tag named sample?", "query": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'"}
{"db_id": "codebase_community", "question": "Give the user's reputation and up vote number of the user that commented \"fine, you win :)\".", "query": "SELECT T2.Reputation, T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'fine, you win :)'"}
{"db_id": "codebase_community", "question": "Give the texts commented on the post titled \"How can I adapt ANOVA for binary data?\".", "query": "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'How can I adapt ANOVA for binary data?'"}
{"db_id": "codebase_community", "question": "Among the posts with views ranging from 100 to 150, what is the comment with the highest score?", "query": "SELECT Text FROM comments WHERE PostId IN ( SELECT Id FROM posts WHERE ViewCount BETWEEN 100 AND 150 ) ORDER BY Score DESC LIMIT 1"}
{"db_id": "codebase_community", "question": "List the creation date and age of the user that commented \"@Jason Punyon in particular gets a humorless downvote for removing my \"verboten\" tag! ;-)\".", "query": "SELECT T2.CreationDate, T2.Age FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.text = '@Jason Punyon in particular gets a humorless downvote for removing my \"verboten\" tag! -)'"}
{"db_id": "codebase_community", "question": "In comments with 0 score, how many of the posts have view count lower than 5?", "query": "SELECT COUNT(T1.Id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.ViewCount < 5 AND T2.Score = 0"}
{"db_id": "codebase_community", "question": "In posts with 1 comment, how many of the comments have 0 score?", "query": "SELECT COUNT(T1.id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.CommentCount = 1 AND T2.Score = 0"}
{"db_id": "codebase_community", "question": "Among products comments with 0 score, what is the total number of users ages 40 years old?", "query": "SELECT COUNT(T1.id) FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score = 0 AND T2.Age = 40"}
{"db_id": "codebase_community", "question": "What is the post ID and the comments commented in the post titled by \"Group differences on a five point Likert item\"?", "query": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Group differences on a five point Likert item'"}
{"db_id": "codebase_community", "question": "What is the up vote number of the user that commented \"R is also lazy evaluated.\"?", "query": "SELECT T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'R is also lazy evaluated.'"}
{"db_id": "codebase_community", "question": "List the comments commented by the user with a username of \"Random\".", "query": "SELECT T1.Text FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Random'"}
{"db_id": "codebase_community", "question": "In comments with score between 1 to 5, list down the display names of the users with 0 down votes.", "query": "SELECT T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score BETWEEN 1 AND 5 AND T2.DownVotes = 0"}
{"db_id": "superhero", "question": "Please list all the superpowers of 3-D Man.", "query": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = '3-D Man'"}
{"db_id": "superhero", "question": "How many superheroes have the super power of \"Super Strength\"?", "query": "SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Super Strength'"}
{"db_id": "superhero", "question": "Among the superheroes with the super power of \"Super Strength\", how many of them have a height of over 200cm?", "query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.height_cm > 200"}
{"db_id": "superhero", "question": "Please list the full names of all the superheroes with over 15 super powers.", "query": "SELECT DISTINCT T1.full_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.full_name HAVING COUNT(T2.power_id) > 15"}
{"db_id": "superhero", "question": "How many superheroes have blue eyes?", "query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue'"}
{"db_id": "superhero", "question": "What is the colour of Apocalypse's skin?", "query": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Apocalypse'"}
{"db_id": "superhero", "question": "Among the superheroes with blue eyes, how many of them have the super power of \"Agility\"?", "query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN colour AS T4 ON T1.eye_colour_id = T4.id WHERE T3.power_name = 'Agility' AND T4.colour = 'Blue'"}
{"db_id": "superhero", "question": "Please list the superhero names of all the superheroes that have blue eyes and blond hair.", "query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond'"}
{"db_id": "superhero", "question": "How many superheroes are published by Marvel Comics?", "query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'"}
{"db_id": "superhero", "question": "Please give the full name of the tallest hero published by Marvel Comics.", "query": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics' ORDER BY T1.height_cm DESC LIMIT 1"}
{"db_id": "superhero", "question": "Who is the publisher of Sauron?", "query": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron'"}
{"db_id": "superhero", "question": "Among the superheroes from Marvel Comics, how many of them have blue eyes?", "query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.colour = 'Blue'"}
{"db_id": "superhero", "question": "What is the average height of the superheroes from Marvel Comics?", "query": "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'"}
{"db_id": "superhero", "question": "Among the superheroes from Marvel Comics, what is the percentage of those who have the super power of \"Super Strength\"?", "query": "SELECT CAST(COUNT(CASE WHEN T3.power_name = 'Super Strength' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN publisher AS T4 ON T1.publisher_id = T4.id WHERE T4.publisher_name = 'Marvel Comics'"}
{"db_id": "superhero", "question": "How many superheroes did DC Comics publish?", "query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics'"}
{"db_id": "superhero", "question": "Which publisher published the slowest superhero?", "query": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T4.attribute_name = 'Speed' ORDER BY T3.attribute_value LIMIT 1"}
{"db_id": "superhero", "question": "How many gold-eyed superheroes did Marvel Comics publish?", "query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.colour = 'Gold'"}
{"db_id": "superhero", "question": "What is the publisher's name of Blue Beetle II?", "query": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Blue Beetle II'"}
{"db_id": "superhero", "question": "How many superheroes with blonde hair are there?", "query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id WHERE T2.colour = 'Blond'"}
{"db_id": "superhero", "question": "Who is the dumbest superhero?", "query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' ORDER BY T2.attribute_value LIMIT 1"}
{"db_id": "superhero", "question": "What is Copycat's race?", "query": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'"}
{"db_id": "superhero", "question": "How many superheroes have durability of less than 50?", "query": "SELECT COUNT(T1.hero_id) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Durability' AND T1.attribute_value < 50"}
{"db_id": "superhero", "question": "What are the names of the superheroes with the power of death touch?", "query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'"}
{"db_id": "superhero", "question": "How many female superheroes have a strength value of 100?", "query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.attribute_name = 'Strength' AND T2.attribute_value = 100 AND T4.gender = 'Female'"}
{"db_id": "superhero", "question": "What is the name of the superhero that has the most powers?", "query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.superhero_name ORDER BY COUNT(T2.hero_id) DESC LIMIT 1"}
{"db_id": "superhero", "question": "How many vampire superheroes are there?", "query": "SELECT COUNT(T1.superhero_name) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'"}
{"db_id": "superhero", "question": "What is the percentage of superheroes who act in their own self-interest or make decisions based on their own moral code? Indicate how many of the said superheroes were published by Marvel Comics.", "query": "SELECT CAST(SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*), COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T3.id = T1.alignment_id WHERE T3.alignment = 'Bad'"}
{"db_id": "superhero", "question": "Between DC and Marvel Comics, which publisher has published more superheroes? Find the difference in the number of superheroes they have published.", "query": "SELECT SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id"}
{"db_id": "superhero", "question": "Give the publisher ID of Star Trek.", "query": "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'"}
{"db_id": "superhero", "question": "Calculate the average attribute value of all superheroes.", "query": "SELECT AVG(attribute_value) FROM hero_attribute"}
{"db_id": "superhero", "question": "What is the total number of superheroes without full name?", "query": "SELECT COUNT(id) FROM superhero WHERE full_name IS NULL"}
{"db_id": "superhero", "question": "What is the eye colour of superhero with superhero ID 75?", "query": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.id = 75"}
{"db_id": "superhero", "question": "Provide the superpowers of the superhero called Deathlok.", "query": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Deathlok'"}
{"db_id": "superhero", "question": "What is the average weight of all female superheroes?", "query": "SELECT AVG(T1.weight_kg) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Female'"}
{"db_id": "superhero", "question": "List down at least five superpowers of male superheroes.", "query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN gender AS T4 ON T4.id = T1.gender_id WHERE T4.gender = 'Male' LIMIT 5"}
{"db_id": "superhero", "question": "Give the name of the alien superheroes.", "query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'"}
{"db_id": "superhero", "question": "Among the superheroes with height from 170 to 190, list the names of the superheroes with no eye color.", "query": "SELECT DISTINCT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.height_cm BETWEEN 170 AND 190 AND T2.colour LIKE 'No Colour'"}
{"db_id": "superhero", "question": "What is the superpower of hero ID 56?", "query": "SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 56"}
{"db_id": "superhero", "question": "List down at least five full name of Demi-God superheroes.", "query": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God'"}
{"db_id": "superhero", "question": "How many bad superheroes are there?", "query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Bad'"}
{"db_id": "superhero", "question": "Identify the race of the superhero who weighed 169 kg.", "query": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 169"}
{"db_id": "superhero", "question": "Provide the hair colour of the human superhero who is 185 cm tall.", "query": "SELECT DISTINCT T3.colour FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T1.height_cm = 185 AND T2.race = 'Human'"}
{"db_id": "superhero", "question": "What is the eye clolour of the heaviest superhero?", "query": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id ORDER BY T1.weight_kg DESC LIMIT 1"}
{"db_id": "superhero", "question": "In superheroes with height between 150 to 180, what is the percentage of heroes published by Marvel Comics?", "query": "SELECT CAST(COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.height_cm BETWEEN 150 AND 180"}
{"db_id": "superhero", "question": "Among the male superheroes, list the full names of superheroes with weight greater than the 79% average weight of all superheroes.", "query": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Male' AND T1.weight_kg * 100 > ( SELECT AVG(weight_kg) FROM superhero ) * 79"}
{"db_id": "superhero", "question": "Which power do superheroes have the most of?", "query": "SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id GROUP BY T2.power_name ORDER BY COUNT(T1.hero_id) DESC LIMIT 1"}
{"db_id": "superhero", "question": "Indicate the attribute value of superhero Abomination.", "query": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Abomination'"}
{"db_id": "superhero", "question": "What are the superpowers of heroes with ID 1?", "query": "SELECT DISTINCT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 1"}
{"db_id": "superhero", "question": "How many heroes have stealth power?", "query": "SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Stealth'"}
{"db_id": "superhero", "question": "What is the hero's full name with the highest attribute in strength?", "query": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' ORDER BY T2.attribute_value DESC LIMIT 1"}
{"db_id": "superhero", "question": "What is the average of superheroes with no skin colour?", "query": "SELECT CAST(COUNT(*) AS REAL) / SUM(CASE WHEN T2.id = 1 THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id"}
{"db_id": "superhero", "question": "How many superheroes were published by Dark Horse Comics?", "query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Dark Horse Comics'"}
{"db_id": "superhero", "question": "Which superhero has the most durability published by Dark Horse Comics?", "query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' ORDER BY T2.attribute_value DESC LIMIT 1"}
{"db_id": "superhero", "question": "What is the eyes colour of Abraham Sapien?", "query": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraham Sapien'"}
{"db_id": "superhero", "question": "List the name of superheroes with flight power.", "query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'"}
{"db_id": "superhero", "question": "List the eyes, hair and skin colour of all female superheroes published by Dark Horse Comics.", "query": "SELECT T1.eye_colour_id, T1.hair_colour_id, T1.skin_colour_id FROM superhero AS T1 INNER JOIN publisher AS T2 ON T2.id = T1.publisher_id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.gender = 'Female'"}
{"db_id": "superhero", "question": "Which group does superhero A-Bomb belong to?", "query": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'A-Bomb'"}
{"db_id": "superhero", "question": "What is the percentage of blue female superheroes among all female superheroes?", "query": "SELECT CAST(COUNT(CASE WHEN T3.colour = 'Blue' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T2.gender = 'Female'"}
{"db_id": "superhero", "question": "Provide the hero name and race of Charles Chandler.", "query": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Charles Chandler'"}
{"db_id": "superhero", "question": "What is the gender of Agent 13 hero?", "query": "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Agent 13'"}
{"db_id": "superhero", "question": "Provide superheroes' names who have the adaptation power.", "query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Adaptation'"}
{"db_id": "superhero", "question": "How many powers does Amazo hero have?", "query": "SELECT COUNT(T1.power_id) FROM hero_power AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T2.superhero_name = 'Amazo'"}
{"db_id": "superhero", "question": "List the powers of Hunter Zolomon.", "query": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Hunter Zolomon'"}
{"db_id": "superhero", "question": "Provide the heights of the heroes whose eye colours are amber.", "query": "SELECT T1.height_cm FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Amber'"}
{"db_id": "superhero", "question": "List the heroes' names whose eyes and hair colours are both black.", "query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id AND T1.hair_colour_id = T2.id WHERE T2.colour = 'Black'"}
{"db_id": "superhero", "question": "Provide the eye colours of the heroes whose skin colours are gold.", "query": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Gold'"}
{"db_id": "superhero", "question": "Provide the full names of vampire heroes.", "query": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'"}
{"db_id": "superhero", "question": "Describe the names of neutral alignment superheroes.", "query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'"}
{"db_id": "superhero", "question": "How many heroes have the highest attribute value in strength?", "query": "SELECT COUNT(T1.hero_id) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Strength' AND T1.attribute_value = ( SELECT MAX(attribute_value) FROM hero_attribute )"}
{"db_id": "superhero", "question": "What are the race and alignment of Cameron Hicks?", "query": "SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'Cameron Hicks'"}
{"db_id": "superhero", "question": "How many percent of female heroes were published by Marvel Comics?", "query": "SELECT CAST(COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T3.gender = 'Female'"}
{"db_id": "superhero", "question": "Find the average weight of the heroes who are aliens.", "query": "SELECT CAST(SUM(T1.weight_kg) AS REAL) / COUNT(T1.id) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'"}
{"db_id": "superhero", "question": "Calculate the difference between Emil Blonsky's weight and Charles Chandler's weight.", "query": "SELECT ( SELECT weight_kg FROM superhero WHERE full_name LIKE 'Emil Blonsky' ) - ( SELECT weight_kg FROM superhero WHERE full_name LIKE 'Charles Chandler' ) AS CALCULATE"}
{"db_id": "superhero", "question": "Calculate the average height for each superhero.", "query": "SELECT CAST(SUM(height_cm) AS REAL) / COUNT(full_name) FROM superhero"}
{"db_id": "superhero", "question": "What is Abomination's superpower?", "query": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Abomination'"}
{"db_id": "superhero", "question": "Among the superheroes with the race of god/eternal, how many of them are male", "query": "SELECT COUNT(*) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T1.race_id = 21 AND T1.gender_id = 1"}
{"db_id": "superhero", "question": "Which hero was the fastest?", "query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' ORDER BY T2.attribute_value DESC LIMIT 1"}
{"db_id": "superhero", "question": "How many superheroes have a neutral alignment?", "query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'"}
{"db_id": "superhero", "question": "State all of 3-D Man's attributes along with their values.", "query": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = '3-D Man'"}
{"db_id": "superhero", "question": "Which superheroes have blue eyes with brown hair?", "query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Brown'"}
{"db_id": "superhero", "question": "What is the publisher for Hawkman, Karate Kid and Speedy?", "query": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')"}
{"db_id": "superhero", "question": "How many superheroes didn't have any publisher?", "query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.id = 1"}
{"db_id": "superhero", "question": "Calculate the percentage of superheroes with blue eyes.", "query": "SELECT CAST(COUNT(CASE WHEN T2.colour = 'Blue' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id"}
{"db_id": "superhero", "question": "Find the ratio between male superheroes and female superheroes.", "query": "SELECT CAST(COUNT(CASE WHEN T2.gender = 'Male' THEN T1.id ELSE NULL END) AS REAL) / COUNT(CASE WHEN T2.gender = 'Female' THEN T1.id ELSE NULL END) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id"}
{"db_id": "superhero", "question": "Who is the tallest superhero?", "query": "SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1"}
{"db_id": "superhero", "question": "What is the power ID of cryokinesis?", "query": "SELECT id FROM superpower WHERE power_name = 'Cryokinesis'"}
{"db_id": "superhero", "question": "Provide the name of superhero with superhero ID 294.", "query": "SELECT superhero_name FROM superhero WHERE id = 294"}
{"db_id": "superhero", "question": "List the full names of superheroes with missing weight.", "query": "SELECT DISTINCT full_name FROM superhero WHERE full_name IS NOT NULL AND (weight_kg IS NULL OR weight_kg = 0)"}
{"db_id": "superhero", "question": "Provide the eye colour of the superhero who has Karen Beecher-Duncan as their full name.", "query": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan'"}
{"db_id": "superhero", "question": "What is the superpowers of the superhero has Helen Parr as their full name?", "query": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Helen Parr'"}
{"db_id": "superhero", "question": "Find the race of the superhero who weighs 108kg and is 188cm tall.", "query": "SELECT DISTINCT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 108 AND T1.height_cm = 188"}
{"db_id": "superhero", "question": "What is the publisher name of the superhero ID 38?", "query": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.id = 38"}
{"db_id": "superhero", "question": "What is the race of the superhero with maximum attribute value?", "query": "SELECT T3.race FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN race AS T3 ON T1.race_id = T3.id ORDER BY T2.attribute_value DESC LIMIT 1"}
{"db_id": "superhero", "question": "Give the alignment and superpowers of the superhero named Atom IV.", "query": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id WHERE T1.superhero_name = 'Atom IV'"}
{"db_id": "superhero", "question": "List down at least five full names of superheroes with blue eyes.", "query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue' LIMIT 5"}
{"db_id": "superhero", "question": "Calculate the average attribute value of all neutral superheroes.", "query": "SELECT AVG(T1.attribute_value) FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id INNER JOIN alignment AS T3 ON T2.alignment_id = T3.id WHERE T3.alignment = 'Neutral'"}
{"db_id": "superhero", "question": "List the skin colour of the superheroes with 100 attribute value.", "query": "SELECT DISTINCT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id WHERE T3.attribute_value = 100"}
{"db_id": "superhero", "question": "Count the good female superheroes.", "query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.alignment = 'Good' AND T3.gender = 'Female'"}
{"db_id": "superhero", "question": "Provide the names of superheroes with attribute value between 75 to 80.", "query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T2.attribute_value BETWEEN 75 AND 80"}
{"db_id": "superhero", "question": "Give the race of the blue-haired male superhero.", "query": "SELECT T3.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T2.colour = 'Blue' AND T4.gender = 'Male'"}
{"db_id": "superhero", "question": "Among the bad superheroes, what is the percentage of female superheroes?", "query": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'Female' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.alignment = 'Bad'"}
{"db_id": "superhero", "question": "In superheroes with missing weight data, calculate the difference between the number of superheroes with blue eyes and no eye color.", "query": "SELECT SUM(CASE WHEN T2.id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.id = 1 THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg = 0 OR T1.weight_kg = NULL"}
{"db_id": "superhero", "question": "How strong is the Hulk?", "query": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Hulk' AND T3.attribute_name = 'Strength'"}
{"db_id": "superhero", "question": "List down Ajax's superpowers.", "query": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Ajax'"}
{"db_id": "superhero", "question": "How many green-skinned villains are there in the superhero universe?", "query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T2.alignment = 'Bad' AND T3.colour = 'Green'"}
{"db_id": "superhero", "question": "How many female superheroes are in Marvel Comics?", "query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.gender = 'Female'"}
{"db_id": "superhero", "question": "Identify superheroes who can control wind and list their names in alphabetical order.", "query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Wind Control' ORDER BY T1.superhero_name"}
{"db_id": "superhero", "question": "Identify the gender of the superhero who has the ability of Phoenix Force.", "query": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Phoenix Force'"}
{"db_id": "superhero", "question": "Identify the heaviest superhero in DC Comics.", "query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics' ORDER BY T1.weight_kg DESC LIMIT 1"}
{"db_id": "superhero", "question": "What is the average height of a non-human superhero in Dark Horse Comics?", "query": "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.race != 'Human'"}
{"db_id": "superhero", "question": "Which publisher created more superheroes: DC or Marvel Comics? Find the difference in the number of superheroes.", "query": "SELECT SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id"}
{"db_id": "superhero", "question": "Identify the weakest attribute of the Black Panther.", "query": "SELECT T3.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Black Panther' ORDER BY T2.attribute_value ASC LIMIT 1"}
{"db_id": "superhero", "question": "What is Abomination's eye colour?", "query": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Abomination'"}
{"db_id": "superhero", "question": "Name the tallest superhero.", "query": "SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1"}
{"db_id": "superhero", "question": "Name the superhero, otherwise known as Charles Chandler.", "query": "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'"}
{"db_id": "superhero", "question": "Among all superheroes created by George Lucas, identify the percentage of female superheroes.", "query": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'Female' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.publisher_name = 'George Lucas'"}
{"db_id": "superhero", "question": "Among all superheroes in Marvel Comics, identify the percentage of 'good' superheroes.", "query": "SELECT CAST(COUNT(CASE WHEN T3.alignment = 'Good' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T2.publisher_name = 'Marvel Comics'"}
{"db_id": "superhero", "question": "What is the total number of superheroes that have John as their first name?", "query": "SELECT COUNT(id) FROM superhero WHERE full_name LIKE 'John%'"}
{"db_id": "superhero", "question": "Give the hero ID of superhero with the lowest attribute value.", "query": "SELECT hero_id FROM hero_attribute WHERE attribute_value = ( SELECT MIN(attribute_value) FROM hero_attribute )"}
{"db_id": "superhero", "question": "Provide the full name of the superhero named Alien.", "query": "SELECT full_name FROM superhero WHERE superhero_name = 'Alien'"}
{"db_id": "superhero", "question": "In superheroes with weight less than 100, list the full name of the superheroes with brown eyes.", "query": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg < 100 AND T2.colour = 'Brown'"}
{"db_id": "superhero", "question": "List the attribute value of the superhero named Aquababy.", "query": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Aquababy'"}
{"db_id": "superhero", "question": "Provide the weight and race of the superhero with superhero ID 40.", "query": "SELECT T1.weight_kg, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.id = 40"}
{"db_id": "superhero", "question": "Calculate the average height of all neutral superheroes.", "query": "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'"}
{"db_id": "superhero", "question": "List the hero ID of superheroes have intellegence as their power.", "query": "SELECT T1.hero_id FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Intelligence'"}
{"db_id": "superhero", "question": "Give the eye colour of Blackwulf.", "query": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Blackwulf'"}
{"db_id": "superhero", "question": "List the power of superheroes with height greater than 80% of the average height of all superheroes.", "query": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.height_cm * 100 > ( SELECT AVG(height_cm) FROM superhero ) * 80"}
{"db_id": "european_football_2", "question": "Which player has the highest overall rating? Indicate the player's api id.", "query": "SELECT player_api_id FROM Player_Attributes ORDER BY overall_rating DESC LIMIT 1"}
{"db_id": "european_football_2", "question": "What is the height of the tallest player? Indicate his name.", "query": "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1"}
{"db_id": "european_football_2", "question": "What is the preferred foot when attacking of the player with the lowest potential?", "query": "SELECT preferred_foot FROM Player_Attributes WHERE penalties IS NOT NULL ORDER BY potential ASC LIMIT 1"}
{"db_id": "european_football_2", "question": "Among the players with an overall rating between 60 to 65, how many players whose going to be in all of your attack moves instead of defensing?", "query": "SELECT COUNT(id) FROM Player_Attributes WHERE overall_rating BETWEEN 60 AND 65 AND defensive_work_rate = 'low'"}
{"db_id": "european_football_2", "question": "Who are the top 5 players who perform better in crossing actions? Indicate their player id.", "query": "SELECT id FROM Player_Attributes ORDER BY crossing DESC LIMIT 5"}
{"db_id": "european_football_2", "question": "Which league had the most goals in the 2016 season?", "query": "SELECT t2.name FROM Match AS t1 INNER JOIN League AS t2 ON t1.league_id = t2.id WHERE t1.season = '2015/2016' ORDER BY t1.home_team_goal + t1.away_team_goal DESC LIMIT 1"}
{"db_id": "european_football_2", "question": "Indicate the full names of the top 10 players with the highest number of penalties.", "query": "SELECT t2.player_name FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.id = t2.id ORDER BY t1.penalties DESC LIMIT 10"}
{"db_id": "european_football_2", "question": "What are the speed in which attacks are put together of the top 4 teams with the highest build Up Play Speed and whose tendency/ frequency of dribbling is little?", "query": "SELECT t1.buildUpPlaySpeed FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id ORDER BY t1.buildUpPlayDribbling ASC LIMIT 4"}
{"db_id": "european_football_2", "question": "Which League had the most matches end as draw in the 2016 season?", "query": "SELECT t2.name, COUNT(t1.id) FROM Match AS t1 INNER JOIN League AS t2 ON t1.league_id = t2.id WHERE t1.season = '2015/2016' AND t1.home_team_goal = t1.away_team_goal GROUP BY t2.name ORDER BY COUNT(t1.id) DESC LIMIT 1"}
{"db_id": "european_football_2", "question": "Give the name of the league with the highest matches of all time and how many matches were played in the said league.", "query": "SELECT t2.name, COUNT(t1.id) FROM Match AS t1 INNER JOIN League AS t2 ON t1.league_id = t2.id GROUP BY t2.name ORDER BY COUNT(t1.id) DESC LIMIT 1"}
{"db_id": "european_football_2", "question": "What is the average height of players born between 1990 and 1995?", "query": "SELECT SUM(height) / COUNT(id) FROM Player WHERE SUBSTR(birthday, 1, 4) BETWEEN '1990' AND '1995'"}
{"db_id": "european_football_2", "question": "Give the team_fifa_api_id of teams with more than 50 but less than 60 build-up play speed.", "query": "SELECT DISTINCT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60"}
{"db_id": "european_football_2", "question": "List the top 5 leagues in ascending order of the number of goals made in all seasons combined.", "query": "SELECT t1.name, SUM(t2.home_team_goal) + SUM(t2.away_team_goal) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id GROUP BY t1.name ORDER BY SUM(t2.home_team_goal) + SUM(t2.away_team_goal) DESC LIMIT 5"}
{"db_id": "european_football_2", "question": "List the name of leagues in which the average goals by the home team is higher than the away team in the 2009/2010 season.", "query": "SELECT t1.name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2009/2010' GROUP BY t1.name HAVING (CAST(SUM(t2.home_team_goal) AS REAL) / COUNT(DISTINCT t2.id)) - (CAST(SUM(t2.away_team_goal) AS REAL) / COUNT(DISTINCT t2.id)) > 0"}
{"db_id": "european_football_2", "question": "What is the short name of the football team Queens Park Rangers?", "query": "SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers'"}
{"db_id": "european_football_2", "question": "List the football players with a birthyear of 1970 and a birthmonth of October.", "query": "SELECT player_name FROM Player WHERE SUBSTR(birthday, 1, 7) = '1970-10'"}
{"db_id": "european_football_2", "question": "What is the attacking work rate of the football playerr Franco Zennaro?", "query": "SELECT DISTINCT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Franco Zennaro'"}
{"db_id": "european_football_2", "question": "What is the ADO Den Haag team freedom of movement in the 1st two thirds of the pitch?", "query": "SELECT DISTINCT t2.buildUpPlayPositioningClass FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_fifa_api_id = t2.team_fifa_api_id WHERE t1.team_long_name = 'ADO Den Haag'"}
{"db_id": "european_football_2", "question": "How many matches in the 2015/2016 season were held in Scotland Premier League\n?", "query": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2015/2016' AND t1.name = 'ScotlAND Premier League'"}
{"db_id": "european_football_2", "question": "What is the preferred foot when attacking of the youngest football player?", "query": "SELECT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t1.birthday ASC LIMIT 1"}
{"db_id": "european_football_2", "question": "List all the football player with the highest potential score.", "query": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t2.potential DESC LIMIT 1"}
{"db_id": "european_football_2", "question": "Among all the players whose weight is under 130, how many of them preferred foot in attacking is left?", "query": "SELECT COUNT(DISTINCT t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.weight < 130 AND t2.preferred_foot = 'left'"}
{"db_id": "european_football_2", "question": "List 10 football teams that has a chance creation passing class of Risky. Inidcate its short name only.", "query": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.chanceCreationPassingClass = 'Risky'"}
{"db_id": "european_football_2", "question": "What is the defensive work rate of the football player David Wilson\n?", "query": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'David Wilson'"}
{"db_id": "european_football_2", "question": "When is the birthday of the football player who has the highest overall rating?", "query": "SELECT t1.birthday FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t2.overall_rating DESC LIMIT 1"}
{"db_id": "european_football_2", "question": "What is the name of the football league in the country of Netherlands?", "query": "SELECT t2.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Netherlands'"}
{"db_id": "european_football_2", "question": "Calculate the average home team goal in the 2010/2011 season in the country of Poland.", "query": "SELECT CAST(SUM(t2.home_team_goal) AS REAL) / COUNT(t2.id) FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Poland' AND t2.season = '2010/2011'"}
{"db_id": "european_football_2", "question": "Please list player names which are higher than 180.", "query": "SELECT player_name FROM Player WHERE height > 180"}
{"db_id": "european_football_2", "question": "How many players were born after 1990?", "query": "SELECT COUNT(id) FROM Player WHERE birthday < '1990'"}
{"db_id": "european_football_2", "question": "How many players whose first names are Adam and weigh more than 170?", "query": "SELECT COUNT(id) FROM Player WHERE weight > 170 AND player_name LIKE 'Adam%'"}
{"db_id": "european_football_2", "question": "What is Aaron Doran's potential score?", "query": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Doran'"}
{"db_id": "european_football_2", "question": "List out of players whose preferred foot is left.", "query": "SELECT DISTINCT t1.id, t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.preferred_foot = 'left'"}
{"db_id": "european_football_2", "question": "Please list all team names which the speed class is fast.", "query": "SELECT DISTINCT t1.team_long_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlaySpeedClass = 'Fast'"}
{"db_id": "european_football_2", "question": "What is the passing class of CLB team?", "query": "SELECT DISTINCT t2.buildUpPlayPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_short_name = 'CLB'"}
{"db_id": "european_football_2", "question": "Which teams have build up play passing more than 70? Please list their short names.", "query": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlayPassing > 70"}
{"db_id": "european_football_2", "question": "Which football player has the shortest height?", "query": "SELECT player_name FROM player ORDER BY height ASC LIMIT 1"}
{"db_id": "european_football_2", "question": "Which country is the league Italy Serie A from?", "query": "SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'Italy Serie A'"}
{"db_id": "european_football_2", "question": "List the football team that has a build up play speed of 31, build up plan dribbling of 53, and build up play passing of 32. Only indicate the short name of the team.", "query": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlaySpeed = 31 AND t2.buildUpPlayDribbling = 53 AND t2.buildUpPlayPassing = 32"}
{"db_id": "european_football_2", "question": "What is the average overall rating of the football player Aaron Doran?", "query": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Doran'"}
{"db_id": "european_football_2", "question": "List all the short name of the football team that had a home team goal of 10?", "query": "SELECT t1.team_short_name FROM Team AS t1 INNER JOIN Match AS t2 ON t1.team_api_id = t2.home_team_api_id WHERE t2.home_team_goal = 10"}
{"db_id": "european_football_2", "question": "List all the football player with the highest balance score and potential score of 61.", "query": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.potential = '61' ORDER BY t2.balance DESC LIMIT 1"}
{"db_id": "european_football_2", "question": "What is the difference of the average ball control score between Aaron Meijers and Lukas Hinterseer\n?", "query": "SELECT CAST(SUM(CASE WHEN t1.player_name = 'Aaron Meijers' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'Aaron Meijers' THEN t2.id ELSE NULL END) AaronBallContr_sum , CAST(SUM(CASE WHEN t1.player_name = 'LukAS Hinterseer' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'LukAS Hinterseer' THEN t2.id ELSE NULL END) LukasBallCountr_sum FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id"}
{"db_id": "european_football_2", "question": "What's the long name for the team GEN?", "query": "SELECT team_long_name FROM Team WHERE team_short_name = 'GEN'"}
{"db_id": "european_football_2", "question": "Which player is older, Aaron Lennon or Abdelaziz Barrada?", "query": "SELECT player_name FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY birthday ASC LIMIT 1"}
{"db_id": "european_football_2", "question": "Which player is the tallest?", "query": "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1"}
{"db_id": "european_football_2", "question": "Among the players whose preferred foot was the left foot when attacking, how many of them would remain in his position when the team attacked?", "query": "SELECT COUNT(player_api_id) FROM Player_Attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low'"}
{"db_id": "european_football_2", "question": "Which country is the Belgium Jupiler League from?", "query": "SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'Belgium Jupiler League'"}
{"db_id": "european_football_2", "question": "Please list the leagues from Germany.", "query": "SELECT t2.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Germany'"}
{"db_id": "european_football_2", "question": "Which player has the strongest overall strength?", "query": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t2.overall_rating DESC LIMIT 1"}
{"db_id": "european_football_2", "question": "Among the players born before the year 1986, how many of them would remain in his position and defense while the team attacked?", "query": "SELECT COUNT(DISTINCT t1.player_name) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.birthday, 1, 4) < '1986' AND t2.attacking_work_rate = 'low'"}
{"db_id": "european_football_2", "question": "Which of these players performs the best in crossing actions, Alexis, Ariel Borysiuk or Arouna Kone?", "query": "SELECT t1.player_name, t2.crossing FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY t2.crossing DESC LIMIT 1"}
{"db_id": "european_football_2", "question": "What's the heading accuracy of Ariel Borysiuk?", "query": "SELECT DISTINCT t1.player_name, t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ariel Borysiuk'"}
{"db_id": "european_football_2", "question": "Among the players whose height is over 180, how many of them have a volley score of over 70?", "query": "SELECT COUNT(DISTINCT t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 180 AND t2.volleys > 70"}
{"db_id": "european_football_2", "question": "Please list the names of the players whose volley score and dribbling score are over 70.", "query": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.volleys > 70 AND t2.dribbling > 70"}
{"db_id": "european_football_2", "question": "How many matches in the 2008/2009 season were held in Belgium?", "query": "SELECT COUNT(t2.id) FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Belgium' AND t2.season = '2008/2009'"}
{"db_id": "european_football_2", "question": "What is the long passing score of the oldest player?", "query": "SELECT t2.long_passing FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t1.birthday ASC LIMIT 1"}
{"db_id": "european_football_2", "question": "Which league had the most matches in the 2008/2009 season?", "query": "SELECT t1.name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2008/2009' GROUP BY t1.name ORDER BY COUNT(t2.id) DESC LIMIT 1"}
{"db_id": "european_football_2", "question": "What is the average overall rating of the players born before the year 1986?", "query": "SELECT SUM(t2.overall_rating) / COUNT(t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.birthday, 1, 4) < '1986'"}
{"db_id": "european_football_2", "question": "How much higher in percentage is Ariel Borysiuk's overall rating than that of Paulin Puel?", "query": "SELECT (SUM(CASE WHEN t1.player_name = 'Ariel Borysiuk' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END)) * 100 AvsP_percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id"}
{"db_id": "european_football_2", "question": "How much is the average build up play speed of the Heart of Midlothian team?", "query": "SELECT CAST(SUM(t2.buildUpPlaySpeed) AS REAL) / COUNT(t2.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Heart of Midlothian'"}
{"db_id": "european_football_2", "question": "Calculate the average overall rating of Pietro Marino.", "query": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Pietro Marino'"}
{"db_id": "european_football_2", "question": "What is Aaron Lennox's total crossing score?", "query": "SELECT SUM(t2.crossing) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Lennox'"}
{"db_id": "european_football_2", "question": "What is Ajax's highest chance creation passing score and what is it classified as?", "query": "SELECT t2.chanceCreationPassing FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Ajax' ORDER BY t2.chanceCreationPassing DESC LIMIT 1"}
{"db_id": "european_football_2", "question": "Which foot is preferred by Abdou Diallo?", "query": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abdou Diallo'"}
{"db_id": "european_football_2", "question": "What is the highest overall rating received by Dorlan Pabon?", "query": "SELECT MAX(t2.overall_rating) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Dorlan Pabon'"}
{"db_id": "european_football_2", "question": "List down 5 tallest players' name.", "query": "SELECT player_name FROM Player ORDER BY height DESC LIMIT 5"}
{"db_id": "european_football_2", "question": "What are the player api id of 10 heaviest players?", "query": "SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 10"}
{"db_id": "european_football_2", "question": "How many home team goal have been scored by Aaron Lennon?", "query": "SELECT SUM(t2.home_team_goal) FROM Player AS t1 INNER JOIN match AS t2 ON t1.player_api_id = t2.away_player_9 WHERE t1.player_name = 'Aaron Lennon'"}
{"db_id": "european_football_2", "question": "Sum up the away team goal scored by both Daan Smith and Filipe Ferreira.", "query": "SELECT SUM(t2.away_team_goal) FROM Player AS t1 INNER JOIN match AS t2 ON t1.player_api_id = t2.away_player_5 WHERE t1.player_name IN ('Daan Smith', 'Filipe Ferreira')"}
{"db_id": "european_football_2", "question": "Who are the players that tend to be attacking when their mates were doing attack moves? List down their name.", "query": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.attacking_work_rate = 'high'"}
{"db_id": "european_football_2", "question": "State the name of players who came from Belgium.", "query": "SELECT t3.player_name FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id WHERE t1.name = 'Belgium'"}
{"db_id": "european_football_2", "question": "Locate players with vision scores of 90 and above, state the country of these players.", "query": "SELECT DISTINCT t4.name FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.player_api_id = t2.player_api_id INNER JOIN Match AS t3 ON t2.player_api_id = t3.home_player_8 INNER JOIN Country AS t4 ON t3.country_id = t4.id WHERE t1.vision > 89"}
{"db_id": "european_football_2", "question": "Which country's players have the heaviest average weights?", "query": "SELECT t1.name FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id GROUP BY t1.name ORDER BY SUM(t3.weight) / COUNT(t3.id) DESC LIMIT 1"}
{"db_id": "european_football_2", "question": "List down the long name for slow speed class team.", "query": "SELECT DISTINCT t1.team_long_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlaySpeedClass = 'Slow'"}
{"db_id": "european_football_2", "question": "What are the short name of team who played safe while creating chance of passing?", "query": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.chanceCreationPassingClass = 'Safe'"}
{"db_id": "european_football_2", "question": "What is the average heights of Italy players?", "query": "SELECT CAST(SUM(T1.height) AS REAL) / COUNT(T1.id) FROM Player AS T1 INNER JOIN Match AS T2 ON T1.id = T2.id INNER JOIN Country AS T3 ON T2.country_id = T3.ID WHERE T3.NAME = 'Italy'"}
{"db_id": "european_football_2", "question": "Please provide the names of top three football players who are over 180 cm tall in alphabetical order.", "query": "SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name LIMIT 3"}
{"db_id": "european_football_2", "question": "How many football players born after the 1990s have the first name \"Aaron\"?", "query": "SELECT COUNT(id) FROM Player WHERE birthday > '1990' AND player_name LIKE 'Aaron%'"}
{"db_id": "european_football_2", "question": "What is the difference between players 6 and 23's jumping scores?", "query": "SELECT SUM(CASE WHEN t1.id = 6 THEN t1.jumping ELSE 0 END) - SUM(CASE WHEN t1.id = 23 THEN t1.jumping ELSE 0 END) FROM Player_Attributes AS t1"}
{"db_id": "european_football_2", "question": "Please provide top three football players' IDs who are among the lowest potential players and prefer to use the right foot when attacking.", "query": "SELECT id FROM Player_Attributes WHERE preferred_foot = 'right' ORDER BY potential DESC LIMIT 3"}
{"db_id": "european_football_2", "question": "How many players had the highest potential score for crossing that preferred to use their left foots while attacking?", "query": "SELECT COUNT(t1.id) FROM Player_Attributes AS t1 WHERE t1.preferred_foot = 'left' AND t1.crossing = ( SELECT MAX(crossing) FROM Player_Attributes)"}
{"db_id": "european_football_2", "question": "What percentage of players have a strength and stamina score of more than 80?", "query": "SELECT CAST(COUNT(CASE WHEN strength > 80 AND stamina > 80 THEN id ELSE NULL END) AS REAL) * 100 / COUNT(id) FROM Player_Attributes t"}
{"db_id": "european_football_2", "question": "In what country did the English Premier League take place?", "query": "SELECT name FROM Country WHERE id IN ( SELECT country_id FROM League WHERE name = 'EnglAND Premier League' )"}
{"db_id": "european_football_2", "question": "What are Alexis Blin's sprint speed, agility, and acceleration scores?", "query": "SELECT acceleration, sprint_speed, agility FROM Player_Attributes WHERE player_api_id IN ( SELECT player_api_id FROM Player WHERE player_name = 'Alexis Blin' )"}
{"db_id": "european_football_2", "question": "Does the KSV Cercle Brugge team have a slow, balanced or fast speed class?", "query": "SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'KSV Cercle Brugge'"}
{"db_id": "european_football_2", "question": "In the 2015\u20132016 season, how many games were played in the Italian Serie A league?", "query": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Italy Serie A' AND t2.season = '2015/2016'"}
{"db_id": "european_football_2", "question": "What was the highest score of the home team in the Netherlands Eredivisie league?", "query": "SELECT MAX(t2.home_team_goal) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Netherlands Eredivisie'"}
{"db_id": "european_football_2", "question": "Please state the finishing rate and curve score of the player who has the heaviest weight.", "query": "SELECT id, finishing, curve FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 1 ) LIMIT 1"}
{"db_id": "european_football_2", "question": "Which league had the most games in the 2015\u20132016 season?", "query": "SELECT t1.name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2015/2016' GROUP BY t1.name ORDER BY COUNT(t2.id) DESC LIMIT 3"}
{"db_id": "european_football_2", "question": "Please provide the full name of the away team that scored the most goals.", "query": "SELECT t2.team_long_name FROM Match AS t1 INNER JOIN Team AS t2 ON t1.away_team_api_id = t2.team_api_id ORDER BY t1.away_team_goal DESC LIMIT 1"}
{"db_id": "european_football_2", "question": "Please name one player whose overall strength is the greatest.", "query": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating = ( SELECT MAX(overall_rating) FROM Player_Attributes)"}
{"db_id": "student_club", "question": "How many students in the Student_Club are from the College of Engineering?", "query": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.college = 'College of Engineering'"}
{"db_id": "student_club", "question": "Please list the full names of the students in the Student_Club that come from the Art and Design Department.", "query": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Art AND Design Department'"}
{"db_id": "student_club", "question": "How many students of the Student_Club have attended the event \"Women's Soccer\"?", "query": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Women''s Soccer'"}
{"db_id": "student_club", "question": "Please list the phone numbers of the students from the Student_Club that has attended the event \"Women's Soccer\".", "query": "SELECT T3.phone FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Women''s Soccer'"}
{"db_id": "student_club", "question": "Among the students from the Student_Club who attended the event \"Women's Soccer\", how many of them want a T-shirt that's in medium size?", "query": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Women''s Soccer' AND T3.t_shirt_size = 'Medium'"}
{"db_id": "student_club", "question": "What is the event that has the highest attendance of the students from the Student_Club?", "query": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_name ORDER BY COUNT(T2.link_to_event) DESC LIMIT 1"}
{"db_id": "student_club", "question": "Which college is the vice president of the Student_Club from?", "query": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position LIKE 'vice president'"}
{"db_id": "student_club", "question": "Please list the event names of all the events attended by Angela Sanders.", "query": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Angela' AND T3.last_name = 'Sanders'"}
{"db_id": "student_club", "question": "How many events of the Student_Club did Sacha Harrison attend in 2019?", "query": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Sacha' AND T3.last_name = 'Harrison' AND SUBSTR(T1.event_date, 1, 4) = '2019'"}
{"db_id": "student_club", "question": "Among the events attended by more than 10 members of the Student_Club, how many of them are meetings?", "query": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.type = 'Meeting' GROUP BY T1.type HAVING COUNT(T2.link_to_event) >= 10"}
{"db_id": "student_club", "question": "What is the most expensive item that was spent in support of club events?", "query": "SELECT expense_description FROM expense ORDER BY cost DESC LIMIT 1"}
{"db_id": "student_club", "question": "How many members of the Student_Club have majored Environmental Engineering?\n", "query": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Environmental Engineering'"}
{"db_id": "student_club", "question": "List the full name of all the members of the Student_Club who attended the \"Lacrosse game\" event.", "query": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Lacrosse game'"}
{"db_id": "student_club", "question": "List the last name of all the students who majored Law and Constitutional Studies. \n", "query": "SELECT T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Law AND Constitutional Studies'"}
{"db_id": "student_club", "question": "What county did Sherry Ramsey grew up?", "query": "SELECT T2.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sherry' AND T1.last_name = 'Ramsey'"}
{"db_id": "student_club", "question": "What college offers the major that Tyler Hewitt took?", "query": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Tyler' AND T1.last_name = 'Hewitt'"}
{"db_id": "student_club", "question": "What is the amount of the funds that the Vice President received?", "query": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'"}
{"db_id": "student_club", "question": "How much did the Student_Club members spend on food in September Meeting?", "query": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Food' AND SUBSTR(T1.event_date, 6, 2) = '09'"}
{"db_id": "student_club", "question": "What city and state did the President of the Student_Club grow up?", "query": "SELECT T2.city, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.position = 'President'"}
{"db_id": "student_club", "question": "List the full name of the Student_Club members that grew up in Illinois state.", "query": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Illinois'"}
{"db_id": "student_club", "question": "How much did the Student_Club members spend on advertisement in September Meeting?", "query": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Advertisement' AND SUBSTR(T1.event_date, 6, 2) = '09'"}
{"db_id": "student_club", "question": "What department offers the major that Pierce and Guidi took?", "query": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.last_name = 'Pierce' OR T1.last_name = 'Guidi'"}
{"db_id": "student_club", "question": "What is the total budgeted amount for all category in \"October Speaker\" event?", "query": "SELECT SUM(T2.amount) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'October Speaker'"}
{"db_id": "student_club", "question": "Was each expense in October Meeting on October 8, 2019 approved?", "query": "SELECT T3.approved FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting' AND T1.event_date LIKE '2019-10-08%'"}
{"db_id": "student_club", "question": "Calculate the total average cost that Elijah Allen spent in the events on September and October.", "query": "SELECT CAST(SUM(CASE WHEN SUBSTR(T2.expense_date, 6, 2) = '09' THEN T2.cost ELSE 0 END) + SUM(CASE WHEN SUBSTR(T2.expense_date, 6, 2) = '10' THEN T2.cost ELSE 0 END) AS REAL) / COUNT(T1.member_id) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.last_name = 'Allen' AND T1.first_name = 'Elijah' AND (SUBSTR(T2.expense_date, 6, 2) = '09' OR SUBSTR(T2.expense_date, 6, 2) = '10')"}
{"db_id": "student_club", "question": "Calculate the difference of the total amount spent in all events by the Student_Club in year 2019 and 2020.", "query": "SELECT SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2019' THEN T2.spent ELSE 0 END) - SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2020' THEN T2.spent ELSE 0 END) AS num FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event"}
{"db_id": "student_club", "question": "Give the location for \"Spring Budget Review\".", "query": "SELECT location FROM event WHERE event_name = 'Spring Budget Review'"}
{"db_id": "student_club", "question": "What was the cost for the \"Posters\" on 2019/9/4?", "query": "SELECT cost FROM expense WHERE expense_description = 'Posters' AND expense_date = '2019-09-04'"}
{"db_id": "student_club", "question": "With the biggest budget for the \"Food\", what was the remaining of it?", "query": "SELECT remaining FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Food' )"}
{"db_id": "student_club", "question": "What was the notes of the fundraising on 2019/9/14?", "query": "SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14'"}
{"db_id": "student_club", "question": "How many majors are there in \"College of Humanities and Social Sciences\"?", "query": "SELECT COUNT(major_name) FROM major WHERE college = 'College of Humanities AND Social Sciences'"}
{"db_id": "student_club", "question": "Tell the phone number of \"Carlo Jacobs\".", "query": "SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs'"}
{"db_id": "student_club", "question": "Tell the hometown county for \"Adela O'Gallagher\".", "query": "SELECT T2.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Adela' AND T1.last_name = 'O''Gallagher'"}
{"db_id": "student_club", "question": "For all the budgets for \"November Meeting\", how many of them had exceeded the budget?", "query": "SELECT COUNT(T2.event_id) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Meeting' AND T1.remaining < 0"}
{"db_id": "student_club", "question": "Provide the total number of the budget amount for \"September Speaker\" event.", "query": "SELECT SUM(T1.spent + T1.remaining) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'September Speaker'"}
{"db_id": "student_club", "question": "What is the status of the event which bought \"Post Cards, Posters\" on 2019/8/20?", "query": "SELECT T1.event_status FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget WHERE T2.expense_description = 'Post Cards, Posters' AND T2.expense_date = '2019-08-20'"}
{"db_id": "student_club", "question": "What was Brent Thomason's major?", "query": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Brent' AND T1.last_name = 'Thomason'"}
{"db_id": "student_club", "question": "For all the club members from \"Human Development and Family Studies\" major, how many of them wear large size t-shirt?", "query": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Human Development AND Family Studies' AND T1.t_shirt_size = 'Large'"}
{"db_id": "student_club", "question": "What's Christof Nielson's zip code type?", "query": "SELECT T2.type FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Christof' AND T1.last_name = 'Nielson'"}
{"db_id": "student_club", "question": "State the major name for the Vice President of the club.", "query": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'"}
{"db_id": "student_club", "question": "Where is the hometown state for \"Sacha Harrison\"?", "query": "SELECT T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'"}
{"db_id": "student_club", "question": "Which department was the President of the club in?", "query": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'President'"}
{"db_id": "student_club", "question": "State the date Connor Hilton paid his/her dues.", "query": "SELECT T2.date_received FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Connor' AND T1.last_name = 'Hilton' AND T2.source = 'Dues'"}
{"db_id": "student_club", "question": "Who was the first one paid his/her dues? Tell the full name.", "query": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.source = 'Dues' ORDER BY T2.date_received LIMIT 1"}
{"db_id": "student_club", "question": "How many times was the budget in Advertisement for \"Yearly Kickoff\" meeting more than \"October Meeting\"?", "query": "SELECT CAST(SUM(CASE WHEN T2.event_name = 'Yearly Kickoff' THEN T1.amount ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.event_name = 'October Meeting' THEN T1.amount ELSE 0 END) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' AND T2.type = 'Meeting'"}
{"db_id": "student_club", "question": "What percentage was the budget for Parking to the total budget for the \"November Speaker\"?", "query": "SELECT CAST(SUM(CASE WHEN T1.category = 'Parking' THEN T1.amount ELSE 0 END) AS REAL) * 100 / SUM(T1.amount) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Speaker'"}
{"db_id": "student_club", "question": "What is the total cost of the pizzas for all the events?", "query": "SELECT SUM(cost) FROM expense WHERE expense_description = 'Pizza'"}
{"db_id": "student_club", "question": "How many cities are there in Orange County, Virginia?", "query": "SELECT COUNT(city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia'"}
{"db_id": "student_club", "question": "List all of the College of Humanities and Social Sciences' departments.", "query": "SELECT department FROM major WHERE college = 'College of Humanities AND Social Sciences'"}
{"db_id": "student_club", "question": "Where is Amy Firth's hometown?", "query": "SELECT T2.city, T2.county, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Amy' AND T1.last_name = 'Firth'"}
{"db_id": "student_club", "question": "What are the expenses of the budget with the lowest remaining?", "query": "SELECT T2.expense_description FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget ORDER BY T1.remaining LIMIT 1"}
{"db_id": "student_club", "question": "List all the members who attended the event \"October Meeting\".", "query": "SELECT DISTINCT T3.member_id FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'October Meeting'"}
{"db_id": "student_club", "question": "Which college do most of the members go to?", "query": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id GROUP BY T2.major_id ORDER BY COUNT(T2.college) DESC LIMIT 1"}
{"db_id": "student_club", "question": "What does the person with the phone number \"809-555-3360\" major in?", "query": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.phone = '809-555-3360'"}
{"db_id": "student_club", "question": "Which event has the highest budget amount?", "query": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id ORDER BY T1.amount DESC LIMIT 1"}
{"db_id": "student_club", "question": "List all the expenses incurred by the vice president.", "query": "SELECT T2.expense_id, T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'"}
{"db_id": "student_club", "question": "How many members attended the \"Women's Soccer\" event?", "query": "SELECT COUNT(T2.link_to_member) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Women''s Soccer'"}
{"db_id": "student_club", "question": "When did the member, Casey Mason, received the income?", "query": "SELECT T2.date_received FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Casey' AND T1.last_name = 'Mason'"}
{"db_id": "student_club", "question": "How many of the members' hometowns are from Maryland state?", "query": "SELECT COUNT(T2.member_id) FROM zip_code AS T1 INNER JOIN member AS T2 ON T1.zip_code = T2.zip WHERE T1.state = 'Maryland'"}
{"db_id": "student_club", "question": "How many events did the member with the phone number \"954-555-6240\" attend?", "query": "SELECT COUNT(T2.link_to_event) FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member WHERE T1.phone = '954-555-6240'"}
{"db_id": "student_club", "question": "List all the members of the \"School of Applied Sciences, Technology and Education\" department.", "query": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'School of Applied Sciences, Technology AND Education'"}
{"db_id": "student_club", "question": "Among all the closed events, which event has the highest spend-to-budget ratio?", "query": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id ORDER BY T1.spent / T1.amount DESC LIMIT 1"}
{"db_id": "student_club", "question": "How many student have the position of president?", "query": "SELECT COUNT(member_id) FROM member WHERE position = 'President'"}
{"db_id": "student_club", "question": "What is the highest amount of budget spend for an event?", "query": "SELECT MAX(spent) FROM budget"}
{"db_id": "student_club", "question": "How many meeting events were held in 2020?", "query": "SELECT COUNT(event_id) FROM event WHERE type = 'Meeting' AND SUBSTR(event_date, 1, 4) = '2020'"}
{"db_id": "student_club", "question": "What is the total amount of money spent for food?", "query": "SELECT SUM(spent) FROM budget WHERE category = 'Food'"}
{"db_id": "student_club", "question": "Among the students majored in music, who have attended the Community Theater event?", "query": "SELECT T2.first_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T4.event_name = 'Community Theater' AND T1.major_name = 'Music'"}
{"db_id": "student_club", "question": "State the name of students from Fleetwood, Pennsylvania.", "query": "SELECT T1.first_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.city = 'Fleetwood' AND T2.state = 'Pennsylvania'"}
{"db_id": "student_club", "question": "How many income generated by Grant Gilmour?", "query": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Grant' AND T1.last_name = 'Gilmour'"}
{"db_id": "student_club", "question": "Which student was able to generate income more than $50?", "query": "SELECT T1.first_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.amount > 50"}
{"db_id": "student_club", "question": "What is the total expense for the Yearly Kickoff?", "query": "SELECT SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'Yearly Kickoff'"}
{"db_id": "student_club", "question": "Which student has been entrusted to manage the budget for the Football game?", "query": "SELECT T4.first_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget INNER JOIN member AS T4 ON T3.link_to_member = T4.member_id WHERE T1.event_name = 'Football game'"}
{"db_id": "student_club", "question": "Which students manage to generate the highest income. State his/her full name along with the income source.", "query": "SELECT T1.first_name, T1.last_name, T2.source FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.amount DESC LIMIT 1"}
{"db_id": "student_club", "question": "Which event has the lowest cost?", "query": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget ORDER BY T3.cost LIMIT 1"}
{"db_id": "student_club", "question": "Based on the total cost for all event, what is the percentage of cost for Yearly Kickoff event?", "query": "SELECT CAST(SUM(CASE WHEN T1.event_name = 'Yearly Kickoff' THEN T3.cost ELSE 0 END) AS REAL) * 100 / SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget"}
{"db_id": "student_club", "question": "What is the ratio between students majored in finance and physics?", "query": "SELECT SUM(CASE WHEN major_name = 'Finance' THEN 1 ELSE 0 END) / SUM(CASE WHEN major_name = 'Physics' THEN 1 ELSE 0 END) AS ratio FROM major"}
{"db_id": "student_club", "question": "Indicate the top source of funds received in September 2019 based on their amount.", "query": "SELECT source FROM income WHERE amount = ( SELECT MAX(amount) FROM income )"}
{"db_id": "student_club", "question": "Provide the full name and email address of the Student_Club's Secretary.", "query": "SELECT first_name, last_name, email FROM member WHERE position = 'Secretary'"}
{"db_id": "student_club", "question": "How many members of the Student_Club have major in 'Physics Teaching'?", "query": "SELECT COUNT(T2.member_id) FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Physics Teaching'"}
{"db_id": "student_club", "question": "How many members did attend the event 'Community Theater' in 2019?", "query": "SELECT COUNT(T2.link_to_member) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Community Theater' AND SUBSTR(T1.event_date, 1, 4) = '2019'"}
{"db_id": "student_club", "question": "On average, how much did the Student_Club spend on food for the typical event in the past?", "query": "SELECT SUM(spent) / COUNT(spent) FROM budget WHERE category = 'Food' AND event_status = 'Closed'"}
{"db_id": "student_club", "question": "Name the event with the highest amount spent on advertisement.", "query": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' ORDER BY T1.spent DESC LIMIT 1"}
{"db_id": "student_club", "question": "Did Maya Mclean attend the 'Women's Soccer' event?", "query": "SELECT CASE WHEN T3.event_name = 'Women''s Soccer' THEN 'YES' END AS result FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.first_name = 'Maya' AND T1.last_name = 'Mclean'"}
{"db_id": "student_club", "question": "Among all events hold by the Student_Club in 2019, find the percentage share of events related to 'Community Service'", "query": "SELECT CAST(SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(type) FROM event WHERE SUBSTR(event_date, 1, 4) = '2019'"}
{"db_id": "student_club", "question": "Indicate the cost of posters for 'September Speaker' event.", "query": "SELECT T3.cost FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'September Speaker' AND T3.expense_description = 'Posters'"}
{"db_id": "student_club", "question": "What is the most popular size of t-shirt ordered by the club members?", "query": "SELECT t_shirt_size FROM member GROUP BY t_shirt_size ORDER BY COUNT(t_shirt_size) DESC LIMIT 1"}
{"db_id": "student_club", "question": "Indicate the name of the closed event whose cost has exceeded the budget the most.", "query": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event WHERE T1.event_status = 'Closed' AND T1.remaining < 0 ORDER BY T1.remaining LIMIT 1"}
{"db_id": "student_club", "question": "Among the budgets for Food, which one has the highest budgeted amount?", "query": "SELECT budget_id FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget )"}
{"db_id": "student_club", "question": "Among the budgets for Advertising, list out top three which have the most budgeted amount?", "query": "SELECT budget_id FROM budget WHERE category = 'Advertising' ORDER BY amount DESC LIMIT 3"}
{"db_id": "student_club", "question": "Calculate the total cost spent for Parking in the list.", "query": "SELECT SUM(cost) FROM expense WHERE expense_description = 'Parking'"}
{"db_id": "student_club", "question": "Mention the total expense used on 8/20/2019.", "query": "SELECT SUM(cost) FROM expense WHERE expense_date = '2019-08-20'"}
{"db_id": "student_club", "question": "State what kind of expenses that Trent Smith incurred?", "query": "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Trent' AND T1.last_name = 'Smith'"}
{"db_id": "student_club", "question": "What kind of expenses incurred by members who have X-Large in size of tee shirt?", "query": "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.t_shirt_size = 'X-Large'"}
{"db_id": "student_club", "question": "Mention the zip code of member who incurred less than 50USD.", "query": "SELECT T1.zip FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.cost < 50"}
{"db_id": "student_club", "question": "State the name of major that Phillip Cullen has joined.", "query": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.first_name = 'Phillip' AND T2.last_name = 'Cullen'"}
{"db_id": "student_club", "question": "List out the position of members who joined major of Journalism.", "query": "SELECT T2.position FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Journalism'"}
{"db_id": "student_club", "question": "How many members of Business have the Medium size of tee shirt?", "query": "SELECT COUNT(T2.member_id) FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Business' AND T2.t_shirt_size = 'Medium'"}
{"db_id": "student_club", "question": "List out the type of events which have remaining budget more than 30 USD.", "query": "SELECT T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.remaining > 30"}
{"db_id": "student_club", "question": "Mention the category of events which were held at MU 215.", "query": "SELECT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215'"}
{"db_id": "student_club", "question": "What is the category of event which was taken place in 2020-03-24T12:00:00?", "query": "SELECT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_date = '2020-03-24T12:00:00'"}
{"db_id": "student_club", "question": "State the name of major that Vice President has joined.", "query": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Vice President'"}
{"db_id": "student_club", "question": "Calculate the percentage of members who are major Mathematics in the list?", "query": "SELECT CAST(SUM(CASE WHEN T2.major_name = 'Mathematics' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Member'"}
{"db_id": "student_club", "question": "State the category of events were held at 100 W. Main Street.", "query": "SELECT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = '100 W. Main Street'"}
{"db_id": "student_club", "question": "How many income are received with an amount of 50?", "query": "SELECT COUNT(income_id) FROM income WHERE amount = 50"}
{"db_id": "student_club", "question": "Among the members, how many of them have an extra large t-shirt size?", "query": "SELECT COUNT(member_id) FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large'"}
{"db_id": "student_club", "question": "In the College of Agriculture and Applied Sciences, how many majors are under the department of School of Applied Sciences, Technology and Education?", "query": "SELECT COUNT(major_id) FROM major WHERE department = 'School of Applied Sciences, Technology AND Education' AND college = 'College of Agriculture AND Applied Sciences'"}
{"db_id": "student_club", "question": "List the last name of members with a major in environmental engineering and include its department and college name.", "query": "SELECT T2.last_name, T1.department, T1.college FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Member' AND T1.major_name = 'Environmental Engineering'"}
{"db_id": "student_club", "question": "What are the budget category of the events located at MU 215 and a guest speaker type with a 0 budget spent?", "query": "SELECT DISTINCT T2.category, T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215' AND T2.spent = 0 AND T1.type = 'Guest Speaker'"}
{"db_id": "student_club", "question": "List the city and state of members enrolled under electrical and computer engineering department.", "query": "SELECT city, state FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major INNER JOIN zip_code AS T3 ON T3.zip_code = T1.zip WHERE department = 'Electrical AND Computer Engineering Department' AND position = 'Member'"}
{"db_id": "student_club", "question": "What is the name of the social event that was attended by the vice president of the Student_Club located at 900 E. Washington St.?", "query": "SELECT T2.event_name FROM attendance AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T3.position = 'Vice President' AND T2.location = '900 E. Washington St.' AND T2.type = 'Social'"}
{"db_id": "student_club", "question": "What is the last name and position of the student that bought pizza on 03/09/2019?", "query": "SELECT T1.last_name, T1.position FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.expense_date = '2019-03-09' AND T2.expense_description = 'Pizza'"}
{"db_id": "student_club", "question": "List the last name of the members of the club that attended the women's soccer event.", "query": "SELECT T3.last_name FROM attendance AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T2.event_name = 'Women''s Soccer' AND T3.position = 'Member'"}
{"db_id": "student_club", "question": "Among the members with t-shirt size of medium, what is the percentage of the amount 50 received by the Student_Club?", "query": "SELECT CAST(SUM(CASE WHEN T2.amount = 50 THEN 1.0 ELSE 0 END) AS REAL) * 100 / COUNT(T2.income_id) FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Member'"}
{"db_id": "student_club", "question": "Which countries have zip codes with post office boxes?", "query": "SELECT DISTINCT county FROM zip_code WHERE type = 'PO Box' AND county IS NOT NULL"}
{"db_id": "student_club", "question": "What are the zip codes that have post office boxes in the country of the country of San Juan Municipio whose state is Puerto Rico?", "query": "SELECT zip_code FROM zip_code WHERE type = 'PO Box' AND county = 'San Juan Municipio' AND state = 'Puerto Rico'"}
{"db_id": "student_club", "question": "List the names of closed event as \"game\" that was closed from 3/15/2019 to 3/20/2020.", "query": "SELECT DISTINCT event_name FROM event WHERE type = 'Game' AND date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-03-15' AND '2020-03-20' AND status = 'Closed'"}
{"db_id": "student_club", "question": "Please provide links to events for members who have paid more than 50 dollar.", "query": "SELECT DISTINCT T3.link_to_event FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE T1.cost > 50"}
{"db_id": "student_club", "question": "Which members who were approved from 1/10/2019 to 11/19/2019? Please identify the member who attended the event and the link to their event.", "query": "SELECT DISTINCT T1.link_to_member, T3.link_to_event FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE date(SUBSTR(T1.expense_date, 1, 10)) BETWEEN '2019-01-10' AND '2020-11-19' AND T1.approved = 'true'"}
{"db_id": "student_club", "question": "Please indicate the college of the person whose first name is Katy with the link to the major \"rec1N0upiVLy5esTO\".", "query": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.link_to_major = 'rec1N0upiVLy5esTO' AND T1.first_name = 'Katy'"}
{"db_id": "student_club", "question": "Please list the phone numbers of the members who majored in finance at the School of Business.", "query": "SELECT T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Finance' AND T2.college = 'School of Business'"}
{"db_id": "student_club", "question": "List emails of people who paid more than 20 dollars from 9/10/2019 to 11/19/2019.", "query": "SELECT DISTINCT T1.email FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE date(SUBSTR(T2.expense_date, 1, 10)) BETWEEN '2019-09-10' AND '2020-11-19' AND T2.cost > 20"}
{"db_id": "student_club", "question": "How many members have education major in the College of Education & Human Services?", "query": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Member' AND T2.major_name LIKE '%Education%' AND T2.college = 'College of Education & Human Services'"}
{"db_id": "student_club", "question": "What is the percentage of the events that went over budget?", "query": "SELECT CAST(SUM(CASE WHEN remaining < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(budget_id) FROM budget"}
{"db_id": "student_club", "question": "Give the event ID, location, and status of events conducted from November 2019 to March 2020.", "query": "SELECT event_id, location, status FROM event WHERE date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-01-11' AND '2020-03-31'"}
{"db_id": "student_club", "question": "List the expenses that spend more than fifty dollars on average.", "query": "SELECT expense_description FROM expense GROUP BY expense_description HAVING AVG(cost) > 50"}
{"db_id": "student_club", "question": "Find the full name of members whose t-shirt size is extra large.", "query": "SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large'"}
{"db_id": "student_club", "question": "Calculate the percentage of zip codes that are PO boxes.", "query": "SELECT CAST(SUM(CASE WHEN type = 'PO box' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(zip_code) FROM zip_code"}
{"db_id": "student_club", "question": "List the name and location of events that underspend its budget.", "query": "SELECT DISTINCT T1.event_name, T1.location FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.remaining > 0"}
{"db_id": "student_club", "question": "Find the name and date of events with expenses for pizza that were more than fifty dollars but less than a hundred dollars.", "query": "SELECT T1.event_name, T1.event_date FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T3.expense_description = 'Pizza' AND 50 < T3.cost OR T3.cost < 100"}
{"db_id": "student_club", "question": "What is the name and major of members who had to spend more than a hundred dollars on an expense?", "query": "SELECT DISTINCT T1.first_name, T1.last_name, T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major INNER JOIN expense AS T3 ON T1.member_id = T3.link_to_member WHERE T3.cost > 100"}
{"db_id": "student_club", "question": "Among the members who incurred expenses in more than one event, who paid the most amount?", "query": "SELECT T2.member_id FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN budget AS T3 ON T1.link_to_budget = T3.budget_id INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id ORDER BY T1.cost DESC LIMIT 1"}
{"db_id": "student_club", "question": "What is the average amount paid by students in a position other than a member?", "query": "SELECT CAST(SUM(CASE WHEN T2.position != 'Member' THEN T1.cost ELSE 0 END) AS REAL) / SUM(T1.cost) FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN budget AS T3 ON T1.link_to_budget = T3.budget_id INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id"}
{"db_id": "student_club", "question": "List the name of events with less than average parking cost.", "query": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Parking' AND T3.cost < (SELECT AVG(cost) FROM expense)"}
{"db_id": "student_club", "question": "What is the percentage of the cost for the game events?", "query": "SELECT SUM(CASE WHEN T1.type = 'Game' THEN T3.cost ELSE 0 END) / SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget"}
{"db_id": "student_club", "question": "Which budget allowed the most money for water, chips, and cookies?", "query": "SELECT T2.budget_id FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Water, chips, cookies' ORDER BY T1.cost DESC LIMIT 1"}
{"db_id": "student_club", "question": "List the full name of the top five members who spend the most money in the descending order of spending.", "query": "SELECT T3.first_name, T3.last_name FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id ORDER BY T2.spent DESC LIMIT 5"}
{"db_id": "student_club", "question": "Give the full name and contact number of members who had to spend more than average on each expense.", "query": "SELECT DISTINCT T3.first_name, T3.last_name, T3.phone FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member WHERE T1.cost > ( SELECT AVG(T1.cost) FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member )"}
{"db_id": "student_club", "question": "Calculate the difference in the percentage of members in Maine and Vermont.", "query": "SELECT CAST((SUM(CASE WHEN T2.state = 'Maine' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.state = 'Vermont' THEN 1 ELSE 0 END)) AS REAL) * 100 / COUNT(T1.member_id) AS diff FROM member AS T1 INNER JOIN zip_code AS T2 ON T2.zip_code = T1.zip"}
{"db_id": "student_club", "question": "What is the major of Garrett Gerke and which department does it belong to?", "query": "SELECT T2.major_name, T2.department FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.first_name = 'Garrett' AND T1.last_name = 'Gerke'"}
{"db_id": "student_club", "question": "Write the full name of the member who spent money for water, veggie tray and supplies and include the cost of it.", "query": "SELECT T2.first_name, T2.last_name, T1.cost FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.expense_description = 'Water, Veggie tray, supplies'"}
{"db_id": "student_club", "question": "List the last names of students under the Elementary Education major and include their phone numbers.", "query": "SELECT T1.last_name, T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Elementary Education'"}
{"db_id": "student_club", "question": "What category was budgeted for the 'January Speaker' event and how much was the amount budgeted for that category?", "query": "SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'January Speaker'"}
{"db_id": "student_club", "question": "List the event names which were budgeted for the food.", "query": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Food'"}
{"db_id": "student_club", "question": "Write the full names of students who received funds on the date of 9/9/2019 and include the amount received.", "query": "SELECT DISTINCT T3.first_name, T3.last_name, T4.amount FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T3.member_id = T2.link_to_member INNER JOIN income AS T4 ON T4.link_to_member = T3.member_id WHERE T4.date_received = '2019-09-09'"}
{"db_id": "student_club", "question": "Which budget category does the expense 'Posters' fall to?", "query": "SELECT DISTINCT T2.category FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Posters'"}
{"db_id": "student_club", "question": "Write the full name of the club member with the position of 'Secretary' and list which college the club member belongs to.", "query": "SELECT T1.first_name, T1.last_name, college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Secretary'"}
{"db_id": "student_club", "question": "Where is the hometown of Garrett Girke?", "query": "SELECT T2.city FROM member AS T1 INNER JOIN zip_code AS T2 ON T2.zip_code = T1.zip WHERE T1.first_name = 'Garrett' AND T1.last_name = 'Gerke'"}
{"db_id": "student_club", "question": "Which student has the hometown of Lincolnton, North Carolina with the zip code of 28092? List their full name and position.", "query": "SELECT T1.first_name, T1.last_name, T1.position FROM member AS T1 INNER JOIN zip_code AS T2 ON T2.zip_code = T1.zip WHERE T2.city = 'Lincolnton' AND T2.state = 'North Carolina' AND T2.zip_code = 28092"}
{"db_id": "debit_card_specializing", "question": "How many gas stations in CZE has Premium gas?", "query": "SELECT COUNT(GasStationID) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium'"}
{"db_id": "debit_card_specializing", "question": "What was the average monthly consumption of customers in SME for the year 2013?", "query": "SELECT AVG(T2.Consumption) / 12 FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTRING(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME'"}
{"db_id": "debit_card_specializing", "question": "Which customers, paying in CZK, consumed the most gas in 2011?", "query": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1"}
{"db_id": "debit_card_specializing", "question": "How many customers in KAM had a consumption of less than 30,000 for the year 2012?", "query": "SELECT COUNT(*) FROM ( SELECT T2.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND SUBSTRING(T2.Date, 1, 4) = '2012' GROUP BY T2.CustomerID HAVING SUM(T2.Consumption) < 30000 ) AS t1"}
{"db_id": "debit_card_specializing", "question": "Which year recorded the most gas use paid in EUR?", "query": "SELECT SUBSTRING(T2.Date, 1, 4) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' GROUP BY SUBSTRING(T2.Date, 1, 4) ORDER BY SUM(T2.Consumption) DESC LIMIT 1"}
{"db_id": "debit_card_specializing", "question": "Which segment had the least consumption?", "query": "SELECT T1.Segment FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.Segment ORDER BY SUM(T2.Consumption) ASC LIMIT 1"}
{"db_id": "debit_card_specializing", "question": "Which year recorded the most consumption of gas paid in CZK?", "query": "SELECT SUBSTRING(T2.Date, 1, 4) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' GROUP BY SUBSTRING(T2.Date, 1, 4) ORDER BY SUM(T2.Consumption) DESC LIMIT 1"}
{"db_id": "debit_card_specializing", "question": "What was the gas consumption peak month for SME customers in 2013?", "query": "SELECT SUBSTRING(T2.Date, 5, 2) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTRING(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME' GROUP BY SUBSTRING(T2.Date, 5, 2) ORDER BY SUM(T2.Consumption) DESC LIMIT 1"}
{"db_id": "debit_card_specializing", "question": "How much did customer 6 consume in total between August and November 2013?", "query": "SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311'"}
{"db_id": "debit_card_specializing", "question": "Which LAM customer used the Euro as their currency and had the highest consumption in October 2013?", "query": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND T2.Date = '201310' AND T1.Currency = 'EUR' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1"}
{"db_id": "debit_card_specializing", "question": "Who among KAM's customers consumed the most? How much did it consume?", "query": "SELECT T2.CustomerID, SUM(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' GROUP BY T2.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1"}
{"db_id": "debit_card_specializing", "question": "How much did the KAM customers consume in total in May 2013?", "query": "SELECT SUM(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201305' AND T1.Segment = 'KAM'"}
{"db_id": "debit_card_specializing", "question": "Which country has more \"value for money\" gas stations? Please give a total number of \"value for money\" gas stations in each country.", "query": "SELECT Country , ( SELECT COUNT(GasStationID) FROM gasstations WHERE Segment = 'Value for money' ) FROM gasstations WHERE Segment = 'Value for money' GROUP BY Country ORDER BY COUNT(GasStationID) DESC LIMIT 1"}
{"db_id": "debit_card_specializing", "question": "Which client ID consumed the most in September 2013?", "query": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201309' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1"}
{"db_id": "debit_card_specializing", "question": "Which client segment consumed the least in September 2013?", "query": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201309' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1"}
{"db_id": "debit_card_specializing", "question": "Which SME customer consumed the least in June 2012?", "query": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201206' AND T1.Segment = 'SME' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1"}
{"db_id": "debit_card_specializing", "question": "What is the highest monthly consumption in the year 2012?", "query": "SELECT SUM(Consumption) FROM yearmonth WHERE SUBSTRING(Date, 1, 4) = '2012' GROUP BY SUBSTRING(Date, 5, 2) ORDER BY SUM(Consumption) DESC LIMIT 1"}
{"db_id": "debit_card_specializing", "question": "What is the biggest monthly consumption of the customers who use euro as their currency?", "query": "SELECT T2.Consumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' ORDER BY T2.Consumption DESC LIMIT 1"}
{"db_id": "debit_card_specializing", "question": "Please list the product description of the products consumed in September, 2013.", "query": "SELECT T3.Description FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Date = '201309'"}
{"db_id": "debit_card_specializing", "question": "Please list the countries of the gas stations with transactions taken place in June, 2013.", "query": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T3.Date = '201306'"}
{"db_id": "debit_card_specializing", "question": "Please list the chains of the gas stations with transactions in euro.", "query": "SELECT DISTINCT T3.ChainID FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN gasstations AS T3 ON T1.GasStationID = T3.GasStationID WHERE T2.Currency = 'EUR'"}
{"db_id": "debit_card_specializing", "question": "Please list the product description of the products bought in transactions in euro.", "query": "SELECT DISTINCT T1.ProductID, T3.Description FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Currency = 'EUR'"}
{"db_id": "debit_card_specializing", "question": "Among the customers who paid in euro, how many of them have a monthly consumption of over 1000?", "query": "SELECT COUNT(*) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR' AND T1.Consumption > 1000.00"}
{"db_id": "debit_card_specializing", "question": "Please list the product descriptions of the transactions taken place in the gas stations in the Czech Republic.", "query": "SELECT T3.Description FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Country = 'CZE'"}
{"db_id": "debit_card_specializing", "question": "Please list the disparate time of the transactions taken place in the gas stations from chain no. 11.", "query": "SELECT DISTINCT T1.Date, T1.Time FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.ChainID = 11"}
{"db_id": "debit_card_specializing", "question": "How many transactions taken place in the gas station in the Czech Republic are with a price of over 1000?", "query": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Price > 1000"}
{"db_id": "debit_card_specializing", "question": "What is the average total price of the transactions taken place in gas stations in the Czech Republic?", "query": "SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE'"}
{"db_id": "debit_card_specializing", "question": "For the customers who paid in the euro, what is their average total price of the transactions?", "query": "SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T3.Currency = 'EUR'"}
{"db_id": "debit_card_specializing", "question": "Which customer paid the most in 2012/8/25?", "query": "SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-25' GROUP BY CustomerID ORDER BY SUM(Price) DESC LIMIT 1"}
{"db_id": "debit_card_specializing", "question": "Which country's gas station had the first paid cusomer in 2012/8/25?", "query": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' ORDER BY T1.Time DESC LIMIT 1"}
{"db_id": "debit_card_specializing", "question": "What kind of currency did the customer paid at 16:25:00 in 2012/8/24?", "query": "SELECT T3.Currency FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.Date = '2012-08-24' AND T1.Time = '16:25:00'"}
{"db_id": "debit_card_specializing", "question": "What segment did the customer have at 2012/8/23 21:20:00?", "query": "SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.date = '2012-08-23' AND T1.time = '21:20:00'"}
{"db_id": "debit_card_specializing", "question": "How many transactions were paid in EUR in the morning of 2012/8/26?", "query": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-26' AND T1.Time < '13:00:00' AND T2.Currency = 'EUR'"}
{"db_id": "debit_card_specializing", "question": "For the earliest customer, what segment did he/she have?", "query": "SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID ORDER BY Date ASC LIMIT 1"}
{"db_id": "debit_card_specializing", "question": "For the deal happened at 2012/8/24 12:42:00, which country was it?", "query": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Time = '12:42:00'"}
{"db_id": "debit_card_specializing", "question": "What was the product name of the transaction happened at 2012/8/23 21:20:00?", "query": "SELECT T1.ProductID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00'"}
{"db_id": "debit_card_specializing", "question": "For the customer who paid 124.05 in 2012/8/24, how much did he/she spend during the January of 2012? And what is the date and expenses exactly?", "query": "SELECT T1.CustomerID, T2.Date, T2.Consumption FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-24' AND T1.Price = 124.05 AND T2.Date = '201201'"}
{"db_id": "debit_card_specializing", "question": "For all the transactions happened during 8:00-9:00 in 2012/8/26, how many happened in CZE?", "query": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-26' AND T1.Time BETWEEN '08:00:00' AND '09:00:00' AND T2.Country = 'CZE'"}
{"db_id": "debit_card_specializing", "question": "There's one customer spent 214582.17 in the June of 2013, which currency did he/she use?", "query": "SELECT T2.Currency FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '201306' AND T1.Consumption = 214582.17"}
{"db_id": "debit_card_specializing", "question": "Which country was the card owner of No.667467 in?", "query": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.CardID = '667467'"}
{"db_id": "debit_card_specializing", "question": "What's the nationality of the customer who spent 548.4 in 2012/8/24?", "query": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Price = 548.4"}
{"db_id": "debit_card_specializing", "question": "Which gas station has the highest amount of revenue?", "query": "SELECT GasStationID FROM transactions_1k GROUP BY GasStationID ORDER BY SUM(Price) DESC LIMIT 1"}
{"db_id": "debit_card_specializing", "question": "Which are the top five best selling products? Please state the full name of them.", "query": "SELECT T2.Description FROM transactions_1k AS T1 INNER JOIN products AS T2 ON T1.ProductID = T2.ProductID ORDER BY T1.Amount DESC LIMIT 5"}
{"db_id": "debit_card_specializing", "question": "Which country had the gas station that sold the most expensive product id No.2 for one unit?", "query": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.ProductID = 2 ORDER BY T1.Price DESC LIMIT 1"}
