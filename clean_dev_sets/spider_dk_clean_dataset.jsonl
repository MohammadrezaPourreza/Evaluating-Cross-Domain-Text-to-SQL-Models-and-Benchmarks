{"db_id": "new_concert_singer", "question": "How many singers do we have?", "query": "SELECT count(*) FROM singer"}
{"db_id": "new_concert_singer", "question": "What is the total number of singers?", "query": "SELECT count(*) FROM singer"}
{"db_id": "new_concert_singer", "question": "Show name, country for all singers ordered by age from the oldest to the youngest.", "query": "SELECT name ,  country  FROM singer ORDER BY birthday ASC"}
{"db_id": "new_concert_singer", "question": "What are the names, countries for every singer in descending order of age?", "query": "SELECT name ,  country  FROM singer ORDER BY birthday ASC"}
{"db_id": "new_concert_singer", "question": "What is the average, minimum, and maximum id of all French singers?", "query": "SELECT avg(Singer_ID) ,  min(Singer_ID) ,  max(Singer_ID) FROM singer WHERE country  =  'France'"}
{"db_id": "new_concert_singer", "question": "What is the average, minimum, and maximum id for French singers?", "query": "SELECT avg(Singer_ID) ,  min(Singer_ID) ,  max(Singer_ID) FROM singer WHERE country  =  'France'"}
{"db_id": "new_concert_singer", "question": "Show the name and the release year of the song by the youngest singer.", "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY birthday desc LIMIT 1"}
{"db_id": "new_concert_singer", "question": "What are the names and release years for all the songs of the youngest singer?", "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY birthday desc LIMIT 1"}
{"db_id": "new_concert_singer", "question": "Show all countries and the number of singers in each country.", "query": "SELECT country ,  count(*) FROM singer GROUP BY country"}
{"db_id": "new_concert_singer", "question": "How many singers are from each country?", "query": "SELECT country ,  count(*) FROM singer GROUP BY country"}
{"db_id": "new_concert_singer", "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}
{"db_id": "new_concert_singer", "question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}
{"db_id": "new_concert_singer", "question": "What is the average and the highest capacity of all stadiums?", "query": "SELECT avg(capacity) ,  max(capacity) FROM stadium"}
{"db_id": "new_concert_singer", "question": "What is the average and highest capacities for all stations?", "query": "SELECT avg(capacity) ,  max(capacity) FROM stadium"}
{"db_id": "new_concert_singer", "question": "What is the name and capacity for the stadium with highest average attendance?", "query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}
{"db_id": "new_concert_singer", "question": "What is the name and capacity for the stadium with the highest average attendance?", "query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}
{"db_id": "new_concert_singer", "question": "Which concert is the oldest?", "query": "SELECT concert_Name FROM concert ORDER BY YEAR asc LIMIT 1"}
{"db_id": "new_concert_singer", "question": "Return the oldest concert name?", "query": "SELECT concert_Name FROM concert ORDER BY YEAR asc LIMIT 1"}
{"db_id": "new_concert_singer", "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}
{"db_id": "new_concert_singer", "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}
{"db_id": "new_pets_1", "question": "Find the number of pets whose weight is heavier than 10.", "query": "SELECT count(*) FROM pets WHERE weight  >  10"}
{"db_id": "new_pets_1", "question": "How many pets have a greater weight than 10?", "query": "SELECT count(*) FROM pets WHERE weight  >  10"}
{"db_id": "new_pets_1", "question": "Find the weight of the youngest dog.", "query": "SELECT weight FROM pets ORDER BY birthdate desc LIMIT 1"}
{"db_id": "new_pets_1", "question": "How much does the youngest dog weigh?", "query": "SELECT weight FROM pets ORDER BY birthdate desc LIMIT 1"}
{"db_id": "new_pets_1", "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.", "query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType"}
{"db_id": "new_pets_1", "question": "List the maximum weight and type for each type of pet.", "query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType"}
{"db_id": "new_pets_1", "question": "Find number of pets owned by students who are older than 20.", "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}
{"db_id": "new_pets_1", "question": "How many pets are owned by students that have an age greater than 20?", "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}
{"db_id": "new_pets_1", "question": "Find the number of puppy pets that are raised by female students (with sex F).", "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}
{"db_id": "new_pets_1", "question": "How many puppy pets are raised by female students?", "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}
{"db_id": "new_pets_1", "question": "Find the number of distinct type of pets.", "query": "SELECT count(DISTINCT pettype) FROM pets"}
{"db_id": "new_pets_1", "question": "How many different types of pet are there?", "query": "SELECT count(DISTINCT pettype) FROM pets"}
{"db_id": "new_pets_1", "question": "Find the first name of students who have kitten or puppy pet.", "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'"}
{"db_id": "new_pets_1", "question": "What are the first names of every student who has a kitten or puppy as a pet?", "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'"}
{"db_id": "new_pets_1", "question": "Find the name of students who have both Kitten and puppy pets.", "query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'"}
{"db_id": "new_pets_1", "question": "What are the students' first names who have both kitten and puppy as pets?", "query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'"}
{"db_id": "new_pets_1", "question": "Find the major and age of students who do not have a kitten pet.", "query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"}
{"db_id": "new_pets_1", "question": "What major is every student who does not own a kitten as a pet, and also how old are they?", "query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"}
{"db_id": "new_pets_1", "question": "Find the id of students who do not have a kitten pet.", "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'"}
{"db_id": "new_pets_1", "question": "What are the ids of the students who do not own kittens as pets?", "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'"}
{"db_id": "new_pets_1", "question": "Find the first name and age of students who have a dog but do not have a puppy as a pet.", "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"}
{"db_id": "new_pets_1", "question": "What is the first name of every student who has a puppy but does not have a kitten?", "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"}
{"db_id": "new_pets_1", "question": "Find the type and weight of the youngest pet.", "query": "SELECT pettype ,  weight FROM pets ORDER BY birthdate desc LIMIT 1"}
{"db_id": "new_pets_1", "question": "What type of pet is the youngest animal, and how much does it weigh?", "query": "SELECT pettype ,  weight FROM pets ORDER BY birthdate desc LIMIT 1"}
{"db_id": "new_pets_1", "question": "Find the id and weight of all pets older than that born in 2020.", "query": "SELECT petid ,  weight FROM pets WHERE birthdate  <  '2020-01-01'"}
{"db_id": "new_pets_1", "question": "What is the id and weight of every pet who is older than that born in 2020?", "query": "SELECT petid ,  weight FROM pets WHERE birthdate  <  '2020-05-01'"}
{"db_id": "new_pets_1", "question": "Find the average and maximum id for each type of pet.", "query": "SELECT avg(PetID) ,  max(PetID) ,  pettype FROM pets GROUP BY pettype"}
{"db_id": "new_pets_1", "question": "What is the average and maximum id for each pet type?", "query": "SELECT avg(PetID) ,  max(PetID) ,  pettype FROM pets GROUP BY pettype"}
{"db_id": "new_pets_1", "question": "Find the average and maximum id for each pet type.", "query": "SELECT avg(PetID) ,  max(PetID) ,  pettype FROM pets GROUP BY pettype"}
{"db_id": "new_pets_1", "question": "What is the average weight for each type of pet?", "query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype"}
{"db_id": "new_pets_1", "question": "Find the name and age of students who have a pet.", "query": "SELECT DISTINCT T1.fname , T1.LName ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}
{"db_id": "new_pets_1", "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.", "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'"}
{"db_id": "new_pets_1", "question": "What is the id of the pet owned by the student whose last name is 'Smith'?", "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'"}
{"db_id": "new_pets_1", "question": "Find the number of pets for each student who has any pet and student id.", "query": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid"}
{"db_id": "new_pets_1", "question": "For students who have pets, how many pets does each student have?", "query": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid"}
{"db_id": "new_pets_1", "question": "Find the first name and gender of student who have more than one pet.", "query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1"}
{"db_id": "new_pets_1", "question": "What is the first name and gender of the all the students who have more than one pet?", "query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1"}
{"db_id": "new_pets_1", "question": "Find the average age of students who do not have any pet.", "query": "SELECT avg(age) FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid)"}
{"db_id": "new_pets_1", "question": "What is the average age for all students who do not own any pets?", "query": "SELECT avg(age) FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid)"}
{"db_id": "car_1", "question": "How many continents are there?", "query": "SELECT count(*) FROM CONTINENTS;"}
{"db_id": "car_1", "question": "What is the number of continents?", "query": "SELECT count(*) FROM CONTINENTS;"}
{"db_id": "car_1", "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.", "query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;"}
{"db_id": "car_1", "question": "For each continent, list its id, name, and how many countries it has?", "query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;"}
{"db_id": "car_1", "question": "How many countries are listed?", "query": "SELECT count(*) FROM COUNTRIES;"}
{"db_id": "car_1", "question": "How many countries exist?", "query": "SELECT count(*) FROM COUNTRIES;"}
{"db_id": "car_1", "question": "How many models does each car maker produce? List maker full name, id and the number.", "query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;"}
{"db_id": "car_1", "question": "What is the full name of each car maker, along with its id and how many models it produces?", "query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;"}
{"db_id": "car_1", "question": "Which model of the car has the minimum horsepower?", "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;"}
{"db_id": "car_1", "question": "What is the model of the car with the smallest amount of horsepower?", "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;"}
{"db_id": "car_1", "question": "Find the model of the car whose weight is below the average weight.", "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)"}
{"db_id": "car_1", "question": "What is the model for the car with a weight smaller than the average?", "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)"}
{"db_id": "car_1", "question": "Find the name of the makers that produced some cars in the past two years?", "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  >=  '2019';"}
{"db_id": "car_1", "question": "What is the name of the different car makers who produced a car in the past two years?", "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  >=  '2019';"}
{"db_id": "car_1", "question": "Find the make and production time of the cars that were produced in the earliest year?", "query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);"}
{"db_id": "car_1", "question": "What is the maker of the carr produced in the earliest year and what year was it?", "query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);"}
{"db_id": "car_1", "question": "Which distinct car models are the produced before or in 1980?", "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  <=  1980;"}
{"db_id": "car_1", "question": "What are the different models for the cards produced before or in 1980?", "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  <=  1980;"}
{"db_id": "car_1", "question": "How many car models are produced by each maker? List the count and the maker full name.", "query": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;"}
{"db_id": "car_1", "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?", "query": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;"}
{"db_id": "car_1", "question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';"}
{"db_id": "car_1", "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?", "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';"}
{"db_id": "car_1", "question": "What is the smallest weight of the car produced with 8 cylinders on 1974?", "query": "SELECT Weight FROM CARS_DATA WHERE Cylinders  =  4 AND YEAR  =  1974 ORDER BY Weight ASC LIMIT 1;"}
{"db_id": "car_1", "question": "What is the minimu weight of the car with 8 cylinders produced in 1974?", "query": "SELECT Weight FROM CARS_DATA WHERE Cylinders  =  4 AND YEAR  =  1974 ORDER BY Weight ASC LIMIT 1;"}
{"db_id": "car_1", "question": "What are all the makers and models?", "query": "SELECT Maker ,  Model FROM MODEL_LIST;"}
{"db_id": "car_1", "question": "What are the makers and models?", "query": "SELECT Maker ,  Model FROM MODEL_LIST;"}
{"db_id": "car_1", "question": "What is the average weight of cars each year?", "query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;"}
{"db_id": "car_1", "question": "What is the average weight and year for each year?", "query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;"}
{"db_id": "car_1", "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;"}
{"db_id": "car_1", "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;"}
{"db_id": "car_1", "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;"}
{"db_id": "car_1", "question": "What is the car wmodel with the highest mpg?", "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;"}
{"db_id": "car_1", "question": "What is the average edispl of the cars of model tesla?", "query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'tesla';"}
{"db_id": "car_1", "question": "What is the average edispl for all teslas?", "query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'tesla';"}
{"db_id": "car_1", "question": "What is the maximum accelerate for different number of cylinders?", "query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;"}
{"db_id": "car_1", "question": "What is the maximum accelerate for all the different cylinders?", "query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;"}
{"db_id": "car_1", "question": "Which model has the most version(make) of cars?", "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;"}
{"db_id": "car_1", "question": "What model has the most different versions?", "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;"}
{"db_id": "car_1", "question": "How many cars have more than 4 cylinders?", "query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;"}
{"db_id": "car_1", "question": "What is the number of cars with more than 4 cylinders?", "query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;"}
{"db_id": "car_1", "question": "how many cars were produced in the last two years?", "query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  >=  2019;"}
{"db_id": "car_1", "question": "In the last two years, how many cars were made?", "query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  >=  2019;"}
{"db_id": "car_1", "question": "How many car models were produced by American Motor?", "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';"}
{"db_id": "car_1", "question": "What is the number of car models created by American Motor?", "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';"}
{"db_id": "car_1", "question": "Which makers designed more than 3 car models? List full name and the id.", "query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;"}
{"db_id": "car_1", "question": "What are the names and ids of all makers with more than 3 models?", "query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;"}
{"db_id": "car_1", "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?", "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;"}
{"db_id": "car_1", "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?", "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;"}
{"db_id": "car_1", "question": "In which years cars were produced weighing no less than 3000 and no more than 4000?", "query": "SELECT DISTINCT T1.Year FROM CARS_DATA AS T1 WHERE T1.Weight  >  3000 AND T1.weight  <  4000;"}
{"db_id": "car_1", "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000?", "query": "SELECT DISTINCT T1.Year FROM CARS_DATA AS T1 WHERE T1.Weight  >  3000 AND T1.weight  <  4000;"}
{"db_id": "car_1", "question": "What is the horsepower of the car with the largest accelerate?", "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;"}
{"db_id": "car_1", "question": "What is the horsepower of the car with the greatest accelerate?", "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;"}
{"db_id": "car_1", "question": "For model tesla, how many cylinders does the car with the least accelerate have?", "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'tesla' ORDER BY T1.accelerate ASC LIMIT 1;"}
{"db_id": "car_1", "question": "For a tesla model, how many cylinders does the version with least accelerate have?", "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'tesla' ORDER BY T1.accelerate ASC LIMIT 1;"}
{"db_id": "car_1", "question": "How many cars have a larger accelerate than the car with the largest horsepower?", "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );"}
{"db_id": "car_1", "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?", "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );"}
{"db_id": "car_1", "question": "How many cars has over 6 cylinders?", "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;"}
{"db_id": "car_1", "question": "What is the number of carsw ith over 6 cylinders?", "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;"}
{"db_id": "car_1", "question": "For the cars with 4 cylinders, which model has the largest horsepower?", "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;"}
{"db_id": "car_1", "question": "For all of the 4 cylinder cars, which model has the most horsepower?", "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;"}
{"db_id": "car_1", "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.", "query": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;"}
{"db_id": "car_1", "question": "Among the cars that do not have the minimum horsepower, what are the make ids and names of al those with less than 4 cylinders?", "query": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;"}
{"db_id": "car_1", "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before or in 1980?", "query": "SELECT mpg FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <=  1980 ORDER BY mpg DESC LIMIT 1;"}
{"db_id": "car_1", "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before or in 1980?", "query": "SELECT mpg FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <=  1980 ORDER BY mpg DESC LIMIT 1;"}
{"db_id": "car_1", "question": "Which models are lighter than 3500 but not built by the 'Ford Motor'?", "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';"}
{"db_id": "car_1", "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor?", "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';"}
{"db_id": "car_1", "question": "Which are the car makers which produce at least 2 models and more than 3 car makes? List the id and the maker.", "query": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;"}
{"db_id": "car_1", "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?", "query": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;"}
{"db_id": "flight_2", "question": "How many airlines do we have?", "query": "SELECT count(*) FROM AIRLINES"}
{"db_id": "flight_2", "question": "What is the total number of airlines?", "query": "SELECT count(*) FROM AIRLINES"}
{"db_id": "flight_2", "question": "How many airports do we have?", "query": "SELECT count(*) FROM AIRPORTS"}
{"db_id": "flight_2", "question": "Return the number of  airports.", "query": "SELECT count(*) FROM AIRPORTS"}
{"db_id": "flight_2", "question": "How many flights do we have?", "query": "SELECT count(*) FROM FLIGHTS"}
{"db_id": "flight_2", "question": "Return the number of flights.", "query": "SELECT count(*) FROM FLIGHTS"}
{"db_id": "flight_2", "question": "Which city has most number of arriving flights?", "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "flight_2", "question": "Which city has the most frequent destination airport?", "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "flight_2", "question": "Which city has most number of departing flights?", "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "flight_2", "question": "Which city is the most frequent source airport?", "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "flight_2", "question": "What is the code of airport that has the highest number of flights?", "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "flight_2", "question": "What is the airport code of the airport with the most flights?", "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "flight_2", "question": "What is the code of airport that has fewest number of flights?", "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1"}
{"db_id": "flight_2", "question": "Give the code of the airport with the least flights.", "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1"}
{"db_id": "flight_2", "question": "Which airline has most number of flights?", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "flight_2", "question": "What airline serves the most flights?", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "flight_2", "question": "Find all airlines that have at least 10 flights.", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10"}
{"db_id": "flight_2", "question": "Which airlines have at least 10 flights?", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10"}
{"db_id": "flight_2", "question": "Find all airlines that have fewer than 200 flights.", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200"}
{"db_id": "flight_2", "question": "Which airlines have less than 200 flights?", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200"}
{"db_id": "flight_2", "question": "Find the name of airports which do not have any flight in and out.", "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)"}
{"db_id": "flight_2", "question": "Which airports do not have departing or arriving flights?", "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)"}
{"db_id": "cre_doc_template_mgt", "question": "How many documents do we have?", "query": "SELECT count(*) FROM Documents"}
{"db_id": "cre_doc_template_mgt", "question": "Count the number of documents.", "query": "SELECT count(*) FROM Documents"}
{"db_id": "cre_doc_template_mgt", "question": "List document IDs with its names and descriptions.", "query": "SELECT document_id ,  document_name ,  document_description FROM Documents"}
{"db_id": "cre_doc_template_mgt", "question": "Show all the ids with its names and descriptions for all documents?", "query": "SELECT document_id ,  document_name ,  document_description FROM Documents"}
{"db_id": "cre_doc_template_mgt", "question": "How many different templates do all document use?", "query": "SELECT count(DISTINCT template_id) FROM Documents"}
{"db_id": "cre_doc_template_mgt", "question": "Count the number of different templates used for documents.", "query": "SELECT count(DISTINCT template_id) FROM Documents"}
{"db_id": "cre_doc_template_mgt", "question": "How many documents are using the PPT template?", "query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'"}
{"db_id": "cre_doc_template_mgt", "question": "Count the number of documents that use the PPT template type.", "query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'"}
{"db_id": "cre_doc_template_mgt", "question": "Show all template ids and the number of documents using each template.", "query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id"}
{"db_id": "cre_doc_template_mgt", "question": "What are all different template ids used for documents, and how many times were each of them used?", "query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id"}
{"db_id": "cre_doc_template_mgt", "question": "Show ids for all templates that are used by more than one document.", "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1"}
{"db_id": "cre_doc_template_mgt", "question": "What are the template ids of any templates used in more than a single document?", "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1"}
{"db_id": "cre_doc_template_mgt", "question": "Show ids for all templates not used by any document.", "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents"}
{"db_id": "cre_doc_template_mgt", "question": "What are the ids for templates that are not used in any documents?", "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents"}
{"db_id": "cre_doc_template_mgt", "question": "How many templates do we have?", "query": "SELECT count(*) FROM Templates"}
{"db_id": "cre_doc_template_mgt", "question": "Count the number of templates.", "query": "SELECT count(*) FROM Templates"}
{"db_id": "cre_doc_template_mgt", "question": "Show effective date period, and template type codes for all templates.", "query": "SELECT Date_Effective_From ,  Date_Effective_To ,  template_type_code FROM Templates"}
{"db_id": "cre_doc_template_mgt", "question": "What are the effective date period, and type codes for each template?", "query": "SELECT Date_Effective_From ,  Date_Effective_To ,  template_type_code FROM Templates"}
{"db_id": "cre_doc_template_mgt", "question": "Show all effective date period for all templates.", "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates"}
{"db_id": "cre_doc_template_mgt", "question": "What are the effective date range from to?", "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates"}
{"db_id": "cre_doc_template_mgt", "question": "What is the effective date period and template type code for the template with version number later than 5?", "query": "SELECT Date_Effective_From ,  Date_Effective_To ,  template_type_code FROM Templates WHERE version_number  >  5"}
{"db_id": "cre_doc_template_mgt", "question": "Return the effective date period and template type codes of templates with a version number greater than 5.", "query": "SELECT Date_Effective_From ,  Date_Effective_To ,  template_type_code FROM Templates WHERE version_number  >  5"}
{"db_id": "cre_doc_template_mgt", "question": "Show all effective date from and to that are not used by any document.", "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates EXCEPT SELECT Date_Effective_From ,  Date_Effective_To FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id"}
{"db_id": "cre_doc_template_mgt", "question": "What are the effective date from and to that are not used for any document?", "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates EXCEPT SELECT Date_Effective_From ,  Date_Effective_To FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id"}
{"db_id": "cre_doc_template_mgt", "question": "Show all template type codes and descriptions.", "query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}
{"db_id": "cre_doc_template_mgt", "question": "What are the type codes and descriptions for all template types?", "query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}
{"db_id": "cre_doc_template_mgt", "question": "What are the distinct template type descriptions for the templates ever used by any document?", "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}
{"db_id": "cre_doc_template_mgt", "question": "Return the different descriptions for templates that have been used in a document.", "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}
{"db_id": "wta_1", "question": "Find both player names in each match.", "query": "SELECT loser_name, winner_name FROM matches"}
{"db_id": "wta_1", "question": "Give me both player names in each match?", "query": "SELECT loser_name, winner_name FROM matches"}
{"db_id": "wta_1", "question": "Find both player ages in each match.", "query": "SELECT winner_age, loser_age FROM matches"}
{"db_id": "wta_1", "question": "Give me both player ages in each match.", "query": "SELECT winner_age, loser_age FROM matches"}
{"db_id": "wta_1", "question": "List the first name and birth date of all American players.", "query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"}
{"db_id": "wta_1", "question": "What are the first names and birth dates of American players?", "query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"}
{"db_id": "wta_1", "question": "Find the average loser and winner age of all matches.", "query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"}
{"db_id": "wta_1", "question": "What are the average loser and winner ages across matches?", "query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"}
{"db_id": "wta_1", "question": "Find their all average rank including winner and loser in each matches.", "query": "SELECT avg(winner_rank), avg(loser_rank) FROM matches"}
{"db_id": "wta_1", "question": "What is the average rank for all players including winner and loser in all matches?", "query": "SELECT avg(winner_rank), avg(loser_rank) FROM matches"}
{"db_id": "wta_1", "question": "Find the highest rank of all players including winner and loser in all matches.", "query": "SELECT min(winner_rank), min(loser_rank) FROM matches"}
{"db_id": "wta_1", "question": "What is the best rank of all players including winner and loser across all matches?", "query": "SELECT min(winner_rank), min(loser_rank) FROM matches"}
{"db_id": "wta_1", "question": "find the number of distinct country codes of all players.", "query": "SELECT count(DISTINCT country_code) FROM players"}
{"db_id": "wta_1", "question": "How many distinct countries do players come from?", "query": "SELECT count(DISTINCT country_code) FROM players"}
{"db_id": "wta_1", "question": "Find the number of distinct name of losers.", "query": "SELECT count(DISTINCT loser_name) FROM matches"}
{"db_id": "wta_1", "question": "How many different loser names are there?", "query": "SELECT count(DISTINCT loser_name) FROM matches"}
{"db_id": "wta_1", "question": "Find the name of tourney that has more than 10 matches.", "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10"}
{"db_id": "wta_1", "question": "What are the names of tournaments that have more than 10 matches?", "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10"}
{"db_id": "wta_1", "question": "List the names of all match players including winner and loser who played in both 2013 and 2016.", "query": "SELECT loser_name, winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT loser_name, winner_name FROM matches WHERE YEAR  =  2016"}
{"db_id": "wta_1", "question": "What are the names of all match players including winner and loser who played in both 2013 and 2016?", "query": "SELECT loser_name, winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT loser_name, winner_name FROM matches WHERE YEAR  =  2016"}
{"db_id": "wta_1", "question": "List the all player name in each matche who played in years of 2013 or 2016.", "query": "SELECT loser_name, winner_name FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016"}
{"db_id": "wta_1", "question": "Including winner and loser, Give me all player name of each matche in 2013 or 2016 year?", "query": "SELECT loser_name, winner_name FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016"}
{"db_id": "wta_1", "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?", "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'"}
{"db_id": "wta_1", "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?", "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'"}
{"db_id": "wta_1", "question": "Find the first name and country code of the oldest player.", "query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"}
{"db_id": "wta_1", "question": "What is the first name and country code of the oldest player?", "query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"}
{"db_id": "wta_1", "question": "List the first and last name of all players order of their birth date from old to young.", "query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date"}
{"db_id": "wta_1", "question": "What are the full names of all players, sorted from oldest to youngest?", "query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date"}
{"db_id": "wta_1", "question": "List the first and last name of all players who are left / L hand in the order of their date of birth from the oldest to the youngest.", "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date"}
{"db_id": "wta_1", "question": "What are the name of all left handed players, in order of date of birth from the young to the old?", "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date desc"}
{"db_id": "wta_1", "question": "Find the first name and country code of the player who did the most number of tours.", "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"}
{"db_id": "wta_1", "question": "What is the first name and country code of the player with the most tours?", "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"}
{"db_id": "wta_1", "question": "Find the year that has the most number of matches.", "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "wta_1", "question": "Which year had the most matches?", "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "wta_1", "question": "Find all match player name including winner and loser where the winner has the highest rank points and participated in the Australian Open tourney.", "query": "SELECT loser_name, winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"}
{"db_id": "wta_1", "question": "What are the match player names including winner and loser where the winner had the most rank points and participated in the Australian Open tournament?", "query": "SELECT loser_name, winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"}
{"db_id": "wta_1", "question": "Including winner and loser, find all the player names in each match with greatest number of minutes.", "query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"}
{"db_id": "wta_1", "question": "In each match, what are the winner with loser names who played in the longest match?", "query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"}
{"db_id": "wta_1", "question": "Find the average ranking for each player and their first name.", "query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"}
{"db_id": "wta_1", "question": "What are the first names of all players, and their average rankings?", "query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"}
{"db_id": "wta_1", "question": "find the number of players for each country.", "query": "SELECT count(*) ,  country_code FROM players GROUP BY country_code"}
{"db_id": "wta_1", "question": "How many players are from each country?", "query": "SELECT count(*) ,  country_code FROM players GROUP BY country_code"}
{"db_id": "wta_1", "question": "find the code of the country where has the greatest number of players.", "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "wta_1", "question": "What is the code of the country with the most players?", "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "wta_1", "question": "Find the codes of countries that have more than 50 players.", "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50"}
{"db_id": "wta_1", "question": "What are the codes of countries with more than 50 players?", "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50"}
{"db_id": "wta_1", "question": "Find the total number of tours for each ranking date.", "query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date"}
{"db_id": "wta_1", "question": "How many total tours were there for each ranking date?", "query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date"}
{"db_id": "wta_1", "question": "Find the number of matches happened in each year.", "query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR"}
{"db_id": "wta_1", "question": "How many matches were played in each year?", "query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR"}
{"db_id": "wta_1", "question": "How many different winners both participated in the WTA Championships and were left handed?", "query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"}
{"db_id": "wta_1", "question": "Find the number of left handed winners who participated in the WTA Championships.", "query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"}
{"db_id": "wta_1", "question": "Find the name and birth date of the winner who has the highest rank points in all matches.", "query": "SELECT T1.first_name , T1.last_name ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"}
{"db_id": "wta_1", "question": "What is the name and birth date of the player with the most winner rank points across all matches?", "query": "SELECT T1.first_name , T1.last_name  ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"}
{"db_id": "wta_1", "question": "Find the number of players for each hand type.", "query": "SELECT count(*) ,  hand FROM players GROUP BY hand"}
{"db_id": "wta_1", "question": "How many players are there for each hand type?", "query": "SELECT count(*) ,  hand FROM players GROUP BY hand"}
{"db_id": "student_transcripts_tracking", "question": "what are all the addresse lines?", "query": "SELECT line_1 ,  line_2, line_3 FROM addresses"}
{"db_id": "student_transcripts_tracking", "question": "Give me the three addresse lines?", "query": "SELECT line_1 ,  line_2, line_3 FROM addresses"}
{"db_id": "new_orchestra", "question": "How many first shows?", "query": "SELECT count(*) FROM show where If_first_show = 'T'"}
{"db_id": "new_orchestra", "question": "Count the number of first show.", "query": "SELECT count(*) FROM show where If_first_show = 'T'"}
{"db_id": "new_orchestra", "question": "List the names of conductors in ascending order of age.", "query": "SELECT Name FROM conductor ORDER BY birthday desc"}
{"db_id": "new_orchestra", "question": "What are the names of conductors, ordered by age?", "query": "SELECT Name FROM conductor ORDER BY birthday desc"}
{"db_id": "new_orchestra", "question": "What are the names of american conductors?", "query": "SELECT Name FROM conductor WHERE Nationality = 'USA'"}
{"db_id": "new_orchestra", "question": "Return the names of american conductors.", "query": "SELECT Name FROM conductor WHERE Nationality = 'USA'"}
{"db_id": "new_orchestra", "question": "What are the record companies of orchestras in the order of founded years from oldest to latest?", "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded asc"}
{"db_id": "new_orchestra", "question": "Return the record companies of orchestras, sorted by the founded year from oldest to latest.", "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded asc"}
{"db_id": "new_orchestra", "question": "What is the average attendance of non-first shows?", "query": "SELECT avg(Attendance) FROM SHOW where If_first_show = 'F'"}
{"db_id": "new_orchestra", "question": "Return the average attendance across all non-first shows.", "query": "SELECT avg(Attendance) FROM SHOW where If_first_show = 'F'"}
{"db_id": "new_orchestra", "question": "How many different nationalities do conductors have?", "query": "SELECT count(DISTINCT Nationality) FROM conductor"}
{"db_id": "new_orchestra", "question": "Count the number of different nationalities of conductors.", "query": "SELECT count(DISTINCT Nationality) FROM conductor"}
{"db_id": "new_orchestra", "question": "List names of conductors in ascending order of age.", "query": "SELECT Name FROM conductor ORDER BY birthday DESC"}
{"db_id": "new_orchestra", "question": "What are the names of conductors, sorted ascending by age?", "query": "SELECT Name FROM conductor ORDER BY birthday DESC"}
{"db_id": "new_orchestra", "question": "List the name of the conductor with the longest work.", "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}
{"db_id": "new_orchestra", "question": "What is the name of the conductor who has worked the longest?", "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}
{"db_id": "new_orchestra", "question": "Show the names of conductors and the orchestras they have conducted.", "query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}
{"db_id": "new_orchestra", "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}
{"db_id": "new_orchestra", "question": "Please show the name of the conductor who has conducted the oldest orchestras.", "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID order by Year_of_Founded asc limit 1"}
{"db_id": "new_orchestra", "question": "What are the names of conductors who have conducted the latest orchestras?", "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID order by Year_of_Founded  desc limit 1"}
{"db_id": "new_orchestra", "question": "Please show the different record companies and the corresponding number of orchestras.", "query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company"}
{"db_id": "new_orchestra", "question": "How many orchestras does each record company manage?", "query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company"}
{"db_id": "new_orchestra", "question": "Please show the record formats of orchestras in ascending order of age.", "query": "SELECT Major_Record_Format FROM orchestra ORDER BY Year_of_Founded desc"}
{"db_id": "new_orchestra", "question": "What are the major record formats of orchestras, sorted by their age?", "query": "SELECT Major_Record_Format FROM orchestra ORDER BY Year_of_Founded desc"}
{"db_id": "new_orchestra", "question": "List the record company shared by the oldest orchestras.", "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded asc LIMIT 1"}
{"db_id": "new_orchestra", "question": "What is the record company used by the newest orchestras?", "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded desc LIMIT 1"}
{"db_id": "new_orchestra", "question": "List the names of orchestras that have no performance.", "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)"}
{"db_id": "new_orchestra", "question": "What are the orchestras that do not have any performances?", "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)"}
{"db_id": "new_orchestra", "question": "Show the record companies shared by orchestras founded before or in 2003.", "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <=  2003"}
{"db_id": "new_orchestra", "question": "What are the record companies that are used by both orchestras founded after or in 2003?", "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >=  2003"}
{"db_id": "dog_kennels", "question": "Which states have both owners and professionals living there?", "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals"}
{"db_id": "dog_kennels", "question": "Find the states where both owners and professionals live.", "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals"}
{"db_id": "dog_kennels", "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.", "query": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2"}
{"db_id": "dog_kennels", "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.", "query": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2"}
{"db_id": "dog_kennels", "question": "Which dogs have not cost their owner more than 1000 for treatment? List the dog names.", "query": "SELECT name FROM Dogs WHERE dog_id NOT IN( SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum(cost_of_treatment)  >  1000 )"}
{"db_id": "dog_kennels", "question": "What are the names of the dogs for which the owner spent more than 1000 for treatment?", "query": "SELECT name FROM Dogs WHERE dog_id NOT IN( SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum(cost_of_treatment)  >  1000 )"}
{"db_id": "dog_kennels", "question": "Which first names are used for professionals or owners but are not used as dog names?", "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs"}
{"db_id": "dog_kennels", "question": "Find the first names that are used for professionals or owners but are not used as dog names.", "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs"}
{"db_id": "dog_kennels", "question": "Which professional did not operate any treatment on dogs? List the professional's id, and name.", "query": "SELECT professional_id ,  first_name , last_name FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id"}
{"db_id": "dog_kennels", "question": "Give me the id, and name of the professionals who did not perform any treatment on dogs.", "query": "SELECT professional_id ,  first_name , last_name FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id"}
{"db_id": "dog_kennels", "question": "Which professionals have done at least two treatments? List the professional's id, home and phone number.", "query": "SELECT T1.professional_id ,  T1.home_phone ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"}
{"db_id": "dog_kennels", "question": "What are the id, home and phone number of the professionals who have performed two or more treatments?", "query": "SELECT T1.professional_id ,  T1.home_phone ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"}
{"db_id": "dog_kennels", "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.", "query": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "dog_kennels", "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.", "query": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"}
{"db_id": "dog_kennels", "question": "What is the description of the treatment type that costs the least money in total?", "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1"}
{"db_id": "dog_kennels", "question": "Give me the description of the treatment type whose total cost is the lowest.", "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1"}
{"db_id": "dog_kennels", "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.", "query": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1"}
{"db_id": "dog_kennels", "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.", "query": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1"}
{"db_id": "dog_kennels", "question": "Which professionals have done at least two types of treatments? List the professional id and name.", "query": "SELECT T1.professional_id ,  T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"}
{"db_id": "dog_kennels", "question": "Find the id and home and phone number of the professionals who operate two or more types of treatments.", "query": "SELECT T1.professional_id ,  T1.home_phone ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"}
{"db_id": "dog_kennels", "question": "List the date of each treatment, together with the name of the professional who operated it.", "query": "SELECT T1.date_of_treatment ,  T2.first_name , T2.last_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}
{"db_id": "dog_kennels", "question": "What are the date and the operating professional's name of each treatment?", "query": "SELECT T1.date_of_treatment ,  T2.first_name , T2.last_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}
{"db_id": "dog_kennels", "question": "List the cost of each treatment and the corresponding treatment type description.", "query": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code"}
{"db_id": "dog_kennels", "question": "What are the cost and treatment type description of each treatment?", "query": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code"}
{"db_id": "dog_kennels", "question": "List each owner's name, and the size of his for her dog.", "query": "SELECT T1.first_name , T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}
{"db_id": "dog_kennels", "question": "What are each owner's name, and the size of their dog?", "query": "SELECT T1.first_name , T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}
{"db_id": "dog_kennels", "question": "List pairs of the owner's names and the dogs's name.", "query": "SELECT T1.first_name , T1.last_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}
{"db_id": "dog_kennels", "question": "What are each owner's name and their dogs's name?", "query": "SELECT T1.first_name , T1.last_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}
{"db_id": "dog_kennels", "question": "List the names of the dogs of the rarest breed and the treatment dates of them.", "query": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )"}
{"db_id": "dog_kennels", "question": "Which dogs are of the rarest breed? Show their names and treatment dates.", "query": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )"}
{"db_id": "dog_kennels", "question": "Which dogs are owned by someone who lives in VA? List the owner's first name and the dog's name.", "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}
{"db_id": "dog_kennels", "question": "Find the first names of owners living in VA and the names of dogs they own.", "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}
{"db_id": "dog_kennels", "question": "What is the treatment date from dog arriving to departing?", "query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}
{"db_id": "dog_kennels", "question": "Find the dog treatment period from arriving to departing date.", "query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}
{"db_id": "dog_kennels", "question": "List the last name of the owner owning the youngest dog.", "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )"}
{"db_id": "dog_kennels", "question": "Who owns the youngest dog? Give me his or her last name.", "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )"}
{"db_id": "dog_kennels", "question": "List the emails of the professionals who live in the state of HI or WI.", "query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'"}
{"db_id": "dog_kennels", "question": "What are the emails of the professionals living in either the state of HI or WI?", "query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'"}
{"db_id": "dog_kennels", "question": "How many dogs went through any treatments?", "query": "SELECT count(DISTINCT dog_id) FROM Treatments"}
{"db_id": "dog_kennels", "question": "Count the number of dogs that went through a treatment.", "query": "SELECT count(DISTINCT dog_id) FROM Treatments"}
{"db_id": "dog_kennels", "question": "How many professionals have performed any treatment to dogs?", "query": "SELECT count(DISTINCT professional_id) FROM Treatments"}
{"db_id": "dog_kennels", "question": "Find the number of professionals who have ever treated dogs.", "query": "SELECT count(DISTINCT professional_id) FROM Treatments"}
{"db_id": "dog_kennels", "question": "Which professionals live in a city containing the substring 'West'? List his or her name.", "query": "SELECT first_name , last_name FROM professionals WHERE city LIKE '%West%'"}
{"db_id": "dog_kennels", "question": "Find the name of the professionals living in a city that contains the substring 'West'.", "query": "SELECT first_name , last_name FROM professionals WHERE city LIKE '%West%'"}
{"db_id": "dog_kennels", "question": "Which owners live in the state whose name contains the substring 'North'? List his name.", "query": "SELECT first_name , last_name FROM Owners WHERE state LIKE '%North%'"}
{"db_id": "dog_kennels", "question": "Return the name of the owners living in a state whose name contains the substring 'North'.", "query": "SELECT first_name , last_name FROM Owners WHERE state LIKE '%North%'"}
{"db_id": "dog_kennels", "question": "How much does the most recent treatment cost?", "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}
{"db_id": "dog_kennels", "question": "Show me the cost of the most recently performed treatment.", "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}
{"db_id": "dog_kennels", "question": "Tell me the number of dogs that have received any treatment.", "query": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )"}
{"db_id": "dog_kennels", "question": "How many professionals did not operate any treatment on dogs?", "query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )"}
{"db_id": "dog_kennels", "question": "Find the number of professionals who have not treated any dogs.", "query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )"}
{"db_id": "dog_kennels", "question": "What is the age of the oldest dog?", "query": "SELECT max(age) FROM Dogs"}
{"db_id": "dog_kennels", "question": "Tell me the age of the oldest dog.", "query": "SELECT max(age) FROM Dogs"}
{"db_id": "dog_kennels", "question": "How much does each charge type costs? List both charge type and amount.", "query": "SELECT charge_type ,  charge_amount FROM Charges"}
{"db_id": "dog_kennels", "question": "List each charge type and its amount.", "query": "SELECT charge_type ,  charge_amount FROM Charges"}
{"db_id": "dog_kennels", "question": "How much does the most expensive charge type costs?", "query": "SELECT max(charge_amount) FROM Charges"}
{"db_id": "dog_kennels", "question": "What is the charge amount of the most expensive charge type?", "query": "SELECT max(charge_amount) FROM Charges"}
{"db_id": "dog_kennels", "question": "List the email and name of all the professionals.", "query": "SELECT email_address , first_name , last_name FROM professionals"}
{"db_id": "dog_kennels", "question": "What are the email, and name of each professional?", "query": "SELECT email_address , first_name , last_name FROM professionals"}
{"db_id": "dog_kennels", "question": "What are all the possible breed type and size type combinations?", "query": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}
{"db_id": "dog_kennels", "question": "Find the distinct breed type and size type combinations for dogs.", "query": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}
{"db_id": "dog_kennels", "question": "List the name of all the professionals along with the description of the treatment they have done.", "query": "SELECT DISTINCT T1.first_name , T1.last_name , T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code"}
{"db_id": "dog_kennels", "question": "What are each professional's name and description of the treatment they have performed?", "query": "SELECT DISTINCT T1.first_name , T1.last_name , T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code"}
{"db_id": "singer", "question": "How many singers are there?", "query": "SELECT count(*) FROM singer"}
{"db_id": "singer", "question": "What is the count of singers?", "query": "SELECT count(*) FROM singer"}
{"db_id": "singer", "question": "List the name of singers in ascending order of age.", "query": "SELECT Name FROM singer ORDER BY Birth_Year desc"}
{"db_id": "singer", "question": "What are the names of singers ordered by ascending age?", "query": "SELECT Name FROM singer ORDER BY Birth_Year desc"}
{"db_id": "singer", "question": "What are the birth year and citizenship of singers?", "query": "SELECT Birth_Year ,  Citizenship FROM singer"}
{"db_id": "singer", "question": "What are the birth years and citizenships of the singers?", "query": "SELECT Birth_Year ,  Citizenship FROM singer"}
{"db_id": "singer", "question": "Show the name of singers whose birth year is earlier than or in 1948?", "query": "SELECT Name FROM singer WHERE Birth_Year  <=  1948"}
{"db_id": "singer", "question": "What are the names of the singers whose birth years are earlier than or in 1948?", "query": "SELECT Name FROM singer WHERE Birth_Year  <=  1948"}
{"db_id": "singer", "question": "What is the name of the singer with the youngest age?", "query": "SELECT Name FROM singer ORDER BY Birth_Year DESC LIMIT 1"}
{"db_id": "singer", "question": "What is the name of the singer who is the youngest?", "query": "SELECT Name FROM singer ORDER BY Birth_Year DESC LIMIT 1"}
{"db_id": "singer", "question": "Show different citizenship of singers and the number of singers of each citizenship.", "query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship"}
{"db_id": "singer", "question": "For each citizenship, how many singers are from that country?", "query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship"}
{"db_id": "singer", "question": "Please show the most common citizenship of singers.", "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1"}
{"db_id": "singer", "question": "What is the msot common singer citizenship?", "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1"}
{"db_id": "singer", "question": "Show different citizenships and the highest net worth of singers of each citizenship.", "query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship"}
{"db_id": "singer", "question": "For each citizenship, what is the highest net worth?", "query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship"}
{"db_id": "singer", "question": "Show the names of the highest sales songs.", "query": "SELECT Title FROM song order by Sales desc limit 1"}
{"db_id": "singer", "question": "What are names of the highest sales songs?", "query": "SELECT Title FROM song order by Sales desc limit 1"}
{"db_id": "singer", "question": "Show distinct names of singers that have songs with sales more than 300000.", "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}
{"db_id": "singer", "question": "what are the different names of the singers that have sales more than 300000?", "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}
{"db_id": "singer", "question": "Show the names of singers that have more than one song.", "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1"}
{"db_id": "singer", "question": "What are the names of the singers that have more than one songs?", "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1"}
{"db_id": "singer", "question": "Show the names of singers and the max highest position of their songs.", "query": "SELECT T1.Name ,  max(T2.Highest_Position) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name"}
{"db_id": "singer", "question": "For each singer name, what is the maximum highest position for their songs?", "query": "SELECT T1.Name ,  max(T2.Highest_Position) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name"}
{"db_id": "singer", "question": "List the name of singers that do not have any song.", "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)"}
{"db_id": "singer", "question": "What is the sname of every sing that does not have any song?", "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)"}
{"db_id": "singer", "question": "Show the citizenship shared by singers with birth year before or in 1945.", "query": "SELECT Citizenship FROM singer WHERE Birth_Year  <=  1945"}
{"db_id": "singer", "question": "What are the citizenships that are shared by singers with a birth year before or in 1945?", "query": "SELECT Citizenship FROM singer WHERE Birth_Year  <=  1945"}
